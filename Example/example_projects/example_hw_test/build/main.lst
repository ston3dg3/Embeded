
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f04  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020460  2**0
                  CONTENTS
  5 .data         00000460  20000000  0c003f04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e0  20000460  0c004364  00020460  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020460  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c004364  00030000  2**2
                  ALLOC
 10 .debug_aranges 00000870  00000000  00000000  00020460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00013692  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000327e  00000000  00000000  00034362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000dbb7  00000000  00000000  000375e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001338  00000000  00000000  00045198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00083578  00000000  00000000  000464d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00005d7e  00000000  00000000  000c9a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010e0  00000000  00000000  000cf7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000003fe  00000000  00000000  000d08a6  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001c4a3  00000000  00000000  000d0ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	75 03 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     u...............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c003f04 	.word	0x0c003f04
 800024c:	20000000 	.word	0x20000000
 8000250:	00000460 	.word	0x00000460
 8000254:	0c004364 	.word	0x0c004364
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c003f04 	.word	0x0c003f04
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c003f04 	.word	0x0c003f04
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000460 	.word	0x20000460
 800027c:	000006e0 	.word	0x000006e0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	080039fd 	.word	0x080039fd
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	08003a65 	.word	0x08003a65
 80002ac:	080002e9 	.word	0x080002e9

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <SystemCoreClockSetup>:
    .fccu_clkdiv = 1,
    .fperipheral_clkdiv = 1
};


void SystemCoreClockSetup(void) {
 80002b4:	b508      	push	{r3, lr}
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <SystemCoreClockSetup+0x30>)
 80002b8:	f002 fe8e 	bl	8002fd8 <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 80002bc:	f002 fb4a 	bl	8002954 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 80002c0:	2140      	movs	r1, #64	; 0x40
 80002c2:	2002      	movs	r0, #2
 80002c4:	f002 fb5a 	bl	800297c <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 80002c8:	2004      	movs	r0, #4
 80002ca:	f002 fadb 	bl	8002884 <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80002ce:	2000      	movs	r0, #0
 80002d0:	f002 fa60 	bl	8002794 <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f002 fb01 	bl	80028dc <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
}
 80002da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
 80002de:	f003 ba5d 	b.w	800379c <SystemCoreClockUpdate>
 80002e2:	bf00      	nop
 80002e4:	08003d9c 	.word	0x08003d9c

080002e8 <main>:

/**
 * Main program entry point. This routine configures the hardware required by
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void) {
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t Bytes = 0;

  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 80002ea:	4a1e      	ldr	r2, [pc, #120]	; (8000364 <main+0x7c>)
 80002ec:	481e      	ldr	r0, [pc, #120]	; (8000368 <main+0x80>)
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
  USB_Init();

  while (1) {
    /* Check if data received */
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 80002ee:	4d1f      	ldr	r5, [pc, #124]	; (800036c <main+0x84>)

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80002f0:	4e1d      	ldr	r6, [pc, #116]	; (8000368 <main+0x80>)
  XMC_GPIO_Init(GPIO_LED1,     &out_config);
 80002f2:	2101      	movs	r1, #1
 80002f4:	f003 f9d2 	bl	800369c <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_LED2,     &out_config);
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <main+0x7c>)
 80002fa:	481b      	ldr	r0, [pc, #108]	; (8000368 <main+0x80>)
 80002fc:	2100      	movs	r1, #0
 80002fe:	f003 f9cd 	bl	800369c <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON1,  &in_config);
 8000302:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <main+0x88>)
 8000304:	4818      	ldr	r0, [pc, #96]	; (8000368 <main+0x80>)
 8000306:	210e      	movs	r1, #14
 8000308:	f003 f9c8 	bl	800369c <XMC_GPIO_Init>
  XMC_GPIO_Init(GPIO_BUTTON2,  &in_config);
 800030c:	4a18      	ldr	r2, [pc, #96]	; (8000370 <main+0x88>)
 800030e:	4816      	ldr	r0, [pc, #88]	; (8000368 <main+0x80>)
 8000310:	210f      	movs	r1, #15
 8000312:	f003 f9c3 	bl	800369c <XMC_GPIO_Init>
  USB_Init();
 8000316:	f000 f833 	bl	8000380 <USB_Init>
  port->OMR = 0x10000U << pin;
 800031a:	f44f 3700 	mov.w	r7, #131072	; 0x20000
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 800031e:	4628      	mov	r0, r5
 8000320:	f001 fd02 	bl	8001d28 <CDC_Device_BytesReceived>

    while(Bytes > 0) {
 8000324:	4604      	mov	r4, r0
 8000326:	b150      	cbz	r0, 800033e <main+0x56>
      /* Send data back to the host */
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
                          CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface));
 8000328:	4628      	mov	r0, r5
 800032a:	f001 fd2b 	bl	8001d84 <CDC_Device_ReceiveByte>
      --Bytes;
 800032e:	3c01      	subs	r4, #1
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 8000330:	b2c1      	uxtb	r1, r0
      --Bytes;
 8000332:	b2a4      	uxth	r4, r4
      CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 8000334:	4628      	mov	r0, r5
 8000336:	f001 fc7b 	bl	8001c30 <CDC_Device_SendByte>
    while(Bytes > 0) {
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1f4      	bne.n	8000328 <main+0x40>
  return (((port->IN) >> pin) & 0x1U);
 800033e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    }

    if(XMC_GPIO_GetInput(GPIO_BUTTON1) == 0) {
 8000340:	045a      	lsls	r2, r3, #17
 8000342:	d40c      	bmi.n	800035e <main+0x76>
  port->OMR = (uint32_t)0x1U << pin;
 8000344:	2302      	movs	r3, #2
 8000346:	6073      	str	r3, [r6, #4]
  return (((port->IN) >> pin) & 0x1U);
 8000348:	6a73      	ldr	r3, [r6, #36]	; 0x24
      XMC_GPIO_SetOutputHigh(GPIO_LED1);
    } else {
      XMC_GPIO_SetOutputLow(GPIO_LED1);
    }
    if(XMC_GPIO_GetInput(GPIO_BUTTON2) == 0) {
 800034a:	041b      	lsls	r3, r3, #16
  port->OMR = (uint32_t)0x1U << pin;
 800034c:	bf54      	ite	pl
 800034e:	2301      	movpl	r3, #1
  port->OMR = 0x10000U << pin;
 8000350:	f44f 3380 	movmi.w	r3, #65536	; 0x10000
 8000354:	6073      	str	r3, [r6, #4]
      XMC_GPIO_SetOutputHigh(GPIO_LED2);
    } else {
      XMC_GPIO_SetOutputLow(GPIO_LED2);
    }

    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 8000356:	4628      	mov	r0, r5
 8000358:	f001 fcc6 	bl	8001ce8 <CDC_Device_USBTask>
    Bytes = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 800035c:	e7df      	b.n	800031e <main+0x36>
 800035e:	6077      	str	r7, [r6, #4]
}
 8000360:	e7f2      	b.n	8000348 <main+0x60>
 8000362:	bf00      	nop
 8000364:	08003db0 	.word	0x08003db0
 8000368:	48028100 	.word	0x48028100
 800036c:	20000010 	.word	0x20000010
 8000370:	08003dbc 	.word	0x08003dbc

08000374 <USB0_0_IRQHandler>:
**                     Public Function Definitions                            **
*******************************************************************************/

void USB0_0_IRQHandler(void)
{
  XMC_USBD_IRQHandler(&USB_runtime);
 8000374:	4801      	ldr	r0, [pc, #4]	; (800037c <USB0_0_IRQHandler+0x8>)
 8000376:	f001 b8bd 	b.w	80014f4 <XMC_USBD_IRQHandler>
 800037a:	bf00      	nop
 800037c:	20000000 	.word	0x20000000

08000380 <USB_Init>:
}

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void)
{
 8000380:	b510      	push	{r4, lr}
  USBD_Initialize(&USB_runtime);
 8000382:	4815      	ldr	r0, [pc, #84]	; (80003d8 <USB_Init+0x58>)
 8000384:	f000 fb88 	bl	8000a98 <USBD_Initialize>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <USB_Init+0x5c>)
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000390:	f1c2 0107 	rsb	r1, r2, #7
 8000394:	2906      	cmp	r1, #6
 8000396:	bf28      	it	cs
 8000398:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800039a:	b102      	cbz	r2, 800039e <USB_Init+0x1e>
 800039c:	3a01      	subs	r2, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003a2:	408b      	lsls	r3, r1
 80003a4:	43db      	mvns	r3, r3
 80003a6:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <USB_Init+0x60>)
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <USB_Init+0x64>)
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f882 336b 	strb.w	r3, [r2, #875]	; 0x36b
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
  NVIC_EnableIRQ(USB0_0_IRQn);

  /* LUFA Class Line Encoding*/
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <USB_Init+0x58>)
 80003ba:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003be:	60d1      	str	r1, [r2, #12]
 80003c0:	6802      	ldr	r2, [r0, #0]
  VirtualSerial_CDC_Interface.State.LineEncoding.DataBits = 8;
 80003c2:	2008      	movs	r0, #8
 80003c4:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
  VirtualSerial_CDC_Interface.State.LineEncoding.BaudRateBPS = 9600;
 80003c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80003cc:	68d2      	ldr	r2, [r2, #12]
 80003ce:	6299      	str	r1, [r3, #40]	; 0x28

  /* USB Connection*/
  USB_Attach();
	
}
 80003d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d4:	4710      	bx	r2
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	e000e100 	.word	0xe000e100
 80003e4:	20000520 	.word	0x20000520

080003e8 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <EVENT_USB_Device_Disconnect>:
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <EVENT_USB_Device_Reset>:
{
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void)
{
 80003f0:	b510      	push	{r4, lr}
  if(device.IsConfigured)
 80003f2:	4c07      	ldr	r4, [pc, #28]	; (8000410 <EVENT_USB_Device_Reset+0x20>)
 80003f4:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80003f8:	07db      	lsls	r3, r3, #31
 80003fa:	d400      	bmi.n	80003fe <EVENT_USB_Device_Reset+0xe>
  {
    USB_Init();
    device.IsConfigured=0;
  }
}
 80003fc:	bd10      	pop	{r4, pc}
    USB_Init();
 80003fe:	f7ff ffbf 	bl	8000380 <USB_Init>
    device.IsConfigured=0;
 8000402:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000406:	f36f 0300 	bfc	r3, #0, #1
 800040a:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 800040e:	bd10      	pop	{r4, pc}
 8000410:	20000520 	.word	0x20000520

08000414 <EVENT_USB_Device_ConfigurationChanged>:

/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 8000414:	b510      	push	{r4, lr}
  USBD_SetEndpointBuffer(CDC_NOTIFICATION_EPADDR, ep2_buf, 64);
 8000416:	4c0e      	ldr	r4, [pc, #56]	; (8000450 <EVENT_USB_Device_ConfigurationChanged+0x3c>)
 8000418:	2240      	movs	r2, #64	; 0x40
 800041a:	4621      	mov	r1, r4
 800041c:	2081      	movs	r0, #129	; 0x81
 800041e:	f000 fb7b 	bl	8000b18 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_TX_EPADDR, ep3_buf, 64);
 8000422:	2240      	movs	r2, #64	; 0x40
 8000424:	18a1      	adds	r1, r4, r2
 8000426:	2082      	movs	r0, #130	; 0x82
 8000428:	f000 fb76 	bl	8000b18 <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer(CDC_RX_EPADDR, ep4_buf, 64);
 800042c:	2240      	movs	r2, #64	; 0x40
 800042e:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8000432:	2003      	movs	r0, #3
 8000434:	f000 fb70 	bl	8000b18 <USBD_SetEndpointBuffer>
  CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 8000438:	4806      	ldr	r0, [pc, #24]	; (8000454 <EVENT_USB_Device_ConfigurationChanged+0x40>)
 800043a:	f001 fb95 	bl	8001b68 <CDC_Device_ConfigureEndpoints>

  device.IsConfigured = 1;
 800043e:	4a06      	ldr	r2, [pc, #24]	; (8000458 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000440:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 800044c:	bd10      	pop	{r4, pc}
 800044e:	bf00      	nop
 8000450:	20000460 	.word	0x20000460
 8000454:	20000010 	.word	0x20000010
 8000458:	20000520 	.word	0x20000520

0800045c <EVENT_USB_Device_ControlRequest>:

/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest()
{
  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 800045c:	4801      	ldr	r0, [pc, #4]	; (8000464 <EVENT_USB_Device_ControlRequest+0x8>)
 800045e:	f001 bd1f 	b.w	8001ea0 <CDC_Device_ProcessControlRequest>
 8000462:	bf00      	nop
 8000464:	20000010 	.word	0x20000010

08000468 <EVENT_USB_Device_StartOfFrame>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <EVENT_USB_Device_WakeUp>:
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <EVENT_USB_Device_Suspend>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000474:	0a01      	lsrs	r1, r0, #8
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 8000476:	2902      	cmp	r1, #2
 8000478:	d018      	beq.n	80004ac <CALLBACK_USB_GetDescriptor+0x38>
 800047a:	2903      	cmp	r1, #3
 800047c:	d009      	beq.n	8000492 <CALLBACK_USB_GetDescriptor+0x1e>
 800047e:	2901      	cmp	r1, #1
 8000480:	d003      	beq.n	800048a <CALLBACK_USB_GetDescriptor+0x16>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000482:	2000      	movs	r0, #0
 8000484:	4603      	mov	r3, r0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 8000486:	6013      	str	r3, [r2, #0]
	return Size;
}
 8000488:	4770      	bx	lr
	switch (DescriptorType)
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <CALLBACK_USB_GetDescriptor+0x40>)
	*DescriptorAddress = Address;
 800048c:	6013      	str	r3, [r2, #0]
	switch (DescriptorType)
 800048e:	2012      	movs	r0, #18
}
 8000490:	4770      	bx	lr
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000492:	b2c0      	uxtb	r0, r0
			switch (DescriptorNumber)
 8000494:	2802      	cmp	r0, #2
 8000496:	d8f4      	bhi.n	8000482 <CALLBACK_USB_GetDescriptor+0xe>
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <CALLBACK_USB_GetDescriptor+0x44>)
 800049a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800049e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80004a2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80004a4:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
	*DescriptorAddress = Address;
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	4770      	bx	lr
			Address = &ConfigurationDescriptor;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <CALLBACK_USB_GetDescriptor+0x44>)
	*DescriptorAddress = Address;
 80004ae:	6013      	str	r3, [r2, #0]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 80004b0:	203e      	movs	r0, #62	; 0x3e
}
 80004b2:	4770      	bx	lr
 80004b4:	08003e08 	.word	0x08003e08
 80004b8:	08003dc8 	.word	0x08003dc8

080004bc <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 80004bc:	b510      	push	{r4, lr}
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 80004be:	4c08      	ldr	r4, [pc, #32]	; (80004e0 <USBD_HandleEP0_Stall+0x24>)
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	2101      	movs	r1, #1
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	2080      	movs	r0, #128	; 0x80
 80004c8:	4798      	blx	r3
	device.EP0_State = IDLE;
	device.Driver->EndpointReadStart(0,24);
 80004ca:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 80004cc:	2201      	movs	r2, #1
 80004ce:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 80004d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80004d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	device.Driver->EndpointReadStart(0,24);
 80004d8:	2118      	movs	r1, #24
 80004da:	2000      	movs	r0, #0
 80004dc:	4718      	bx	r3
 80004de:	bf00      	nop
 80004e0:	20000520 	.word	0x20000520

080004e4 <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 80004e4:	b570      	push	{r4, r5, r6, lr}
	uint16_t status = 0;
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 80004e6:	4d9a      	ldr	r5, [pc, #616]	; (8000750 <USB_Device_ProcessControlRequest+0x26c>)

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
	if (!device.IsSetupRecieved)
 80004e8:	4c9a      	ldr	r4, [pc, #616]	; (8000754 <USB_Device_ProcessControlRequest+0x270>)
	Value = USB_ControlRequest.wValue & 0x00FF;
 80004ea:	886e      	ldrh	r6, [r5, #2]
void USB_Device_ProcessControlRequest() {
 80004ec:	b082      	sub	sp, #8
	uint16_t status = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8ad 3002 	strh.w	r3, [sp, #2]
	EVENT_USB_Device_ControlRequest();
 80004f4:	f7ff ffb2 	bl	800045c <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 80004f8:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80004fc:	079b      	lsls	r3, r3, #30
 80004fe:	d529      	bpl.n	8000554 <USB_Device_ProcessControlRequest+0x70>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8000500:	786b      	ldrb	r3, [r5, #1]
	Value = USB_ControlRequest.wValue & 0x00FF;
 8000502:	b2f6      	uxtb	r6, r6
	switch (USB_ControlRequest.bRequest) {
 8000504:	2b0c      	cmp	r3, #12
 8000506:	d812      	bhi.n	800052e <USB_Device_ProcessControlRequest+0x4a>
 8000508:	e8df f003 	tbb	[pc, r3]
 800050c:	7411992f 	.word	0x7411992f
 8000510:	11078f11 	.word	0x11078f11
 8000514:	5426655e 	.word	0x5426655e
 8000518:	11          	.byte	0x11
 8000519:	00          	.byte	0x00
	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
		break;

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 800051a:	88a9      	ldrh	r1, [r5, #4]
 800051c:	8868      	ldrh	r0, [r5, #2]
 800051e:	aa01      	add	r2, sp, #4
 8000520:	b2c9      	uxtb	r1, r1
 8000522:	f7ff ffa7 	bl	8000474 <CALLBACK_USB_GetDescriptor>
		if (length==0)
 8000526:	4606      	mov	r6, r0
 8000528:	2800      	cmp	r0, #0
 800052a:	f040 8097 	bne.w	800065c <USB_Device_ProcessControlRequest+0x178>
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	2101      	movs	r1, #1
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	2080      	movs	r0, #128	; 0x80
 8000536:	4798      	blx	r3
	device.Driver->EndpointReadStart(0,24);
 8000538:	6823      	ldr	r3, [r4, #0]
	device.EP0_State = IDLE;
 800053a:	2201      	movs	r2, #1
 800053c:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8000540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000542:	2118      	movs	r1, #24
 8000544:	2000      	movs	r0, #0
 8000546:	4798      	blx	r3
		break;

	default:
		USBD_HandleEP0_Stall();
	}
	device.IsSetupRecieved = 0;
 8000548:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 800054c:	f36f 0341 	bfc	r3, #1, #1
 8000550:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
}
 8000554:	b002      	add	sp, #8
 8000556:	bd70      	pop	{r4, r5, r6, pc}
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8000558:	4b7f      	ldr	r3, [pc, #508]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	2a04      	cmp	r2, #4
 800055e:	f000 80a5 	beq.w	80006ac <USB_Device_ProcessControlRequest+0x1c8>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b03      	cmp	r3, #3
 8000566:	d1ef      	bne.n	8000548 <USB_Device_ProcessControlRequest+0x64>
 8000568:	e7e1      	b.n	800052e <USB_Device_ProcessControlRequest+0x4a>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 800056a:	7828      	ldrb	r0, [r5, #0]
 800056c:	f010 0003 	ands.w	r0, r0, #3
 8000570:	f000 808b 	beq.w	800068a <USB_Device_ProcessControlRequest+0x1a6>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8000574:	2801      	cmp	r0, #1
 8000576:	f000 80c8 	beq.w	800070a <USB_Device_ProcessControlRequest+0x226>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 800057a:	2802      	cmp	r0, #2
 800057c:	d1d7      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 800057e:	4a76      	ldr	r2, [pc, #472]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8000580:	88ab      	ldrh	r3, [r5, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	2a04      	cmp	r2, #4
 8000586:	d001      	beq.n	800058c <USB_Device_ProcessControlRequest+0xa8>
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1d0      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
					device.Endpoints[Index].IsConfigured==1) {
 800058c:	f003 030f 	and.w	r3, r3, #15
 8000590:	222c      	movs	r2, #44	; 0x2c
 8000592:	fb02 4303 	mla	r3, r2, r3, r4
 8000596:	7a1b      	ldrb	r3, [r3, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8000598:	07d8      	lsls	r0, r3, #31
 800059a:	d5c8      	bpl.n	800052e <USB_Device_ProcessControlRequest+0x4a>
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 800059c:	6822      	ldr	r2, [r4, #0]
				status = device.Endpoints[Index].IsHalted;
 800059e:	f3c3 0380 	ubfx	r3, r3, #2, #1
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80005a2:	6b15      	ldr	r5, [r2, #48]	; 0x30
				status = device.Endpoints[Index].IsHalted;
 80005a4:	f8ad 3002 	strh.w	r3, [sp, #2]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80005a8:	2202      	movs	r2, #2
 80005aa:	eb0d 0102 	add.w	r1, sp, r2
 80005ae:	2000      	movs	r0, #0
 80005b0:	47a8      	blx	r5
				break;
 80005b2:	e7c9      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80005b4:	4b68      	ldr	r3, [pc, #416]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	2a04      	cmp	r2, #4
 80005ba:	d1d2      	bne.n	8000562 <USB_Device_ProcessControlRequest+0x7e>
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 80005bc:	88ab      	ldrh	r3, [r5, #4]
 80005be:	886a      	ldrh	r2, [r5, #2]
 80005c0:	4423      	add	r3, r4
 80005c2:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 80005c6:	e7bf      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	4964      	ldr	r1, [pc, #400]	; (800075c <USB_Device_ProcessControlRequest+0x278>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	2201      	movs	r2, #1
 80005d0:	2000      	movs	r0, #0
 80005d2:	4798      	blx	r3
		break;
 80005d4:	e7b8      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		device.Configuration = Value;
 80005d6:	f884 6139 	strb.w	r6, [r4, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 80005da:	f7ff ff1b 	bl	8000414 <EVENT_USB_Device_ConfigurationChanged>
		if (Value == 0) {
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d04c      	beq.n	800067c <USB_Device_ProcessControlRequest+0x198>
		if (device.IsConfigured == 1)
 80005e2:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 80005e6:	f013 0501 	ands.w	r5, r3, #1
 80005ea:	d0a0      	beq.n	800052e <USB_Device_ProcessControlRequest+0x4a>
			USB_DeviceState = DEVICE_STATE_Configured;
 80005ec:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e7a9      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		if (Value == FEATURE_SEL_TestMode) {
 80005f4:	2e02      	cmp	r6, #2
 80005f6:	d09a      	beq.n	800052e <USB_Device_ProcessControlRequest+0x4a>
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	2a04      	cmp	r2, #4
 80005fe:	d079      	beq.n	80006f4 <USB_Device_ProcessControlRequest+0x210>
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b03      	cmp	r3, #3
 8000604:	d193      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8000606:	2e00      	cmp	r6, #0
 8000608:	d191      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
 800060a:	782b      	ldrb	r3, [r5, #0]
 800060c:	f003 0303 	and.w	r3, r3, #3
 8000610:	2b02      	cmp	r3, #2
 8000612:	d18c      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8000614:	88ab      	ldrh	r3, [r5, #4]
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d188      	bne.n	800052e <USB_Device_ProcessControlRequest+0x4a>
				device.Endpoints[0].IsHalted = 1;
 800061c:	7a23      	ldrb	r3, [r4, #8]
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	7223      	strb	r3, [r4, #8]
				USBD_HandleEP0_Stall();
 8000624:	f7ff ff4a 	bl	80004bc <USBD_HandleEP0_Stall>
				break;
 8000628:	e78e      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			USB_DeviceState = DEVICE_STATE_Default;
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
		if (Value == 0)
 800062c:	b356      	cbz	r6, 8000684 <USB_Device_ProcessControlRequest+0x1a0>
			USB_DeviceState = DEVICE_STATE_Addressed;
 800062e:	2203      	movs	r2, #3
 8000630:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	2100      	movs	r1, #0
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4630      	mov	r0, r6
 800063a:	4798      	blx	r3
		break;
 800063c:	e784      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 800063e:	782b      	ldrb	r3, [r5, #0]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	2b02      	cmp	r3, #2
 8000646:	d03b      	beq.n	80006c0 <USB_Device_ProcessControlRequest+0x1dc>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8000648:	2b00      	cmp	r3, #0
 800064a:	f47f af70 	bne.w	800052e <USB_Device_ProcessControlRequest+0x4a>
			 device.RemoteWakeUp = 0;
 800064e:	f894 213e 	ldrb.w	r2, [r4, #318]	; 0x13e
 8000652:	f363 0282 	bfi	r2, r3, #2, #1
 8000656:	f884 213e 	strb.w	r2, [r4, #318]	; 0x13e
			 break;
 800065a:	e775      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			length = length < USB_ControlRequest.wLength ?
 800065c:	88ea      	ldrh	r2, [r5, #6]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	9901      	ldr	r1, [sp, #4]
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			length = length < USB_ControlRequest.wLength ?
 8000664:	4290      	cmp	r0, r2
 8000666:	bf28      	it	cs
 8000668:	4616      	movcs	r6, r2
			ret = device.Driver->EndpointWrite(0,buffer,length);
 800066a:	4632      	mov	r2, r6
 800066c:	2000      	movs	r0, #0
 800066e:	4798      	blx	r3
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000670:	9b01      	ldr	r3, [sp, #4]
			device.Endpoints[0].InDataLeft = length - ret;
 8000672:	1a36      	subs	r6, r6, r0
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8000674:	4418      	add	r0, r3
 8000676:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 800067a:	e765      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			USB_DeviceState = DEVICE_STATE_Addressed;
 800067c:	4b36      	ldr	r3, [pc, #216]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 800067e:	2203      	movs	r2, #3
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	e761      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			USB_DeviceState = DEVICE_STATE_Default;
 8000684:	2202      	movs	r2, #2
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e7d3      	b.n	8000632 <USB_Device_ProcessControlRequest+0x14e>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 800068a:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 800068e:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8000692:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000696:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 800069a:	6822      	ldr	r2, [r4, #0]
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 800069c:	f8ad 3002 	strh.w	r3, [sp, #2]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 80006a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80006a2:	2202      	movs	r2, #2
 80006a4:	eb0d 0102 	add.w	r1, sp, r2
 80006a8:	4798      	blx	r3
			break;
 80006aa:	e74d      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 80006ac:	88a9      	ldrh	r1, [r5, #4]
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	f501 719c 	add.w	r1, r1, #312	; 0x138
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	2201      	movs	r2, #1
 80006b8:	4421      	add	r1, r4
 80006ba:	2000      	movs	r0, #0
 80006bc:	4798      	blx	r3
			break;
 80006be:	e743      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 80006c2:	88a8      	ldrh	r0, [r5, #4]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d002      	beq.n	80006d0 <USB_Device_ProcessControlRequest+0x1ec>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	f47f af2f 	bne.w	800052e <USB_Device_ProcessControlRequest+0x4a>
					device.Endpoints[Index].IsConfigured==1) {
 80006d0:	222c      	movs	r2, #44	; 0x2c
 80006d2:	f000 030f 	and.w	r3, r0, #15
 80006d6:	fb02 4303 	mla	r3, r2, r3, r4
 80006da:	7a1a      	ldrb	r2, [r3, #8]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 80006dc:	07d5      	lsls	r5, r2, #31
 80006de:	f57f af26 	bpl.w	800052e <USB_Device_ProcessControlRequest+0x4a>
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 80006e2:	6821      	ldr	r1, [r4, #0]
				device.Endpoints[Index].IsHalted = 0;
 80006e4:	f36f 0282 	bfc	r2, #2, #1
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 80006e8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
				device.Endpoints[Index].IsHalted = 0;
 80006ea:	721a      	strb	r2, [r3, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	b2c0      	uxtb	r0, r0
 80006f0:	47a8      	blx	r5
 80006f2:	e729      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
			switch (Value) {
 80006f4:	b1c6      	cbz	r6, 8000728 <USB_Device_ProcessControlRequest+0x244>
 80006f6:	2e01      	cmp	r6, #1
 80006f8:	f47f af26 	bne.w	8000548 <USB_Device_ProcessControlRequest+0x64>
				device.RemoteWakeUp = 1;
 80006fc:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
				break;
 8000708:	e71e      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <USB_Device_ProcessControlRequest+0x274>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b04      	cmp	r3, #4
 8000710:	f47f af0d 	bne.w	800052e <USB_Device_ProcessControlRequest+0x4a>
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	2202      	movs	r2, #2
			status = 0;
 8000718:	2000      	movs	r0, #0
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			status = 0;
 800071c:	f8ad 0002 	strh.w	r0, [sp, #2]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8000720:	eb0d 0102 	add.w	r1, sp, r2
 8000724:	4798      	blx	r3
			break;
 8000726:	e70f      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8000728:	88a8      	ldrh	r0, [r5, #4]
				if (device.Endpoints[Index].IsConfigured == 0)
 800072a:	222c      	movs	r2, #44	; 0x2c
 800072c:	f000 030f 	and.w	r3, r0, #15
 8000730:	fb02 4303 	mla	r3, r2, r3, r4
 8000734:	7a1a      	ldrb	r2, [r3, #8]
 8000736:	07d1      	lsls	r1, r2, #31
 8000738:	f57f aef9 	bpl.w	800052e <USB_Device_ProcessControlRequest+0x4a>
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 800073c:	6821      	ldr	r1, [r4, #0]
					device.Endpoints[Index].IsHalted = 1;
 800073e:	f042 0204 	orr.w	r2, r2, #4
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000742:	6a4d      	ldr	r5, [r1, #36]	; 0x24
					device.Endpoints[Index].IsHalted = 1;
 8000744:	721a      	strb	r2, [r3, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8000746:	2101      	movs	r1, #1
 8000748:	b2c0      	uxtb	r0, r0
 800074a:	47a8      	blx	r5
 800074c:	e6fc      	b.n	8000548 <USB_Device_ProcessControlRequest+0x64>
 800074e:	bf00      	nop
 8000750:	20000aa8 	.word	0x20000aa8
 8000754:	20000520 	.word	0x20000520
 8000758:	20000aa4 	.word	0x20000aa4
 800075c:	20000659 	.word	0x20000659

08000760 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8000760:	b510      	push	{r4, lr}
	if (device.EP0_State == IN_DATA) {
 8000762:	4c0c      	ldr	r4, [pc, #48]	; (8000794 <USBD_HandleEP0_IN+0x34>)
 8000764:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
 8000768:	2b02      	cmp	r3, #2
 800076a:	d00a      	beq.n	8000782 <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
		device.EP0_State = OUT_STATUS;
	}
	if (device.EP0_State == IN_STATUS) {
 800076c:	2b03      	cmp	r3, #3
 800076e:	d107      	bne.n	8000780 <USBD_HandleEP0_IN+0x20>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	7920      	ldrb	r0, [r4, #4]
 8000774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000776:	2118      	movs	r1, #24
 8000778:	4798      	blx	r3
		device.EP0_State = IDLE;
 800077a:	2301      	movs	r3, #1
 800077c:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	}
}
 8000780:	bd10      	pop	{r4, pc}
		device.Driver->EndpointReadStart(0,0);
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	2100      	movs	r1, #0
 8000786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000788:	4608      	mov	r0, r1
 800078a:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 800078c:	2305      	movs	r3, #5
 800078e:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 8000792:	bd10      	pop	{r4, pc}
 8000794:	20000520 	.word	0x20000520

08000798 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8000798:	b510      	push	{r4, lr}
	if (device.EP0_State == OUT_DATA) {
 800079a:	4c0e      	ldr	r4, [pc, #56]	; (80007d4 <USBD_HandleEP0_OUT+0x3c>)
 800079c:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	d00b      	beq.n	80007bc <USBD_HandleEP0_OUT+0x24>
		USB_Device_ProcessControlRequest();
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
		device.EP0_State = IN_STATUS;
	}
	if (device.EP0_State == OUT_STATUS) {
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	d000      	beq.n	80007aa <USBD_HandleEP0_OUT+0x12>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
		device.EP0_State = IDLE;
	}
}
 80007a8:	bd10      	pop	{r4, pc}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	7920      	ldrb	r0, [r4, #4]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	2118      	movs	r1, #24
 80007b2:	4798      	blx	r3
		device.EP0_State = IDLE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 80007ba:	bd10      	pop	{r4, pc}
		USB_Device_ProcessControlRequest();
 80007bc:	f7ff fe92 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	2200      	movs	r2, #0
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4611      	mov	r1, r2
 80007c8:	4610      	mov	r0, r2
 80007ca:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	20000520 	.word	0x20000520

080007d8 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 80007d8:	b570      	push	{r4, r5, r6, lr}
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 80007da:	4c1a      	ldr	r4, [pc, #104]	; (8000844 <USBD_HandleEP0_SETUP+0x6c>)
 80007dc:	4d1a      	ldr	r5, [pc, #104]	; (8000848 <USBD_HandleEP0_SETUP+0x70>)
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	2208      	movs	r2, #8
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	4629      	mov	r1, r5
 80007e6:	2000      	movs	r0, #0
 80007e8:	4798      	blx	r3
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 80007ea:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 80007ee:	2808      	cmp	r0, #8
	device.IsSetupRecieved = true;
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
	if (ret_val != 8 )
 80007f8:	d10f      	bne.n	800081a <USBD_HandleEP0_SETUP+0x42>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 80007fa:	88ee      	ldrh	r6, [r5, #6]
 80007fc:	b176      	cbz	r6, 800081c <USBD_HandleEP0_SETUP+0x44>
		device.EP0_State = IN_STATUS;
		USB_Device_ProcessControlRequest();
		device.Driver->EndpointWrite(0,0,0);
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 80007fe:	f995 3000 	ldrsb.w	r3, [r5]
 8000802:	2b00      	cmp	r3, #0
 8000804:	db17      	blt.n	8000836 <USBD_HandleEP0_SETUP+0x5e>
			USB_Device_ProcessControlRequest();
		}
		else {
			device.EP0_State = OUT_DATA;
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000806:	6823      	ldr	r3, [r4, #0]
			device.EP0_State = OUT_DATA;
 8000808:	2204      	movs	r2, #4
 800080a:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 800080e:	4631      	mov	r1, r6
 8000810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		}
	}
}
 8000812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8000816:	2000      	movs	r0, #0
 8000818:	4718      	bx	r3
}
 800081a:	bd70      	pop	{r4, r5, r6, pc}
		device.EP0_State = IN_STATUS;
 800081c:	2303      	movs	r3, #3
 800081e:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8000822:	f7ff fe5f 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	4632      	mov	r2, r6
 800082a:	4631      	mov	r1, r6
 800082c:	4630      	mov	r0, r6
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8000830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		device.Driver->EndpointWrite(0,0,0);
 8000834:	4718      	bx	r3
			device.EP0_State = IN_DATA;
 8000836:	2302      	movs	r3, #2
 8000838:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
}
 800083c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			USB_Device_ProcessControlRequest();
 8000840:	f7ff be50 	b.w	80004e4 <USB_Device_ProcessControlRequest>
 8000844:	20000520 	.word	0x20000520
 8000848:	20000aa8 	.word	0x20000aa8

0800084c <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 800084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000850:	b082      	sub	sp, #8
	int i;
	switch (event) {
 8000852:	2809      	cmp	r0, #9
 8000854:	d80b      	bhi.n	800086e <USBD_SignalDeviceEventHandler+0x22>
 8000856:	e8df f000 	tbb	[pc, r0]
 800085a:	360d      	.short	0x360d
 800085c:	0a4d4540 	.word	0x0a4d4540
 8000860:	050a9488 	.word	0x050a9488
		EVENT_USB_Device_Suspend();
		break;
	default:
		return;
	}
}
 8000864:	b002      	add	sp, #8
 8000866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		EVENT_USB_Device_StartOfFrame();
 800086a:	f7ff bdfd 	b.w	8000468 <EVENT_USB_Device_StartOfFrame>
}
 800086e:	b002      	add	sp, #8
 8000870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 memset(&device,0x0,sizeof(USB_Device_t));
 8000874:	4b48      	ldr	r3, [pc, #288]	; (8000998 <USBD_SignalDeviceEventHandler+0x14c>)
		 USB_DeviceState = DEVICE_STATE_Powered;
 8000876:	4849      	ldr	r0, [pc, #292]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
 8000878:	2401      	movs	r4, #1
 800087a:	7004      	strb	r4, [r0, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 800087c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 f9ac 	bl	8003be0 <memset>
		 device.Driver = &Driver_USBD0;
 8000888:	4945      	ldr	r1, [pc, #276]	; (80009a0 <USBD_SignalDeviceEventHandler+0x154>)
		 memset(&device,0x0,sizeof(USB_Device_t));
 800088a:	4603      	mov	r3, r0
		 device.Endpoints[0].InBufferLength = 256;
 800088c:	f44f 7280 	mov.w	r2, #256	; 0x100
		 device.Driver = &Driver_USBD0;
 8000890:	6019      	str	r1, [r3, #0]
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8000892:	69c9      	ldr	r1, [r1, #28]
 8000894:	9101      	str	r1, [sp, #4]
 8000896:	eddd 7a01 	vldr	s15, [sp, #4]
		 device.Endpoints[0].OutBufferLength = 256;
 800089a:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 800089c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
		 device.Endpoints[0].InBufferLength = 256;
 80008a0:	e9c3 0208 	strd	r0, r2, [r3, #32]
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80008a4:	f503 7110 	add.w	r1, r3, #576	; 0x240
		 device.Endpoints[0].IsConfigured = 1;
 80008a8:	f241 0003 	movw	r0, #4099	; 0x1003
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 80008ac:	6159      	str	r1, [r3, #20]
		 device.Endpoints[0].IsConfigured = 1;
 80008ae:	8118      	strh	r0, [r3, #8]
		 device.EP0_State = IDLE;
 80008b0:	f883 413b 	strb.w	r4, [r3, #315]	; 0x13b
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008b4:	2100      	movs	r1, #0
 80008b6:	ee17 3a90 	vmov	r3, s15
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	4608      	mov	r0, r1
}
 80008be:	b002      	add	sp, #8
 80008c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80008c4:	4718      	bx	r3
		 device.Driver->EndpointUnconfigure(0);
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <USBD_SignalDeviceEventHandler+0x14c>)
		 USB_DeviceState = DEVICE_STATE_Unattached;
 80008c8:	4a34      	ldr	r2, [pc, #208]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
		 device.Driver->EndpointUnconfigure(0);
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6a1b      	ldr	r3, [r3, #32]
		 USB_DeviceState = DEVICE_STATE_Unattached;
 80008ce:	2000      	movs	r0, #0
 80008d0:	7010      	strb	r0, [r2, #0]
}
 80008d2:	b002      	add	sp, #8
 80008d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		 device.Driver->EndpointUnconfigure(0);
 80008d8:	4718      	bx	r3
}
 80008da:	b002      	add	sp, #8
 80008dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		EVENT_USB_Device_Connect();
 80008e0:	f7ff bd82 	b.w	80003e8 <EVENT_USB_Device_Connect>
		USB_DeviceState = DEVICE_STATE_Powered;
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	b002      	add	sp, #8
 80008ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		EVENT_USB_Device_Disconnect();
 80008f0:	f7ff bd7c 	b.w	80003ec <EVENT_USB_Device_Disconnect>
		device.EP0_State = IDLE;
 80008f4:	4f28      	ldr	r7, [pc, #160]	; (8000998 <USBD_SignalDeviceEventHandler+0x14c>)
		USB_DeviceState = DEVICE_STATE_Default;
 80008f6:	4a29      	ldr	r2, [pc, #164]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
		device.RemoteWakeUp = 0;
 80008f8:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
		device.EP0_State = IDLE;
 80008fc:	2601      	movs	r6, #1
		USB_DeviceState = DEVICE_STATE_Default;
 80008fe:	2102      	movs	r1, #2
		device.RemoteWakeUp = 0;
 8000900:	f36f 0382 	bfc	r3, #2, #1
		USB_DeviceState = DEVICE_STATE_Default;
 8000904:	7011      	strb	r1, [r2, #0]
		device.EP0_State = IDLE;
 8000906:	f887 613b 	strb.w	r6, [r7, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 800090a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 800090e:	2500      	movs	r5, #0
			device.Endpoints[i].InInUse = 0;
 8000910:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8000914:	e001      	b.n	800091a <USBD_SignalDeviceEventHandler+0xce>
 8000916:	3501      	adds	r5, #1
 8000918:	3601      	adds	r6, #1
 800091a:	fb08 7405 	mla	r4, r8, r5, r7
 800091e:	8923      	ldrh	r3, [r4, #8]
 8000920:	f36f 1304 	bfc	r3, #4, #1
 8000924:	8123      	strh	r3, [r4, #8]
			device.Endpoints[i].OutInUse = 0;
 8000926:	8923      	ldrh	r3, [r4, #8]
 8000928:	f36f 03c3 	bfc	r3, #3, #1
 800092c:	8123      	strh	r3, [r4, #8]
			device.Endpoints[i].IsHalted = 0;
 800092e:	7a23      	ldrb	r3, [r4, #8]
 8000930:	f36f 0382 	bfc	r3, #2, #1
 8000934:	7223      	strb	r3, [r4, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0ed      	beq.n	8000916 <USBD_SignalDeviceEventHandler+0xca>
 800093a:	b2db      	uxtb	r3, r3
 800093c:	07db      	lsls	r3, r3, #31
 800093e:	d507      	bpl.n	8000950 <USBD_SignalDeviceEventHandler+0x104>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	7920      	ldrb	r0, [r4, #4]
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8000948:	7a23      	ldrb	r3, [r4, #8]
 800094a:	f023 0303 	bic.w	r3, r3, #3
 800094e:	7223      	strb	r3, [r4, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 8000950:	2e07      	cmp	r6, #7
 8000952:	d1e0      	bne.n	8000916 <USBD_SignalDeviceEventHandler+0xca>
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	7938      	ldrb	r0, [r7, #4]
			device.InterfaceSettings[i] = 0;
 8000958:	2200      	movs	r2, #0
 800095a:	f8a7 2138 	strh.w	r2, [r7, #312]	; 0x138
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000960:	2118      	movs	r1, #24
}
 8000962:	b002      	add	sp, #8
 8000964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8000968:	4718      	bx	r3
		device.PreSuspendDeviceState = USB_DeviceState;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
 800096c:	490a      	ldr	r1, [pc, #40]	; (8000998 <USBD_SignalDeviceEventHandler+0x14c>)
 800096e:	7818      	ldrb	r0, [r3, #0]
 8000970:	f881 013a 	strb.w	r0, [r1, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 8000974:	2205      	movs	r2, #5
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	b002      	add	sp, #8
 800097a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		EVENT_USB_Device_Suspend();
 800097e:	f7ff bd77 	b.w	8000470 <EVENT_USB_Device_Suspend>
		USB_DeviceState = device.PreSuspendDeviceState;
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <USBD_SignalDeviceEventHandler+0x14c>)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <USBD_SignalDeviceEventHandler+0x150>)
 8000986:	f892 213a 	ldrb.w	r2, [r2, #314]	; 0x13a
 800098a:	701a      	strb	r2, [r3, #0]
}
 800098c:	b002      	add	sp, #8
 800098e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		EVENT_USB_Device_WakeUp();
 8000992:	f7ff bd6b 	b.w	800046c <EVENT_USB_Device_WakeUp>
 8000996:	bf00      	nop
 8000998:	20000520 	.word	0x20000520
 800099c:	20000aa4 	.word	0x20000aa4
 80009a0:	08003eb8 	.word	0x08003eb8

080009a4 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 80009a6:	4c3a      	ldr	r4, [pc, #232]	; (8000a90 <USBD_SignalEndpointEvent_Handler+0xec>)
 80009a8:	f000 030f 	and.w	r3, r0, #15
	temp_dir = device.CurrentDirection;
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
	/* choose what to do based on the event */
	switch (ep_event) {
 80009ac:	2901      	cmp	r1, #1
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80009ae:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
	temp_num = device.CurrentEndpoint;
 80009b2:	f8b4 713c 	ldrh.w	r7, [r4, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80009b6:	f884 013d 	strb.w	r0, [r4, #317]	; 0x13d
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 80009ba:	461e      	mov	r6, r3
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80009bc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
	switch (ep_event) {
 80009c0:	d005      	beq.n	80009ce <USBD_SignalEndpointEvent_Handler+0x2a>
 80009c2:	2902      	cmp	r1, #2
 80009c4:	d02e      	beq.n	8000a24 <USBD_SignalEndpointEvent_Handler+0x80>
 80009c6:	b309      	cbz	r1, 8000a0c <USBD_SignalEndpointEvent_Handler+0x68>
		default:
			break;
		}
		break;
	}
	device.CurrentEndpoint = temp_num;
 80009c8:	f8a4 713c 	strh.w	r7, [r4, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
}
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ep->IsOutRecieved = 1;
 80009ce:	252c      	movs	r5, #44	; 0x2c
 80009d0:	fb05 4503 	mla	r5, r5, r3, r4
 80009d4:	892a      	ldrh	r2, [r5, #8]
 80009d6:	f042 0220 	orr.w	r2, r2, #32
 80009da:	812a      	strh	r2, [r5, #8]
		if (ep->OutBytesAvailable == 0) {
 80009dc:	68ea      	ldr	r2, [r5, #12]
 80009de:	b94a      	cbnz	r2, 80009f4 <USBD_SignalEndpointEvent_Handler+0x50>
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80009e0:	6823      	ldr	r3, [r4, #0]
			ep->OutOffset = 0; /* clear offset, new data is there */
 80009e2:	612a      	str	r2, [r5, #16]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	7928      	ldrb	r0, [r5, #4]
 80009e8:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
 80009ec:	4798      	blx	r3
		switch(device.CurrentEndpoint) {
 80009ee:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80009f2:	60e8      	str	r0, [r5, #12]
		ep->OutInUse = 0;
 80009f4:	222c      	movs	r2, #44	; 0x2c
 80009f6:	fb02 4606 	mla	r6, r2, r6, r4
 80009fa:	8932      	ldrh	r2, [r6, #8]
 80009fc:	f36f 02c3 	bfc	r2, #3, #1
 8000a00:	8132      	strh	r2, [r6, #8]
		switch(device.CurrentEndpoint) {
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e0      	bne.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
			USBD_HandleEP0_OUT();
 8000a06:	f7ff fec7 	bl	8000798 <USBD_HandleEP0_OUT>
			break;
 8000a0a:	e7dd      	b.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
		ep->OutInUse = 0;
 8000a0c:	222c      	movs	r2, #44	; 0x2c
 8000a0e:	fb02 4203 	mla	r2, r2, r3, r4
 8000a12:	8910      	ldrh	r0, [r2, #8]
 8000a14:	f361 00c3 	bfi	r0, r1, #3, #1
 8000a18:	8110      	strh	r0, [r2, #8]
		switch(device.CurrentEndpoint) {
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1d4      	bne.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
			USBD_HandleEP0_SETUP();
 8000a1e:	f7ff fedb 	bl	80007d8 <USBD_HandleEP0_SETUP>
			break;
 8000a22:	e7d1      	b.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
		if (ep->InDataLeft> 0) {
 8000a24:	222c      	movs	r2, #44	; 0x2c
 8000a26:	fb02 4503 	mla	r5, r2, r3, r4
 8000a2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a2c:	bb22      	cbnz	r2, 8000a78 <USBD_SignalEndpointEvent_Handler+0xd4>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 8000a2e:	7928      	ldrb	r0, [r5, #4]
 8000a30:	0702      	lsls	r2, r0, #28
 8000a32:	d113      	bne.n	8000a5c <USBD_SignalEndpointEvent_Handler+0xb8>
 8000a34:	69ea      	ldr	r2, [r5, #28]
 8000a36:	b18a      	cbz	r2, 8000a5c <USBD_SignalEndpointEvent_Handler+0xb8>
 8000a38:	4916      	ldr	r1, [pc, #88]	; (8000a94 <USBD_SignalEndpointEvent_Handler+0xf0>)
 8000a3a:	88c9      	ldrh	r1, [r1, #6]
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	d00d      	beq.n	8000a5c <USBD_SignalEndpointEvent_Handler+0xb8>
 8000a40:	8929      	ldrh	r1, [r5, #8]
 8000a42:	f3c1 1186 	ubfx	r1, r1, #6, #7
 8000a46:	fbb2 f5f1 	udiv	r5, r2, r1
 8000a4a:	fb01 2215 	mls	r2, r1, r5, r2
 8000a4e:	b92a      	cbnz	r2, 8000a5c <USBD_SignalEndpointEvent_Handler+0xb8>
			device.Driver->EndpointWrite(ep->Address,0,0);
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4611      	mov	r1, r2
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4798      	blx	r3
		switch(device.CurrentEndpoint) {
 8000a58:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		ep->InBytesAvailable = 0;
 8000a5c:	222c      	movs	r2, #44	; 0x2c
 8000a5e:	fb02 4606 	mla	r6, r2, r6, r4
 8000a62:	2100      	movs	r1, #0
		ep->InInUse = 0;
 8000a64:	8932      	ldrh	r2, [r6, #8]
		ep->InBytesAvailable = 0;
 8000a66:	61f1      	str	r1, [r6, #28]
		ep->InInUse = 0;
 8000a68:	f361 1204 	bfi	r2, r1, #4, #1
 8000a6c:	8132      	strh	r2, [r6, #8]
		switch(device.CurrentEndpoint) {
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1aa      	bne.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
			USBD_HandleEP0_IN();
 8000a72:	f7ff fe75 	bl	8000760 <USBD_HandleEP0_IN>
			break;
 8000a76:	e7a7      	b.n	80009c8 <USBD_SignalEndpointEvent_Handler+0x24>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	7928      	ldrb	r0, [r5, #4]
 8000a80:	4798      	blx	r3
			ep->InDataBuffer+= data_count;
 8000a82:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
			ep->InDataLeft -= data_count;
 8000a86:	1a12      	subs	r2, r2, r0
			ep->InDataBuffer+= data_count;
 8000a88:	4418      	add	r0, r3
 8000a8a:	e9c5 200a 	strd	r2, r0, [r5, #40]	; 0x28
}
 8000a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a90:	20000520 	.word	0x20000520
 8000a94:	20000aa8 	.word	0x20000aa8

08000a98 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8000a98:	b538      	push	{r3, r4, r5, lr}
	int32_t status = 0;
	memset(&device,0x0,sizeof(USB_Device_t));
 8000a9a:	4c16      	ldr	r4, [pc, #88]	; (8000af4 <USBD_Initialize+0x5c>)
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8000a9c:	4605      	mov	r5, r0
	memset(&device,0x0,sizeof(USB_Device_t));
 8000a9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f003 f89b 	bl	8003be0 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <USBD_Initialize+0x60>)
	device.Driver = &Driver_USBD0;
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <USBD_Initialize+0x64>)
 8000aae:	6022      	str	r2, [r4, #0]
	USB_DeviceState = DEVICE_STATE_Unattached;
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	7019      	strb	r1, [r3, #0]
	device.EP0_State = IDLE;
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8000aba:	f504 71a0 	add.w	r1, r4, #320	; 0x140
 8000abe:	6221      	str	r1, [r4, #32]
	device.Endpoints[0].InBufferLength = 256;
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000ac0:	f504 7110 	add.w	r1, r4, #576	; 0x240
	device.Endpoints[0].InBufferLength = 256;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8000ac8:	6161      	str	r1, [r4, #20]
	device.Endpoints[0].OutBufferLength = 256;
	device.Endpoints[0].Direction = 0;
	device.Endpoints[0].IsConfigured = 1;
 8000aca:	f241 0103 	movw	r1, #4099	; 0x1003
	device.Endpoints[0].IsEnabled = 1;
	device.Endpoints[0].MaxPacketSize = 64;

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 8000ace:	6852      	ldr	r2, [r2, #4]
	device.Endpoints[0].InBufferLength = 256;
 8000ad0:	6263      	str	r3, [r4, #36]	; 0x24
	device.Endpoints[0].OutBufferLength = 256;
 8000ad2:	61a3      	str	r3, [r4, #24]
	device.Endpoints[0].IsConfigured = 1;
 8000ad4:	8121      	strh	r1, [r4, #8]
	status = device.Driver->Initialize(usb_init);
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	4790      	blx	r2
	if (status != XMC_USBD_STATUS_OK)
 8000ada:	b938      	cbnz	r0, 8000aec <USBD_Initialize+0x54>
		return -1;

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	4605      	mov	r5, r0
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2240      	movs	r2, #64	; 0x40
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	4798      	blx	r3
	if (status != XMC_USBD_STATUS_OK) {
		device.Driver->Uninitialize();
		return -1;
	}

	return 0;
 8000ae8:	4628      	mov	r0, r5
}
 8000aea:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop
 8000af4:	20000520 	.word	0x20000520
 8000af8:	20000aa4 	.word	0x20000aa4
 8000afc:	08003eb8 	.word	0x08003eb8

08000b00 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8000b00:	b508      	push	{r3, lr}
	if (device.Driver->IsEnumDone())
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <USB_IsEnumDone+0x14>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b08:	4798      	blx	r3
		return 1;
	else
		return 0;
 }
 8000b0a:	3800      	subs	r0, #0
 8000b0c:	bf18      	it	ne
 8000b0e:	2001      	movne	r0, #1
 8000b10:	bd08      	pop	{r3, pc}
 8000b12:	bf00      	nop
 8000b14:	20000520 	.word	0x20000520

08000b18 <USBD_SetEndpointBuffer>:
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
	if (addr & ENDPOINT_DIR_MASK) {
		device.Endpoints[number].InBuffer = buf;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <USBD_SetEndpointBuffer+0x20>)
	if (addr & ENDPOINT_DIR_MASK) {
 8000b1a:	f010 0f80 	tst.w	r0, #128	; 0x80
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8000b1e:	f000 0c0f 	and.w	ip, r0, #15
		device.Endpoints[number].InBuffer = buf;
 8000b22:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000b26:	fb00 330c 	mla	r3, r0, ip, r3
		device.Endpoints[number].InBufferLength = len;
 8000b2a:	bf14      	ite	ne
 8000b2c:	e9c3 1208 	strdne	r1, r2, [r3, #32]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
 8000b30:	e9c3 1205 	strdeq	r1, r2, [r3, #20]
	}
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000520 	.word	0x20000520

08000b3c <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8000b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8000b40:	4d25      	ldr	r5, [pc, #148]	; (8000bd8 <XMC_USBD_lReadFifo+0x9c>)
 8000b42:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8000b46:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000b4a:	681b      	ldr	r3, [r3, #0]
  word_count = (byte_count >> 2U );
  temp_word_count = (word_count << 2U);
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8000b4c:	041b      	lsls	r3, r3, #16
 8000b4e:	d401      	bmi.n	8000b54 <XMC_USBD_lReadFifo+0x18>

    /* save the amount of data */
    ep->xferCount += byte_count;
    ep->xferBuffer += byte_count;
  }
}
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ep->xferBuffer == NULL)
 8000b54:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8000b58:	fb0e 5e00 	mla	lr, lr, r0, r5
 8000b5c:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000b60:	2a00      	cmp	r2, #0
 8000b62:	d0f5      	beq.n	8000b50 <XMC_USBD_lReadFifo+0x14>
    for (i = 0U;i < word_count; i++)
 8000b64:	ea5f 0891 	movs.w	r8, r1, lsr #2
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8000b68:	f8d5 61e0 	ldr.w	r6, [r5, #480]	; 0x1e0
    for (i = 0U;i < word_count; i++)
 8000b6c:	d00a      	beq.n	8000b84 <XMC_USBD_lReadFifo+0x48>
 8000b6e:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8000b72:	2300      	movs	r3, #0
 8000b74:	e001      	b.n	8000b7a <XMC_USBD_lReadFifo+0x3e>
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8000b76:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 8000b7a:	6834      	ldr	r4, [r6, #0]
 8000b7c:	50d4      	str	r4, [r2, r3]
    for (i = 0U;i < word_count; i++)
 8000b7e:	3304      	adds	r3, #4
 8000b80:	459c      	cmp	ip, r3
 8000b82:	d1f8      	bne.n	8000b76 <XMC_USBD_lReadFifo+0x3a>
  temp_word_count = (word_count << 2U);
 8000b84:	f021 0303 	bic.w	r3, r1, #3
    if (byte_count!=temp_word_count)
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d019      	beq.n	8000bc0 <XMC_USBD_lReadFifo+0x84>
      temp_data = *fifo;
 8000b8c:	6837      	ldr	r7, [r6, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8000b8e:	d917      	bls.n	8000bc0 <XMC_USBD_lReadFifo+0x84>
 8000b90:	1ace      	subs	r6, r1, r3
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8000b92:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8000b96:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8000b9a:	00f6      	lsls	r6, r6, #3
 8000b9c:	fb0e 5e00 	mla	lr, lr, r0, r5
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8000ba6:	fa08 f302 	lsl.w	r3, r8, r2
 8000baa:	403b      	ands	r3, r7
 8000bac:	40d3      	lsrs	r3, r2
 8000bae:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	42b2      	cmp	r2, r6
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8000bb6:	f804 300c 	strb.w	r3, [r4, ip]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8000bba:	f10c 0c01 	add.w	ip, ip, #1
 8000bbe:	d1f2      	bne.n	8000ba6 <XMC_USBD_lReadFifo+0x6a>
    ep->xferCount += byte_count;
 8000bc0:	2334      	movs	r3, #52	; 0x34
 8000bc2:	fb03 5000 	mla	r0, r3, r0, r5
 8000bc6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8000bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ep->xferCount += byte_count;
 8000bca:	440a      	add	r2, r1
    ep->xferBuffer += byte_count;
 8000bcc:	4419      	add	r1, r3
    ep->xferCount += byte_count;
 8000bce:	62c2      	str	r2, [r0, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8000bd0:	6241      	str	r1, [r0, #36]	; 0x24
}
 8000bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000860 	.word	0x20000860

08000bdc <XMC_USBD_lStartReadXfer>:
{
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000bdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000bde:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000be0:	6881      	ldr	r1, [r0, #8]
{
 8000be2:	b410      	push	{r4}
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8000be4:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000be8:	1a9c      	subs	r4, r3, r2
 8000bea:	428c      	cmp	r4, r1
  {
    ep->xferLength += ep->maxTransferSize;
 8000bec:	bf88      	it	hi
 8000bee:	1852      	addhi	r2, r2, r1
  }
  else
  {
    ep->xferLength = ep->xferTotal;
  }
  if (ep->address_u.address_st.number == 0U)
 8000bf0:	7801      	ldrb	r1, [r0, #0]
    ep->xferLength = ep->xferTotal;
 8000bf2:	bf98      	it	ls
 8000bf4:	461a      	movls	r2, r3
  if (ep->address_u.address_st.number == 0U)
 8000bf6:	070c      	lsls	r4, r1, #28
 8000bf8:	6282      	str	r2, [r0, #40]	; 0x28
 8000bfa:	d11c      	bne.n	8000c36 <XMC_USBD_lStartReadXfer+0x5a>
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
    ep0_data->b.pktcnt = 0x1U;
    ep0_data->b.supcnt = 0x3U;
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8000bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <XMC_USBD_lStartReadXfer+0x90>)
 8000c0a:	f8d2 4208 	ldr.w	r4, [r2, #520]	; 0x208
 8000c0e:	7b64      	ldrb	r4, [r4, #13]
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8000c10:	f001 010f 	and.w	r1, r1, #15
 8000c14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000c18:	b18c      	cbz	r4, 8000c3e <XMC_USBD_lStartReadXfer+0x62>
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8000c1a:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8000c1e:	6113      	str	r3, [r2, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000c20:	6813      	ldr	r3, [r2, #0]
  epctl.b.cnak = 1U;
  epctl.b.epena = 1U;
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
}
 8000c22:	f85d 4b04 	ldr.w	r4, [sp], #4
  epctl.b.cnak = 1U;
 8000c26:	f3c3 6107 	ubfx	r1, r3, #24, #8
 8000c2a:	f061 017b 	orn	r1, r1, #123	; 0x7b
 8000c2e:	f361 631f 	bfi	r3, r1, #24, #8
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	4770      	bx	lr
    if (ep->xferLength == 0U)
 8000c36:	b93a      	cbnz	r2, 8000c48 <XMC_USBD_lStartReadXfer+0x6c>
 8000c38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c3c:	e7e4      	b.n	8000c08 <XMC_USBD_lStartReadXfer+0x2c>
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8000c3e:	f8d2 21c4 	ldr.w	r2, [r2, #452]	; 0x1c4
 8000c42:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000c44:	6151      	str	r1, [r2, #20]
 8000c46:	e7ea      	b.n	8000c1e <XMC_USBD_lStartReadXfer+0x42>
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8000c48:	6844      	ldr	r4, [r0, #4]
 8000c4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c4c:	f3c4 2cc6 	ubfx	ip, r4, #11, #7
 8000c50:	1ad2      	subs	r2, r2, r3
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <XMC_USBD_lStartReadXfer+0x94>)
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8000c54:	f10c 34ff 	add.w	r4, ip, #4294967295	; 0xffffffff
 8000c58:	4414      	add	r4, r2
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000c5a:	f3c2 0212 	ubfx	r2, r2, #0, #19
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8000c5e:	fbb4 f4fc 	udiv	r4, r4, ip
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000c62:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
 8000c66:	4313      	orrs	r3, r2
 8000c68:	e7ce      	b.n	8000c08 <XMC_USBD_lStartReadXfer+0x2c>
 8000c6a:	bf00      	nop
 8000c6c:	20000860 	.word	0x20000860
 8000c70:	1ff80000 	.word	0x1ff80000

08000c74 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c76:	f890 e000 	ldrb.w	lr, [r0]
 8000c7a:	4d27      	ldr	r5, [pc, #156]	; (8000d18 <XMC_USBD_lStartWriteXfer+0xa4>)

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c7c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8000c7e:	6882      	ldr	r2, [r0, #8]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c80:	f00e 0c0f 	and.w	ip, lr, #15
 8000c84:	f10c 036a 	add.w	r3, ip, #106	; 0x6a
  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c88:	f3c2 0212 	ubfx	r2, r2, #0, #19
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c8c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c90:	6b03      	ldr	r3, [r0, #48]	; 0x30
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000c92:	680c      	ldr	r4, [r1, #0]
  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8000c94:	1b9f      	subs	r7, r3, r6
 8000c96:	4297      	cmp	r7, r2
  {
    ep->xferLength = ep->xferTotal;
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8000c98:	bf28      	it	cs
 8000c9a:	18b3      	addcs	r3, r6, r2
 8000c9c:	6283      	str	r3, [r0, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8000c9e:	b1d3      	cbz	r3, 8000cd6 <XMC_USBD_lStartWriteXfer+0x62>
    size.b.xfersize = 0U;
    size.b.pktcnt = 1U;
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8000ca0:	f01e 0f0f 	tst.w	lr, #15
 8000ca4:	d022      	beq.n	8000cec <XMC_USBD_lStartWriteXfer+0x78>
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000ca6:	6846      	ldr	r6, [r0, #4]
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000ca8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000caa:	f3c6 27c6 	ubfx	r7, r6, #11, #7
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	1e7e      	subs	r6, r7, #1
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <XMC_USBD_lStartWriteXfer+0xa8>)
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000cb4:	b2b6      	uxth	r6, r6
 8000cb6:	fa16 f683 	uxtah	r6, r6, r3
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8000cbe:	fbb6 f6f7 	udiv	r6, r6, r7
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8000cc2:	ea02 42c6 	and.w	r2, r2, r6, lsl #19
 8000cc6:	4313      	orrs	r3, r2
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000cc8:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8000ccc:	7b52      	ldrb	r2, [r2, #13]
 8000cce:	b9c2      	cbnz	r2, 8000d02 <XMC_USBD_lStartWriteXfer+0x8e>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8000cd0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000cd2:	614a      	str	r2, [r1, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000cd4:	e001      	b.n	8000cda <XMC_USBD_lStartWriteXfer+0x66>
 8000cd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
  ctl.b.epena = 1U;
  ctl.b.cnak = 1U;
 8000cda:	f3c4 6207 	ubfx	r2, r4, #24, #8
 8000cde:	f062 027b 	orn	r2, r2, #123	; 0x7b
 8000ce2:	f362 641f 	bfi	r4, r2, #24, #8
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8000ce6:	610b      	str	r3, [r1, #16]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8000ce8:	600c      	str	r4, [r1, #0]
}
 8000cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8000cec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000cee:	1a9b      	subs	r3, r3, r2
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000cf0:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8000cf4:	7b52      	ldrb	r2, [r2, #13]
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8000cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d0e6      	beq.n	8000cd0 <XMC_USBD_lStartWriteXfer+0x5c>
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000d02:	2a01      	cmp	r2, #1
 8000d04:	d1e9      	bne.n	8000cda <XMC_USBD_lStartWriteXfer+0x66>
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000d06:	f8d5 01a4 	ldr.w	r0, [r5, #420]	; 0x1a4
 8000d0a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8000d0c:	fa02 f20c 	lsl.w	r2, r2, ip
 8000d10:	432a      	orrs	r2, r5
 8000d12:	6342      	str	r2, [r0, #52]	; 0x34
 8000d14:	e7e1      	b.n	8000cda <XMC_USBD_lStartWriteXfer+0x66>
 8000d16:	bf00      	nop
 8000d18:	20000860 	.word	0x20000860
 8000d1c:	1ff80000 	.word	0x1ff80000

08000d20 <XMC_USBD_GetCapabilities>:
  cap.event_reset = 1U;
  cap.event_resume = 1U;
  cap.event_suspend = 1U;
  cap.reserved = 0U;
  return cap;
}
 8000d20:	f240 10df 	movw	r0, #479	; 0x1df
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <XMC_USBD_DeviceConnect>:
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <XMC_USBD_DeviceConnect+0x14>)
 8000d2a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d2e:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 0U;
 8000d30:	f36f 0341 	bfc	r3, #1, #1
  xmc_device.device_register->dctl = dctl.d32;
  return XMC_USBD_STATUS_OK;
}
 8000d34:	2000      	movs	r0, #0
  xmc_device.device_register->dctl = dctl.d32;
 8000d36:	6053      	str	r3, [r2, #4]
}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000860 	.word	0x20000860

08000d40 <XMC_USBD_DeviceDisconnect>:
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <XMC_USBD_DeviceDisconnect+0x14>)
 8000d42:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8000d46:	6853      	ldr	r3, [r2, #4]
  dctl.b.sftdiscon = 1U;
 8000d48:	f043 0302 	orr.w	r3, r3, #2
  xmc_device.device_register->dctl = dctl.d32;
  return XMC_USBD_STATUS_OK;
}
 8000d4c:	2000      	movs	r0, #0
  xmc_device.device_register->dctl = dctl.d32;
 8000d4e:	6053      	str	r3, [r2, #4]
}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000860 	.word	0x20000860

08000d58 <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8000d5a:	4d12      	ldr	r5, [pc, #72]	; (8000da4 <XMC_USBD_EndpointReadStart+0x4c>)
 8000d5c:	f000 020f 	and.w	r2, r0, #15
 8000d60:	2334      	movs	r3, #52	; 0x34
 8000d62:	fb03 5302 	mla	r3, r3, r2, r5
 8000d66:	6858      	ldr	r0, [r3, #4]
 8000d68:	f3c0 1400 	ubfx	r4, r0, #4, #1
 8000d6c:	06c0      	lsls	r0, r0, #27
 8000d6e:	d402      	bmi.n	8000d76 <XMC_USBD_EndpointReadStart+0x1e>
 8000d70:	7918      	ldrb	r0, [r3, #4]
 8000d72:	0740      	lsls	r0, r0, #29
 8000d74:	d401      	bmi.n	8000d7a <XMC_USBD_EndpointReadStart+0x22>
  {
    result = XMC_USBD_STATUS_ERROR;
 8000d76:	2001      	movs	r0, #1
    ep->outBytesAvailable = 0U;
    XMC_USBD_lStartReadXfer(ep);
    result= XMC_USBD_STATUS_OK;
  }
  return result;
}
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
    ep->xferTotal = size;
 8000d7a:	6958      	ldr	r0, [r3, #20]
    ep->outBytesAvailable = 0U;
 8000d7c:	611c      	str	r4, [r3, #16]
    ep->xferTotal = size;
 8000d7e:	4281      	cmp	r1, r0
 8000d80:	bf28      	it	cs
 8000d82:	4601      	movcs	r1, r0
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8000d84:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    ep->xferTotal = size;
 8000d88:	6319      	str	r1, [r3, #48]	; 0x30
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8000d8a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    ep->xferBuffer = ep->outBuffer;
 8000d8e:	68d9      	ldr	r1, [r3, #12]
 8000d90:	6259      	str	r1, [r3, #36]	; 0x24
    XMC_USBD_lStartReadXfer(ep);
 8000d92:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    ep->xferLength = 0U;
 8000d96:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
    XMC_USBD_lStartReadXfer(ep);
 8000d9a:	f7ff ff1f 	bl	8000bdc <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8000d9e:	4620      	mov	r0, r4
}
 8000da0:	bd38      	pop	{r3, r4, r5, pc}
 8000da2:	bf00      	nop
 8000da4:	20000860 	.word	0x20000860

08000da8 <XMC_USBD_DeviceSetAddress>:
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <XMC_USBD_DeviceSetAddress+0x14>)
 8000daa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000dae:	681a      	ldr	r2, [r3, #0]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8000db0:	b911      	cbnz	r1, 8000db8 <XMC_USBD_DeviceSetAddress+0x10>
  {
    data.b.devaddr = address;
 8000db2:	f360 120a 	bfi	r2, r0, #4, #7
    xmc_device.device_register->dcfg = data.d32;
 8000db6:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
}
 8000db8:	2000      	movs	r0, #0
 8000dba:	4770      	bx	lr
 8000dbc:	20000860 	.word	0x20000860

08000dc0 <XMC_USBD_EndpointStall>:
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8000dc0:	f000 0c0f 	and.w	ip, r0, #15
  if (stall)
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000dc4:	2234      	movs	r2, #52	; 0x34
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <XMC_USBD_EndpointStall+0x78>)
 8000dc8:	fb02 f20c 	mul.w	r2, r2, ip
 8000dcc:	5c9a      	ldrb	r2, [r3, r2]
 8000dce:	f002 020f 	and.w	r2, r2, #15
  if (stall)
 8000dd2:	b1a9      	cbz	r1, 8000e00 <XMC_USBD_EndpointStall+0x40>
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000dd4:	0600      	lsls	r0, r0, #24
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000dd6:	bf55      	itete	pl
 8000dd8:	eb03 0282 	addpl.w	r2, r3, r2, lsl #2
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000ddc:	326a      	addmi	r2, #106	; 0x6a
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000dde:	f8d2 11c4 	ldrpl.w	r1, [r2, #452]	; 0x1c4
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000de2:	f853 1022 	ldrmi.w	r1, [r3, r2, lsl #2]
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000de6:	680a      	ldr	r2, [r1, #0]
      data.b.stall = 1U;
 8000de8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000dec:	600a      	str	r2, [r1, #0]
    }
    ep->isStalled = 1U;
 8000dee:	2234      	movs	r2, #52	; 0x34
 8000df0:	fb02 330c 	mla	r3, r2, ip, r3
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
		}
		ep->isStalled = 0U;
	}
	return XMC_USBD_STATUS_OK;
}
 8000df4:	2000      	movs	r0, #0
    ep->isStalled = 1U;
 8000df6:	791a      	ldrb	r2, [r3, #4]
 8000df8:	f042 0220 	orr.w	r2, r2, #32
 8000dfc:	711a      	strb	r2, [r3, #4]
}
 8000dfe:	4770      	bx	lr
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8000e00:	0601      	lsls	r1, r0, #24
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e02:	bf55      	itete	pl
 8000e04:	eb03 0282 	addpl.w	r2, r3, r2, lsl #2
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e08:	326a      	addmi	r2, #106	; 0x6a
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e0a:	f8d2 01c4 	ldrpl.w	r0, [r2, #452]	; 0x1c4
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8000e0e:	f853 0022 	ldrmi.w	r0, [r3, r2, lsl #2]
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8000e12:	6802      	ldr	r2, [r0, #0]
			data.b.stall = 0U;
 8000e14:	f3c2 410f 	ubfx	r1, r2, #16, #16
 8000e18:	f421 5181 	bic.w	r1, r1, #4128	; 0x1020
 8000e1c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000e20:	f361 421f 	bfi	r2, r1, #16, #16
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000e24:	6002      	str	r2, [r0, #0]
		ep->isStalled = 0U;
 8000e26:	2234      	movs	r2, #52	; 0x34
 8000e28:	fb02 330c 	mla	r3, r2, ip, r3
}
 8000e2c:	2000      	movs	r0, #0
		ep->isStalled = 0U;
 8000e2e:	791a      	ldrb	r2, [r3, #4]
 8000e30:	f36f 1245 	bfc	r2, #5, #1
 8000e34:	711a      	strb	r2, [r3, #4]
}
 8000e36:	4770      	bx	lr
 8000e38:	20000860 	.word	0x20000860

08000e3c <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000e3c:	f000 000f 	and.w	r0, r0, #15
  if (ep->address_u.address_st.direction)
 8000e40:	2234      	movs	r2, #52	; 0x34
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <XMC_USBD_EndpointAbort+0x3c>)
 8000e44:	fb00 f202 	mul.w	r2, r0, r2
 8000e48:	1899      	adds	r1, r3, r2
 8000e4a:	569a      	ldrsb	r2, [r3, r2]
 8000e4c:	2a00      	cmp	r2, #0
  {
    ep->inInUse = 0U;
 8000e4e:	684a      	ldr	r2, [r1, #4]
 8000e50:	bfb4      	ite	lt
 8000e52:	f36f 02c3 	bfclt	r2, #3, #1
  }
  if (!ep->address_u.address_st.direction)
  {
    ep->outInUse = 0U;
 8000e56:	f36f 1204 	bfcge	r2, #4, #1
 8000e5a:	604a      	str	r2, [r1, #4]
  }
  ep->isStalled = 0U;
 8000e5c:	2234      	movs	r2, #52	; 0x34
 8000e5e:	fb02 3300 	mla	r3, r2, r0, r3
  ep->outBytesAvailable = 0U;
 8000e62:	2000      	movs	r0, #0
  ep->isStalled = 0U;
 8000e64:	791a      	ldrb	r2, [r3, #4]
  ep->outBytesAvailable = 0U;
 8000e66:	6118      	str	r0, [r3, #16]
  ep->isStalled = 0U;
 8000e68:	f36f 1245 	bfc	r2, #5, #1
  ep->outOffset = 0U;
  ep->xferLength = 0U;
  ep->xferCount = 0U;
 8000e6c:	e9c3 000a 	strd	r0, r0, [r3, #40]	; 0x28
  ep->isStalled = 0U;
 8000e70:	711a      	strb	r2, [r3, #4]
  ep->outOffset = 0U;
 8000e72:	6198      	str	r0, [r3, #24]
  ep->xferTotal = 0U;
 8000e74:	6318      	str	r0, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
}
 8000e76:	4770      	bx	lr
 8000e78:	20000860 	.word	0x20000860

08000e7c <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <XMC_USBD_EndpointUnconfigure+0xe8>)
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000e80:	f000 000f 	and.w	r0, r0, #15
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
  /* if not configured return an error */
  if (!ep->isConfigured)
 8000e84:	2134      	movs	r1, #52	; 0x34
 8000e86:	fb00 f101 	mul.w	r1, r0, r1
 8000e8a:	185a      	adds	r2, r3, r1
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000e8c:	f8d3 41a4 	ldr.w	r4, [r3, #420]	; 0x1a4
  if (!ep->isConfigured)
 8000e90:	f892 c004 	ldrb.w	ip, [r2, #4]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000e94:	69e6      	ldr	r6, [r4, #28]
  if (!ep->isConfigured)
 8000e96:	f01c 0f04 	tst.w	ip, #4
 8000e9a:	d048      	beq.n	8000f2e <XMC_USBD_EndpointUnconfigure+0xb2>
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000e9c:	5c5f      	ldrb	r7, [r3, r1]
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
    data.b.epdis =  1U;
    data.b.snak =  1U;
    data.b.stall =  0U;
    ep->isConfigured =  0U;
 8000e9e:	f02c 0c24 	bic.w	ip, ip, #36	; 0x24
 8000ea2:	f882 c004 	strb.w	ip, [r2, #4]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ea6:	f007 0c0f 	and.w	ip, r7, #15
    ep->isStalled =  0U;
    ep->outInUse =  0U;
 8000eaa:	6857      	ldr	r7, [r2, #4]
 8000eac:	f36f 1704 	bfc	r7, #4, #1
 8000eb0:	6057      	str	r7, [r2, #4]
    ep->inInUse =  0U;
 8000eb2:	6857      	ldr	r7, [r2, #4]
 8000eb4:	f36f 07c3 	bfc	r7, #3, #1
 8000eb8:	6057      	str	r7, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000eba:	565f      	ldrsb	r7, [r3, r1]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ebc:	2101      	movs	r1, #1
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000ebe:	2f00      	cmp	r7, #0
 8000ec0:	4635      	mov	r5, r6
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8000ec2:	fa01 f10c 	lsl.w	r1, r1, ip
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000ec6:	db34      	blt.n	8000f32 <XMC_USBD_EndpointUnconfigure+0xb6>
 8000ec8:	7912      	ldrb	r2, [r2, #4]
 8000eca:	0792      	lsls	r2, r2, #30
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000ecc:	ea6f 0101 	mvn.w	r1, r1
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000ed0:	d141      	bne.n	8000f56 <XMC_USBD_EndpointUnconfigure+0xda>
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000ed2:	f10c 026a 	add.w	r2, ip, #106	; 0x6a
 8000ed6:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 8000eda:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000ede:	b28a      	uxth	r2, r1
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000ee0:	f8c7 e000 	str.w	lr, [r7]
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000ee4:	ea02 0706 	and.w	r7, r2, r6
 8000ee8:	f367 050f 	bfi	r5, r7, #0, #16
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000eec:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8000ef0:	ea02 4216 	and.w	r2, r2, r6, lsr #16
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000ef4:	f8dc 61c4 	ldr.w	r6, [ip, #452]	; 0x1c4
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 8000ef8:	f362 451f 	bfi	r5, r2, #16, #16
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000efc:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8000f04:	6037      	str	r7, [r6, #0]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8000f06:	7b52      	ldrb	r2, [r2, #13]
 8000f08:	2a01      	cmp	r2, #1
 8000f0a:	d026      	beq.n	8000f5a <XMC_USBD_EndpointUnconfigure+0xde>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8000f0c:	2234      	movs	r2, #52	; 0x34
 8000f0e:	fb02 3000 	mla	r0, r2, r0, r3
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8000f12:	61e5      	str	r5, [r4, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8000f14:	8881      	ldrh	r1, [r0, #4]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 8000f16:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8000f1a:	f3c1 1083 	ubfx	r0, r1, #6, #4
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4081      	lsls	r1, r0
 8000f22:	ea22 0201 	bic.w	r2, r2, r1
 8000f26:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result = XMC_USBD_STATUS_OK;
 8000f2a:	2000      	movs	r0, #0
  }
  return result;
}
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     result = XMC_USBD_STATUS_ERROR;
 8000f2e:	2001      	movs	r0, #1
}
 8000f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8000f32:	f10c 076a 	add.w	r7, ip, #106	; 0x6a
 8000f36:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
 8000f3a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8000f3e:	f8c7 e000 	str.w	lr, [r7]
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f42:	7917      	ldrb	r7, [r2, #4]
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000f44:	43c9      	mvns	r1, r1
 8000f46:	b28a      	uxth	r2, r1
 8000f48:	ea02 0e06 	and.w	lr, r2, r6
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f4c:	07bf      	lsls	r7, r7, #30
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000f4e:	f36e 050f 	bfi	r5, lr, #0, #16
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8000f52:	d0cb      	beq.n	8000eec <XMC_USBD_EndpointUnconfigure+0x70>
 8000f54:	e7da      	b.n	8000f0c <XMC_USBD_EndpointUnconfigure+0x90>
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 8000f56:	b28a      	uxth	r2, r1
 8000f58:	e7c8      	b.n	8000eec <XMC_USBD_EndpointUnconfigure+0x70>
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8000f5a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f5c:	4011      	ands	r1, r2
 8000f5e:	6361      	str	r1, [r4, #52]	; 0x34
 8000f60:	e7d4      	b.n	8000f0c <XMC_USBD_EndpointUnconfigure+0x90>
 8000f62:	bf00      	nop
 8000f64:	20000860 	.word	0x20000860

08000f68 <XMC_USBD_GetFrameNumber>:
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <XMC_USBD_GetFrameNumber+0x10>)
 8000f6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000f6e:	6898      	ldr	r0, [r3, #8]
  result = (uint16_t)dsts.b.soffn;
  return result;
}
 8000f70:	f3c0 200d 	ubfx	r0, r0, #8, #14
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000860 	.word	0x20000860

08000f7c <XMC_USBD_IsEnumDone>:
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <XMC_USBD_IsEnumDone+0x18>)
 8000f7e:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
 8000f82:	f000 0005 	and.w	r0, r0, #5
}
 8000f86:	f1a0 0005 	sub.w	r0, r0, #5
 8000f8a:	fab0 f080 	clz	r0, r0
 8000f8e:	0940      	lsrs	r0, r0, #5
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000860 	.word	0x20000860

08000f98 <XMC_USBD_Uninitialize>:
	dctl.d32 = xmc_device.device_register->dctl;
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <XMC_USBD_Uninitialize+0x20>)
{
 8000f9a:	b510      	push	{r4, lr}
	dctl.d32 = xmc_device.device_register->dctl;
 8000f9c:	f8d0 41a4 	ldr.w	r4, [r0, #420]	; 0x1a4
 8000fa0:	6863      	ldr	r3, [r4, #4]
  dctl.b.sftdiscon = 1U;
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8000fa6:	f44f 7202 	mov.w	r2, #520	; 0x208
 8000faa:	2100      	movs	r1, #0
  xmc_device.device_register->dctl = dctl.d32;
 8000fac:	6063      	str	r3, [r4, #4]
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8000fae:	f002 fe17 	bl	8003be0 <memset>
}
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	bd10      	pop	{r4, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000860 	.word	0x20000860

08000fbc <XMC_USBD_EndpointConfigure>:
{
 8000fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fc0:	4c9b      	ldr	r4, [pc, #620]	; (8001230 <XMC_USBD_EndpointConfigure+0x274>)
 8000fc2:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
{
 8000fc6:	4681      	mov	r9, r0
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000fc8:	f000 000f 	and.w	r0, r0, #15
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8000fcc:	69df      	ldr	r7, [r3, #28]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8000fce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000fd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8000fd6:	f04f 0a34 	mov.w	sl, #52	; 0x34
{
 8000fda:	4615      	mov	r5, r2
 8000fdc:	460e      	mov	r6, r1
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8000fde:	4652      	mov	r2, sl
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000fe6:	f009 080f 	and.w	r8, r9, #15
 8000fea:	f002 fdf9 	bl	8003be0 <memset>
  ep->address_u.address = ep_addr;
 8000fee:	fb0a fc08 	mul.w	ip, sl, r8
 8000ff2:	eb04 010c 	add.w	r1, r4, ip
 8000ff6:	f804 900c 	strb.w	r9, [r4, ip]
  ep->isConfigured = 1U;
 8000ffa:	6848      	ldr	r0, [r1, #4]
 8000ffc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8001000:	02db      	lsls	r3, r3, #11
 8001002:	f420 307e 	bic.w	r0, r0, #260096	; 0x3f800
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	f020 0004 	bic.w	r0, r0, #4
 800100e:	4303      	orrs	r3, r0
 8001010:	604b      	str	r3, [r1, #4]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8001012:	463a      	mov	r2, r7
  if (ep->address_u.address != 0U)
 8001014:	f1b9 0f00 	cmp.w	r9, #0
 8001018:	d07d      	beq.n	8001116 <XMC_USBD_EndpointConfigure+0x15a>
 800101a:	688b      	ldr	r3, [r1, #8]
 800101c:	f64f 7ec0 	movw	lr, #65472	; 0xffc0
 8001020:	f36e 0312 	bfi	r3, lr, #0, #19
 8001024:	608b      	str	r3, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001026:	f814 c00c 	ldrb.w	ip, [r4, ip]
 800102a:	4b82      	ldr	r3, [pc, #520]	; (8001234 <XMC_USBD_EndpointConfigure+0x278>)
 800102c:	f00c 0c0f 	and.w	ip, ip, #15
 8001030:	fa4f f089 	sxtb.w	r0, r9
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001034:	eb04 0e8c 	add.w	lr, r4, ip, lsl #2
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001038:	f503 69e0 	add.w	r9, r3, #1792	; 0x700
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 800103c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8001040:	61cb      	str	r3, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001042:	eb09 230c 	add.w	r3, r9, ip, lsl #8
 8001046:	60cb      	str	r3, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001048:	f8de 320c 	ldr.w	r3, [lr, #524]	; 0x20c
 800104c:	620b      	str	r3, [r1, #32]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800104e:	2800      	cmp	r0, #0
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001050:	f8de 3228 	ldr.w	r3, [lr, #552]	; 0x228
 8001054:	614b      	str	r3, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8001056:	da7a      	bge.n	800114e <XMC_USBD_EndpointConfigure+0x192>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001058:	f10c 036a 	add.w	r3, ip, #106	; 0x6a
 800105c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		data.b.usbactep = 1U;
 8001060:	f006 0303 	and.w	r3, r6, #3
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001064:	f8d9 e000 	ldr.w	lr, [r9]
		data.b.usbactep = 1U;
 8001068:	049b      	lsls	r3, r3, #18
 800106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106e:	f42e 2e48 	bic.w	lr, lr, #819200	; 0xc8000
 8001072:	ea43 0e0e 	orr.w	lr, r3, lr
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001076:	2e00      	cmp	r6, #0
 8001078:	d074      	beq.n	8001164 <XMC_USBD_EndpointConfigure+0x1a8>
			data.b.mps = ep_max_packet_size;
 800107a:	f365 0e0a 	bfi	lr, r5, #0, #11
		data.b.stall = 0U;
 800107e:	f3ce 430f 	ubfx	r3, lr, #16, #16
 8001082:	f423 5381 	bic.w	r3, r3, #4128	; 0x1020
 8001086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800108a:	f8b4 a1fc 	ldrh.w	sl, [r4, #508]	; 0x1fc
		data.b.stall = 0U;
 800108e:	f363 4e1f 	bfi	lr, r3, #16, #16
  uint16_t mask = 1U;
 8001092:	2101      	movs	r1, #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 8001094:	2300      	movs	r3, #0
 8001096:	ea1a 0f01 	tst.w	sl, r1
    mask = (uint16_t)(mask << 1U);
 800109a:	ea4f 0b41 	mov.w	fp, r1, lsl #1
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800109e:	f000 809d 	beq.w	80011dc <XMC_USBD_EndpointConfigure+0x220>
 80010a2:	3301      	adds	r3, #1
 80010a4:	2b07      	cmp	r3, #7
    mask = (uint16_t)(mask << 1U);
 80010a6:	fa1f f18b 	uxth.w	r1, fp
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80010aa:	d1f4      	bne.n	8001096 <XMC_USBD_EndpointConfigure+0xda>
  if ((xmc_device.txfifomsk & mask) == 0U)
 80010ac:	ea11 0f0a 	tst.w	r1, sl
 80010b0:	f000 8096 	beq.w	80011e0 <XMC_USBD_EndpointConfigure+0x224>
 80010b4:	2300      	movs	r3, #0
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80010b6:	2134      	movs	r1, #52	; 0x34
 80010b8:	fb01 4808 	mla	r8, r1, r8, r4
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80010bc:	2101      	movs	r1, #1
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80010be:	f8b8 a004 	ldrh.w	sl, [r8, #4]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80010c2:	fa01 f10c 	lsl.w	r1, r1, ip
 80010c6:	b289      	uxth	r1, r1
		data.b.txfnum = ep->txFifoNum;
 80010c8:	f363 5e99 	bfi	lr, r3, #22, #4
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80010cc:	f363 1a89 	bfi	sl, r3, #6, #4
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010d0:	2800      	cmp	r0, #0
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80010d2:	ea41 0307 	orr.w	r3, r1, r7
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80010d6:	f8a8 a004 	strh.w	sl, [r8, #4]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80010da:	f363 020f 	bfi	r2, r3, #0, #16
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 80010de:	f8c9 e000 	str.w	lr, [r9]
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80010e2:	f280 8082 	bge.w	80011ea <XMC_USBD_EndpointConfigure+0x22e>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d167      	bne.n	80011ba <XMC_USBD_EndpointConfigure+0x1fe>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80010ea:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80010ee:	f8dc 01c4 	ldr.w	r0, [ip, #452]	; 0x1c4
 80010f2:	6803      	ldr	r3, [r0, #0]
		data.b.usbactep = 1U;
 80010f4:	f423 2348 	bic.w	r3, r3, #819200	; 0xc8000
 80010f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
			switch(ep_max_packet_size)
 80010fc:	2d20      	cmp	r5, #32
 80010fe:	f000 808b 	beq.w	8001218 <XMC_USBD_EndpointConfigure+0x25c>
 8001102:	d860      	bhi.n	80011c6 <XMC_USBD_EndpointConfigure+0x20a>
 8001104:	2d08      	cmp	r5, #8
 8001106:	f000 8083 	beq.w	8001210 <XMC_USBD_EndpointConfigure+0x254>
 800110a:	2d10      	cmp	r5, #16
 800110c:	d148      	bne.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
					data.b.mps = 0x2U;
 800110e:	2502      	movs	r5, #2
 8001110:	f365 030a 	bfi	r3, r5, #0, #11
					break;
 8001114:	e044      	b.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8001116:	688b      	ldr	r3, [r1, #8]
 8001118:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800111c:	f36e 0312 	bfi	r3, lr, #0, #19
 8001120:	608b      	str	r3, [r1, #8]
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001122:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <XMC_USBD_EndpointConfigure+0x278>)
 8001128:	f00c 0c0f 	and.w	ip, ip, #15
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 800112c:	eb04 0e8c 	add.w	lr, r4, ip, lsl #2
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001130:	4648      	mov	r0, r9
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8001132:	f503 69e0 	add.w	r9, r3, #1792	; 0x700
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8001136:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800113a:	61cb      	str	r3, [r1, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800113c:	eb09 230c 	add.w	r3, r9, ip, lsl #8
 8001140:	60cb      	str	r3, [r1, #12]
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8001142:	f8de 320c 	ldr.w	r3, [lr, #524]	; 0x20c
 8001146:	620b      	str	r3, [r1, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8001148:	f8de 3228 	ldr.w	r3, [lr, #552]	; 0x228
 800114c:	614b      	str	r3, [r1, #20]
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 800114e:	b9a6      	cbnz	r6, 800117a <XMC_USBD_EndpointConfigure+0x1be>
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8001150:	f10c 036a 	add.w	r3, ip, #106	; 0x6a
 8001154:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 8001158:	f8d9 e000 	ldr.w	lr, [r9]
		data.b.usbactep = 1U;
 800115c:	f42e 2e48 	bic.w	lr, lr, #819200	; 0xc8000
 8001160:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
			switch(ep_max_packet_size)
 8001164:	2d20      	cmp	r5, #32
 8001166:	d05f      	beq.n	8001228 <XMC_USBD_EndpointConfigure+0x26c>
 8001168:	d832      	bhi.n	80011d0 <XMC_USBD_EndpointConfigure+0x214>
 800116a:	2d08      	cmp	r5, #8
 800116c:	d058      	beq.n	8001220 <XMC_USBD_EndpointConfigure+0x264>
 800116e:	2d10      	cmp	r5, #16
 8001170:	d185      	bne.n	800107e <XMC_USBD_EndpointConfigure+0xc2>
				data.b.mps = 0x2U;
 8001172:	2302      	movs	r3, #2
 8001174:	f363 0e0a 	bfi	lr, r3, #0, #11
				break;
 8001178:	e781      	b.n	800107e <XMC_USBD_EndpointConfigure+0xc2>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800117a:	eb04 038c 	add.w	r3, r4, ip, lsl #2
		data.b.usbactep = 1U;
 800117e:	f006 0603 	and.w	r6, r6, #3
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8001182:	f8d3 01c4 	ldr.w	r0, [r3, #452]	; 0x1c4
 8001186:	6803      	ldr	r3, [r0, #0]
		data.b.usbactep = 1U;
 8001188:	04b6      	lsls	r6, r6, #18
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 800118a:	2101      	movs	r1, #1
		data.b.usbactep = 1U;
 800118c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001190:	fa01 f10c 	lsl.w	r1, r1, ip
		data.b.usbactep = 1U;
 8001194:	f423 2348 	bic.w	r3, r3, #819200	; 0xc8000
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8001198:	b289      	uxth	r1, r1
		data.b.usbactep = 1U;
 800119a:	4333      	orrs	r3, r6
			data.b.mps = ep_max_packet_size;
 800119c:	f365 030a 	bfi	r3, r5, #0, #11
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80011a0:	ea41 4117 	orr.w	r1, r1, r7, lsr #16
 80011a4:	f361 421f 	bfi	r2, r1, #16, #16
		data.b.stall =(uint8_t) 0U;
 80011a8:	f3c3 410f 	ubfx	r1, r3, #16, #16
 80011ac:	f421 5181 	bic.w	r1, r1, #4128	; 0x1020
 80011b0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80011b4:	f361 431f 	bfi	r3, r1, #16, #16
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80011b8:	6003      	str	r3, [r0, #0]
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011ba:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
}
 80011be:	2000      	movs	r0, #0
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80011c0:	61da      	str	r2, [r3, #28]
}
 80011c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch(ep_max_packet_size)
 80011c6:	2d40      	cmp	r5, #64	; 0x40
 80011c8:	d1ea      	bne.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
					data.b.mps = 0x0U;
 80011ca:	f36f 030a 	bfc	r3, #0, #11
					break;
 80011ce:	e7e7      	b.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
			switch(ep_max_packet_size)
 80011d0:	2d40      	cmp	r5, #64	; 0x40
 80011d2:	f47f af54 	bne.w	800107e <XMC_USBD_EndpointConfigure+0xc2>
				data.b.mps = 0x0U;
 80011d6:	f36f 0e0a 	bfc	lr, #0, #11
				break;
 80011da:	e750      	b.n	800107e <XMC_USBD_EndpointConfigure+0xc2>
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 80011dc:	f003 030f 	and.w	r3, r3, #15
    xmc_device.txfifomsk |= mask;
 80011e0:	ea4a 0101 	orr.w	r1, sl, r1
 80011e4:	f8a4 11fc 	strh.w	r1, [r4, #508]	; 0x1fc
    result=i;
 80011e8:	e765      	b.n	80010b6 <XMC_USBD_EndpointConfigure+0xfa>
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80011ea:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80011ee:	f8dc 01c4 	ldr.w	r0, [ip, #452]	; 0x1c4
		data.b.usbactep = 1U;
 80011f2:	f006 0c03 	and.w	ip, r6, #3
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80011f6:	6803      	ldr	r3, [r0, #0]
		data.b.usbactep = 1U;
 80011f8:	ea4f 4c8c 	mov.w	ip, ip, lsl #18
 80011fc:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
 8001200:	f423 2348 	bic.w	r3, r3, #819200	; 0xc8000
 8001204:	ea4c 0303 	orr.w	r3, ip, r3
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8001208:	2e00      	cmp	r6, #0
 800120a:	f43f af77 	beq.w	80010fc <XMC_USBD_EndpointConfigure+0x140>
 800120e:	e7c5      	b.n	800119c <XMC_USBD_EndpointConfigure+0x1e0>
					data.b.mps = 0x3U;
 8001210:	2503      	movs	r5, #3
 8001212:	f365 030a 	bfi	r3, r5, #0, #11
					break;
 8001216:	e7c3      	b.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
					data.b.mps = 0x1U;
 8001218:	2501      	movs	r5, #1
 800121a:	f365 030a 	bfi	r3, r5, #0, #11
					break;
 800121e:	e7bf      	b.n	80011a0 <XMC_USBD_EndpointConfigure+0x1e4>
				data.b.mps = 0x3U;
 8001220:	2303      	movs	r3, #3
 8001222:	f363 0e0a 	bfi	lr, r3, #0, #11
				break;
 8001226:	e72a      	b.n	800107e <XMC_USBD_EndpointConfigure+0xc2>
				data.b.mps = 0x1U;
 8001228:	2301      	movs	r3, #1
 800122a:	f363 0e0a 	bfi	lr, r3, #0, #11
				break;
 800122e:	e726      	b.n	800107e <XMC_USBD_EndpointConfigure+0xc2>
 8001230:	20000860 	.word	0x20000860
 8001234:	30000000 	.word	0x30000000

08001238 <XMC_USBD_Init>:
{
 8001238:	b530      	push	{r4, r5, lr}
  usbd_init = obj;
 800123a:	4d52      	ldr	r5, [pc, #328]	; (8001384 <XMC_USBD_Init+0x14c>)
{
 800123c:	b083      	sub	sp, #12
 800123e:	4604      	mov	r4, r0
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001240:	4851      	ldr	r0, [pc, #324]	; (8001388 <XMC_USBD_Init+0x150>)
 8001242:	f001 f9ad 	bl	80025a0 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8001246:	f001 fbff 	bl	8002a48 <XMC_SCU_POWER_EnableUsb>
  usbd_init = obj;
 800124a:	f8c5 4208 	str.w	r4, [r5, #520]	; 0x208
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800124e:	f505 7309 	add.w	r3, r5, #548	; 0x224
 8001252:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8001256:	f505 7010 	add.w	r0, r5, #576	; 0x240
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	f843 2f04 	str.w	r2, [r3, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001260:	4283      	cmp	r3, r0
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8001262:	f841 2f04 	str.w	r2, [r1, #4]!
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001266:	d1f9      	bne.n	800125c <XMC_USBD_Init+0x24>
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8001268:	f44f 7202 	mov.w	r2, #520	; 0x208
 800126c:	2100      	movs	r1, #0
 800126e:	4845      	ldr	r0, [pc, #276]	; (8001384 <XMC_USBD_Init+0x14c>)
 8001270:	f002 fcb6 	bl	8003be0 <memset>
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8001274:	6823      	ldr	r3, [r4, #0]
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8001276:	6861      	ldr	r1, [r4, #4]
 8001278:	4a44      	ldr	r2, [pc, #272]	; (800138c <XMC_USBD_Init+0x154>)
 800127a:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 800127e:	68a1      	ldr	r1, [r4, #8]
 8001280:	f8c5 1204 	str.w	r1, [r5, #516]	; 0x204
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8001284:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001288:	e9c5 3168 	strd	r3, r1, [r5, #416]	; 0x1a0
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800128c:	f102 001c 	add.w	r0, r2, #28
 8001290:	f503 6110 	add.w	r1, r3, #2304	; 0x900
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8001294:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8001298:	4282      	cmp	r2, r0
 800129a:	f101 0120 	add.w	r1, r1, #32
 800129e:	d1f9      	bne.n	8001294 <XMC_USBD_Init+0x5c>
 80012a0:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <XMC_USBD_Init+0x158>)
 80012a2:	f503 6130 	add.w	r1, r3, #2816	; 0xb00
 80012a6:	f102 001c 	add.w	r0, r2, #28
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 80012aa:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80012ae:	4282      	cmp	r2, r0
 80012b0:	f101 0120 	add.w	r1, r1, #32
 80012b4:	d1f9      	bne.n	80012aa <XMC_USBD_Init+0x72>
 80012b6:	4a37      	ldr	r2, [pc, #220]	; (8001394 <XMC_USBD_Init+0x15c>)
 80012b8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 80012bc:	f102 001c 	add.w	r0, r2, #28
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80012c0:	f842 1b04 	str.w	r1, [r2], #4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80012c4:	4282      	cmp	r2, r0
 80012c6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80012ca:	d1f9      	bne.n	80012c0 <XMC_USBD_Init+0x88>
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80012cc:	7b61      	ldrb	r1, [r4, #13]
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 80012ce:	6898      	ldr	r0, [r3, #8]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80012d0:	fab1 f281 	clz	r2, r1
 80012d4:	0952      	lsrs	r2, r2, #5
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 80012d6:	0152      	lsls	r2, r2, #5
 80012d8:	f000 045e 	and.w	r4, r0, #94	; 0x5e
 80012dc:	f062 027e 	orn	r2, r2, #126	; 0x7e
 80012e0:	4322      	orrs	r2, r4
 80012e2:	f362 0007 	bfi	r0, r2, #0, #8
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 80012e6:	6098      	str	r0, [r3, #8]
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 80012e8:	68da      	ldr	r2, [r3, #12]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 80012ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 80012f2:	60da      	str	r2, [r3, #12]
  dcfg.d32 = xmc_device.device_register->dcfg;
 80012f4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 80012f8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80012fc:	f022 0203 	bic.w	r2, r2, #3
 8001300:	f042 0203 	orr.w	r2, r2, #3
  xmc_device.device_register->dcfg = dcfg.d32;
 8001304:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  dctl.d32 = xmc_device.device_register->dctl;
 8001308:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
  data.d32 = 0U;
 800130c:	2400      	movs	r4, #0
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 800130e:	f042 0202 	orr.w	r2, r2, #2
  xmc_device.device_register->dctl = dctl.d32;
 8001312:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  data.d32 = 0U;
 8001316:	9401      	str	r4, [sp, #4]
  data.b.txfflsh = 1U;
 8001318:	9a01      	ldr	r2, [sp, #4]
 800131a:	f042 0220 	orr.w	r2, r2, #32
 800131e:	9201      	str	r2, [sp, #4]
  data.b.txfnum = fifo_num;
 8001320:	9a01      	ldr	r2, [sp, #4]
 8001322:	2010      	movs	r0, #16
 8001324:	f360 128a 	bfi	r2, r0, #6, #5
 8001328:	9201      	str	r2, [sp, #4]
  xmc_device.global_register->grstctl = data.d32;
 800132a:	9a01      	ldr	r2, [sp, #4]
 800132c:	611a      	str	r2, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	9201      	str	r2, [sp, #4]
  } while (data.b.txfflsh);
 8001332:	9a01      	ldr	r2, [sp, #4]
 8001334:	0695      	lsls	r5, r2, #26
 8001336:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800133a:	d4f8      	bmi.n	800132e <XMC_USBD_Init+0xf6>
	data.d32 = 0U;
 800133c:	9000      	str	r0, [sp, #0]
  data.b.rxfflsh = 1U;
 800133e:	9a00      	ldr	r2, [sp, #0]
 8001340:	f042 0210 	orr.w	r2, r2, #16
 8001344:	9200      	str	r2, [sp, #0]
  xmc_device.global_register->grstctl = data.d32;
 8001346:	9a00      	ldr	r2, [sp, #0]
 8001348:	611a      	str	r2, [r3, #16]
    data.d32 = xmc_device.global_register->grstctl;
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	9200      	str	r2, [sp, #0]
  } while (data.b.rxfflsh);
 800134e:	9a00      	ldr	r2, [sp, #0]
 8001350:	06d4      	lsls	r4, r2, #27
 8001352:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8001356:	d4f8      	bmi.n	800134a <XMC_USBD_Init+0x112>
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001358:	f1a1 0201 	sub.w	r2, r1, #1
 800135c:	fab2 f282 	clz	r2, r2
 8001360:	0952      	lsrs	r2, r2, #5
 8001362:	0112      	lsls	r2, r2, #4
  gintmsk.b.inepintr = 1U;
 8001364:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001368:	f442 2243 	orr.w	r2, r2, #798720	; 0xc3000
 800136c:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  gintmsk.b.inepintr = 1U;
 8001374:	f042 020e 	orr.w	r2, r2, #14
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8001378:	6198      	str	r0, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 800137a:	6159      	str	r1, [r3, #20]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	b003      	add	sp, #12
 8001380:	bd30      	pop	{r4, r5, pc}
 8001382:	bf00      	nop
 8001384:	20000860 	.word	0x20000860
 8001388:	20000080 	.word	0x20000080
 800138c:	20000a08 	.word	0x20000a08
 8001390:	20000a24 	.word	0x20000a24
 8001394:	20000a40 	.word	0x20000a40

08001398 <XMC_USBD_EndpointRead>:
{
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (length > ep->outBytesAvailable)
 800139a:	4e0e      	ldr	r6, [pc, #56]	; (80013d4 <XMC_USBD_EndpointRead+0x3c>)
 800139c:	2434      	movs	r4, #52	; 0x34
 800139e:	fb04 6400 	mla	r4, r4, r0, r6
{
 80013a2:	4607      	mov	r7, r0
  if (length > ep->outBytesAvailable)
 80013a4:	6923      	ldr	r3, [r4, #16]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	bf28      	it	cs
 80013aa:	461a      	movcs	r2, r3
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80013ac:	4608      	mov	r0, r1
 80013ae:	69a3      	ldr	r3, [r4, #24]
 80013b0:	68e1      	ldr	r1, [r4, #12]
 80013b2:	4419      	add	r1, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	f002 fb79 	bl	8003aac <memcpy>
  ep->outBytesAvailable -= length;
 80013ba:	6923      	ldr	r3, [r4, #16]
 80013bc:	1b5b      	subs	r3, r3, r5
 80013be:	6123      	str	r3, [r4, #16]
  if (ep->outBytesAvailable)
 80013c0:	b10b      	cbz	r3, 80013c6 <XMC_USBD_EndpointRead+0x2e>
    ep->outOffset += length;
 80013c2:	69a3      	ldr	r3, [r4, #24]
 80013c4:	442b      	add	r3, r5
 80013c6:	2034      	movs	r0, #52	; 0x34
 80013c8:	fb00 6607 	mla	r6, r0, r7, r6
}
 80013cc:	4628      	mov	r0, r5
 80013ce:	61b3      	str	r3, [r6, #24]
 80013d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000860 	.word	0x20000860

080013d8 <XMC_USBD_EndpointWrite>:
{
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!ep->isConfigured)
 80013da:	4f16      	ldr	r7, [pc, #88]	; (8001434 <XMC_USBD_EndpointWrite+0x5c>)
 80013dc:	f000 060f 	and.w	r6, r0, #15
 80013e0:	2434      	movs	r4, #52	; 0x34
 80013e2:	fb04 7406 	mla	r4, r4, r6, r7
 80013e6:	7923      	ldrb	r3, [r4, #4]
 80013e8:	0758      	lsls	r0, r3, #29
 80013ea:	d504      	bpl.n	80013f6 <XMC_USBD_EndpointWrite+0x1e>
  else if (ep->inInUse == 1U)
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	071b      	lsls	r3, r3, #28
 80013f0:	d503      	bpl.n	80013fa <XMC_USBD_EndpointWrite+0x22>
    result=(int32_t)0;
 80013f2:	2000      	movs	r0, #0
}
 80013f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 80013f6:	2001      	movs	r0, #1
}
 80013f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length > ep->inBufferSize)
 80013fa:	6a25      	ldr	r5, [r4, #32]
		memcpy(ep->inBuffer,(const void *)buffer,length);
 80013fc:	69e0      	ldr	r0, [r4, #28]
 80013fe:	4295      	cmp	r5, r2
 8001400:	bf28      	it	cs
 8001402:	4615      	movcs	r5, r2
 8001404:	462a      	mov	r2, r5
 8001406:	f002 fb51 	bl	8003aac <memcpy>
		ep->xferBuffer = ep->inBuffer;
 800140a:	69e3      	ldr	r3, [r4, #28]
 800140c:	6263      	str	r3, [r4, #36]	; 0x24
    ep->inInUse = 1U;
 800140e:	6863      	ldr	r3, [r4, #4]
    ep->xferTotal = length;
 8001410:	6325      	str	r5, [r4, #48]	; 0x30
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8001412:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ep->xferLength = 0U;
 8001416:	2200      	movs	r2, #0
    ep->inInUse = 1U;
 8001418:	f043 0308 	orr.w	r3, r3, #8
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800141c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    XMC_USBD_lStartWriteXfer(ep);
 8001420:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    ep->xferCount = 0U;
 8001424:	e9c4 220a 	strd	r2, r2, [r4, #40]	; 0x28
    ep->inInUse = 1U;
 8001428:	6063      	str	r3, [r4, #4]
    XMC_USBD_lStartWriteXfer(ep);
 800142a:	f7ff fc23 	bl	8000c74 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 800142e:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8001430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000860 	.word	0x20000860

08001438 <XMC_USBD_DeviceGetState>:
{
 8001438:	b570      	push	{r4, r5, r6, lr}
  state.connected = xmc_device.IsConnected;
 800143a:	4c1b      	ldr	r4, [pc, #108]	; (80014a8 <XMC_USBD_DeviceGetState+0x70>)
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800143c:	7b05      	ldrb	r5, [r0, #12]
  state.connected = xmc_device.IsConnected;
 800143e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  XMC_USBD_STATE_t state={0U};
 8001442:	2000      	movs	r0, #0
  state.connected = xmc_device.IsConnected;
 8001444:	f003 0601 	and.w	r6, r3, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001448:	b35d      	cbz	r5, 80014a2 <XMC_USBD_DeviceGetState+0x6a>
 800144a:	4602      	mov	r2, r0
  uint8_t result = 0U;
 800144c:	4684      	mov	ip, r0
 800144e:	4603      	mov	r3, r0
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8001450:	f04f 0e34 	mov.w	lr, #52	; 0x34
 8001454:	e009      	b.n	800146a <XMC_USBD_DeviceGetState+0x32>
 8001456:	685b      	ldr	r3, [r3, #4]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001458:	3201      	adds	r2, #1
      result = 1U;
 800145a:	f013 0f10 	tst.w	r3, #16
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800145e:	b2d3      	uxtb	r3, r2
      result = 1U;
 8001460:	bf18      	it	ne
 8001462:	f04f 0c01 	movne.w	ip, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001466:	429d      	cmp	r5, r3
 8001468:	d90a      	bls.n	8001480 <XMC_USBD_DeviceGetState+0x48>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 800146a:	fb0e 4303 	mla	r3, lr, r3, r4
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	0709      	lsls	r1, r1, #28
 8001472:	d5f0      	bpl.n	8001456 <XMC_USBD_DeviceGetState+0x1e>
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8001474:	3201      	adds	r2, #1
 8001476:	b2d3      	uxtb	r3, r2
 8001478:	429d      	cmp	r5, r3
      result = 1U;
 800147a:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 800147e:	d8f4      	bhi.n	800146a <XMC_USBD_DeviceGetState+0x32>
  state.active = XMC_USBD_lDeviceActive(obj);
 8001480:	f00c 0c01 	and.w	ip, ip, #1
  state.powered = xmc_device.IsPowered;
 8001484:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001488:	f3c3 0380 	ubfx	r3, r3, #2, #1
  return state;
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8001494:	ea43 0c8c 	orr.w	ip, r3, ip, lsl #2
 8001498:	f00c 0c1f 	and.w	ip, ip, #31
 800149c:	f36c 0007 	bfi	r0, ip, #0, #8
}
 80014a0:	bd70      	pop	{r4, r5, r6, pc}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014a2:	4684      	mov	ip, r0
 80014a4:	e7ee      	b.n	8001484 <XMC_USBD_DeviceGetState+0x4c>
 80014a6:	bf00      	nop
 80014a8:	20000860 	.word	0x20000860

080014ac <XMC_USBD_lDeviceActive>:
{
 80014ac:	b430      	push	{r4, r5}
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014ae:	7b04      	ldrb	r4, [r0, #12]
 80014b0:	b1dc      	cbz	r4, 80014ea <XMC_USBD_lDeviceActive+0x3e>
 80014b2:	2300      	movs	r3, #0
 80014b4:	4d0e      	ldr	r5, [pc, #56]	; (80014f0 <XMC_USBD_lDeviceActive+0x44>)
  uint8_t result = 0U;
 80014b6:	4618      	mov	r0, r3
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80014b8:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80014bc:	e008      	b.n	80014d0 <XMC_USBD_lDeviceActive+0x24>
 80014be:	6852      	ldr	r2, [r2, #4]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014c0:	3301      	adds	r3, #1
      result = 1U;
 80014c2:	f012 0f10 	tst.w	r2, #16
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014c6:	b2da      	uxtb	r2, r3
      result = 1U;
 80014c8:	bf18      	it	ne
 80014ca:	2001      	movne	r0, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014cc:	42a2      	cmp	r2, r4
 80014ce:	d20a      	bcs.n	80014e6 <XMC_USBD_lDeviceActive+0x3a>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80014d0:	fb0c 5203 	mla	r2, ip, r3, r5
 80014d4:	6851      	ldr	r1, [r2, #4]
 80014d6:	0709      	lsls	r1, r1, #28
 80014d8:	d5f1      	bpl.n	80014be <XMC_USBD_lDeviceActive+0x12>
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014da:	3301      	adds	r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	42a2      	cmp	r2, r4
      result = 1U;
 80014e0:	f04f 0001 	mov.w	r0, #1
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80014e4:	d3f4      	bcc.n	80014d0 <XMC_USBD_lDeviceActive+0x24>
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
  uint8_t result = 0U;
 80014ea:	4620      	mov	r0, r4
}
 80014ec:	bc30      	pop	{r4, r5}
 80014ee:	4770      	bx	lr
 80014f0:	20000860 	.word	0x20000860

080014f4 <XMC_USBD_IRQHandler>:
{
 80014f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 80014f8:	4c94      	ldr	r4, [pc, #592]	; (800174c <XMC_USBD_IRQHandler+0x258>)
 80014fa:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80014fe:	699e      	ldr	r6, [r3, #24]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001500:	695d      	ldr	r5, [r3, #20]
{
 8001502:	b08d      	sub	sp, #52	; 0x34
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8001504:	4035      	ands	r5, r6
  if (data.b.sofintr)
 8001506:	b2eb      	uxtb	r3, r5
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	072b      	lsls	r3, r5, #28
{
 800150c:	4681      	mov	r9, r0
  if (data.b.sofintr)
 800150e:	d507      	bpl.n	8001520 <XMC_USBD_IRQHandler+0x2c>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8001510:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001514:	2009      	movs	r0, #9
 8001516:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001518:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800151c:	2208      	movs	r2, #8
 800151e:	615a      	str	r2, [r3, #20]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001520:	f899 300d 	ldrb.w	r3, [r9, #13]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d046      	beq.n	80015b6 <XMC_USBD_IRQHandler+0xc2>
  if (data.b.erlysuspend)
 8001528:	0568      	lsls	r0, r5, #21
 800152a:	f3c5 2607 	ubfx	r6, r5, #8, #8
 800152e:	d504      	bpl.n	800153a <XMC_USBD_IRQHandler+0x46>
	xmc_device.global_register->gintsts = clear.d32;
 8001530:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001538:	615a      	str	r2, [r3, #20]
  if (data.b.usbsuspend)
 800153a:	0731      	lsls	r1, r6, #28
 800153c:	d508      	bpl.n	8001550 <XMC_USBD_IRQHandler+0x5c>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 800153e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001542:	2006      	movs	r0, #6
 8001544:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001546:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800154a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154e:	615a      	str	r2, [r3, #20]
  if (data.b.wkupintr)
 8001550:	2d00      	cmp	r5, #0
 8001552:	ea4f 6715 	mov.w	r7, r5, lsr #24
 8001556:	da08      	bge.n	800156a <XMC_USBD_IRQHandler+0x76>
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8001558:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800155c:	2008      	movs	r0, #8
 800155e:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001560:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001564:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001568:	615a      	str	r2, [r3, #20]
  if (data.b.sessreqintr)
 800156a:	067a      	lsls	r2, r7, #25
 800156c:	d50e      	bpl.n	800158c <XMC_USBD_IRQHandler+0x98>
    xmc_device.IsPowered = 1U;
 800156e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 800157a:	2000      	movs	r0, #0
 800157c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001580:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001582:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800158a:	615a      	str	r2, [r3, #20]
  if (data.b.usbreset)
 800158c:	06f3      	lsls	r3, r6, #27
 800158e:	f100 8167 	bmi.w	8001860 <XMC_USBD_IRQHandler+0x36c>
  if (data.b.enumdone)
 8001592:	06b1      	lsls	r1, r6, #26
 8001594:	f100 8147 	bmi.w	8001826 <XMC_USBD_IRQHandler+0x332>
  if (data.b.inepint)
 8001598:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800159c:	036a      	lsls	r2, r5, #13
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	f100 80d6 	bmi.w	8001750 <XMC_USBD_IRQHandler+0x25c>
  if (data.b.outepintr)
 80015a4:	9b02      	ldr	r3, [sp, #8]
 80015a6:	071b      	lsls	r3, r3, #28
 80015a8:	d435      	bmi.n	8001616 <XMC_USBD_IRQHandler+0x122>
	if (data.b.otgintr)
 80015aa:	9b00      	ldr	r3, [sp, #0]
 80015ac:	075f      	lsls	r7, r3, #29
 80015ae:	d41d      	bmi.n	80015ec <XMC_USBD_IRQHandler+0xf8>
}
 80015b0:	b00d      	add	sp, #52	; 0x34
 80015b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (data.b.rxstsqlvl)
 80015b6:	9b00      	ldr	r3, [sp, #0]
 80015b8:	06df      	lsls	r7, r3, #27
 80015ba:	d5b5      	bpl.n	8001528 <XMC_USBD_IRQHandler+0x34>
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015bc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
      gintmsk.b.rxstsqlvl = 0U;
 80015c0:	f36f 1604 	bfc	r6, #4, #1
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015c4:	619e      	str	r6, [r3, #24]
  data.d32 = xmc_device.global_register->grxstsp;
 80015c6:	6a18      	ldr	r0, [r3, #32]
  switch (data.b.pktsts)
 80015c8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80015cc:	f002 020b 	and.w	r2, r2, #11
 80015d0:	2a02      	cmp	r2, #2
 80015d2:	d107      	bne.n	80015e4 <XMC_USBD_IRQHandler+0xf0>
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80015d4:	f3c0 110a 	ubfx	r1, r0, #4, #11
 80015d8:	f000 000f 	and.w	r0, r0, #15
 80015dc:	f7ff faae 	bl	8000b3c <XMC_USBD_lReadFifo>
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015e0:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
      gintmsk.b.rxstsqlvl = 1U;
 80015e4:	f046 0610 	orr.w	r6, r6, #16
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80015e8:	619e      	str	r6, [r3, #24]
 80015ea:	e79d      	b.n	8001528 <XMC_USBD_IRQHandler+0x34>
  data.d32 = xmc_device.global_register->gotgint;
 80015ec:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80015f0:	685d      	ldr	r5, [r3, #4]
  if (data.b.sesenddet)
 80015f2:	076e      	lsls	r6, r5, #29
 80015f4:	d50b      	bpl.n	800160e <XMC_USBD_IRQHandler+0x11a>
		xmc_device.IsPowered = 0U;
 80015f6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80015fa:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		xmc_device.IsPowered = 0U;
 80015fe:	f36f 0382 	bfc	r3, #2, #1
 8001602:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8001606:	2001      	movs	r0, #1
 8001608:	4790      	blx	r2
  xmc_device.global_register->gotgint = clear.d32;
 800160a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800160e:	605d      	str	r5, [r3, #4]
}
 8001610:	b00d      	add	sp, #52	; 0x34
 8001612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  daint.d32 = xmc_device.device_register->daint;
 8001616:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800161a:	6991      	ldr	r1, [r2, #24]
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 800161c:	69d3      	ldr	r3, [r2, #28]
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 800161e:	6952      	ldr	r2, [r2, #20]
 8001620:	9202      	str	r2, [sp, #8]
  mask = daint.ep.out & daintmsk.ep.out;
 8001622:	f3c3 4a0f 	ubfx	sl, r3, #16, #16
  while ((uint16_t)mask >> ep_num)
 8001626:	ea1a 4a11 	ands.w	sl, sl, r1, lsr #16
  doeptsiz.d32 = 0U;
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	9301      	str	r3, [sp, #4]
  while ((uint16_t)mask >> ep_num)
 8001630:	d057      	beq.n	80016e2 <XMC_USBD_IRQHandler+0x1ee>
  ep_num = 0U;
 8001632:	9e01      	ldr	r6, [sp, #4]
  while ((uint16_t)mask >> ep_num)
 8001634:	4653      	mov	r3, sl
  ep_num = 0U;
 8001636:	4635      	mov	r5, r6
        ep->isStalled = 0U;
 8001638:	f04f 0834 	mov.w	r8, #52	; 0x34
    if (temp)
 800163c:	07df      	lsls	r7, r3, #31
 800163e:	d54a      	bpl.n	80016d6 <XMC_USBD_IRQHandler+0x1e2>
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001640:	f106 0b70 	add.w	fp, r6, #112	; 0x70
 8001644:	eb04 038b 	add.w	r3, r4, fp, lsl #2
 8001648:	9a02      	ldr	r2, [sp, #8]
 800164a:	685b      	ldr	r3, [r3, #4]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800164c:	f899 100d 	ldrb.w	r1, [r9, #13]
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8001650:	689f      	ldr	r7, [r3, #8]
 8001652:	4017      	ands	r7, r2
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8001654:	2900      	cmp	r1, #0
 8001656:	d166      	bne.n	8001726 <XMC_USBD_IRQHandler+0x232>
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	9201      	str	r2, [sp, #4]
      if (doepint.b.setup)
 800165c:	0738      	lsls	r0, r7, #28
 800165e:	b2fa      	uxtb	r2, r7
 8001660:	d545      	bpl.n	80016ee <XMC_USBD_IRQHandler+0x1fa>
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8001662:	9b01      	ldr	r3, [sp, #4]
 8001664:	f3c3 7341 	ubfx	r3, r3, #29, #2
        ep->isStalled = 0U;
 8001668:	fb08 4006 	mla	r0, r8, r6, r4
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 800166c:	f1c3 0303 	rsb	r3, r3, #3
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	6103      	str	r3, [r0, #16]
        ep->isStalled = 0U;
 8001674:	7903      	ldrb	r3, [r0, #4]
 8001676:	f361 1345 	bfi	r3, r1, #5, #1
 800167a:	7103      	strb	r3, [r0, #4]
		ep->outInUse = 0U;
 800167c:	fb08 4306 	mla	r3, r8, r6, r4
 8001680:	9203      	str	r2, [sp, #12]
 8001682:	6858      	ldr	r0, [r3, #4]
 8001684:	f36f 1004 	bfc	r0, #4, #1
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8001688:	2100      	movs	r1, #0
		ep->outInUse = 0U;
 800168a:	6058      	str	r0, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800168c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001690:	4608      	mov	r0, r1
 8001692:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001694:	eb04 038b 	add.w	r3, r4, fp, lsl #2
      if (doepint.b.xfercompl)
 8001698:	9a03      	ldr	r2, [sp, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2108      	movs	r1, #8
      if (doepint.b.xfercompl)
 800169e:	07d2      	lsls	r2, r2, #31
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80016a0:	6099      	str	r1, [r3, #8]
      if (doepint.b.xfercompl)
 80016a2:	d517      	bpl.n	80016d4 <XMC_USBD_IRQHandler+0x1e0>
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80016a4:	f899 300d 	ldrb.w	r3, [r9, #13]
 80016a8:	b31b      	cbz	r3, 80016f2 <XMC_USBD_IRQHandler+0x1fe>
        if (ep->xferTotal == ep->xferLength)
 80016aa:	fb08 4006 	mla	r0, r8, r6, r4
 80016ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80016b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d130      	bne.n	8001718 <XMC_USBD_IRQHandler+0x224>
          ep->outInUse = 0U;
 80016b6:	6843      	ldr	r3, [r0, #4]
 80016b8:	f36f 1304 	bfc	r3, #4, #1
 80016bc:	6043      	str	r3, [r0, #4]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80016be:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
          ep->outBytesAvailable = ep->xferCount;
 80016c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80016c4:	6103      	str	r3, [r0, #16]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80016c6:	2101      	movs	r1, #1
 80016c8:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80016cc:	4628      	mov	r0, r5
 80016ce:	4798      	blx	r3
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80016d0:	f8db 3004 	ldr.w	r3, [fp, #4]
 80016d4:	609f      	str	r7, [r3, #8]
    ep_num++;
 80016d6:	3501      	adds	r5, #1
 80016d8:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 80016da:	fa5a f305 	asrs.w	r3, sl, r5
 80016de:	462e      	mov	r6, r5
 80016e0:	d1ac      	bne.n	800163c <XMC_USBD_IRQHandler+0x148>
	xmc_device.global_register->gintsts = clear.d32;
 80016e2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 80016e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016ea:	615a      	str	r2, [r3, #20]
}
 80016ec:	e75d      	b.n	80015aa <XMC_USBD_IRQHandler+0xb6>
      if (doepint.b.xfercompl)
 80016ee:	07d0      	lsls	r0, r2, #31
 80016f0:	d5f0      	bpl.n	80016d4 <XMC_USBD_IRQHandler+0x1e0>
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 80016f2:	fb08 4106 	mla	r1, r8, r6, r4
 80016f6:	9b01      	ldr	r3, [sp, #4]
 80016f8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80016fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          ep->xferCount += bytes;
 8001702:	62cb      	str	r3, [r1, #44]	; 0x2c
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 8001704:	1a9b      	subs	r3, r3, r2
          ep->xferBuffer += bytes;
 8001706:	6a4a      	ldr	r2, [r1, #36]	; 0x24
        if (ep->xferTotal == ep->xferLength)
 8001708:	fb08 4006 	mla	r0, r8, r6, r4
          ep->xferBuffer += bytes;
 800170c:	4413      	add	r3, r2
 800170e:	624b      	str	r3, [r1, #36]	; 0x24
        if (ep->xferTotal == ep->xferLength)
 8001710:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001712:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001714:	429a      	cmp	r2, r3
 8001716:	d0ce      	beq.n	80016b6 <XMC_USBD_IRQHandler+0x1c2>
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001718:	eb04 0b8b 	add.w	fp, r4, fp, lsl #2
          XMC_USBD_lStartReadXfer(ep);
 800171c:	f7ff fa5e 	bl	8000bdc <XMC_USBD_lStartReadXfer>
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001720:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001724:	e7d6      	b.n	80016d4 <XMC_USBD_IRQHandler+0x1e0>
      if (doepint.b.setup)
 8001726:	0738      	lsls	r0, r7, #28
 8001728:	b2fa      	uxtb	r2, r7
 800172a:	d50c      	bpl.n	8001746 <XMC_USBD_IRQHandler+0x252>
        ep->isStalled = 0U;
 800172c:	fb08 4006 	mla	r0, r8, r6, r4
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001730:	2901      	cmp	r1, #1
        ep->isStalled = 0U;
 8001732:	7903      	ldrb	r3, [r0, #4]
 8001734:	f36f 1345 	bfc	r3, #5, #1
 8001738:	7103      	strb	r3, [r0, #4]
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800173a:	d19f      	bne.n	800167c <XMC_USBD_IRQHandler+0x188>
			ep->outBytesAvailable += ep->xferCount;
 800173c:	6903      	ldr	r3, [r0, #16]
 800173e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001740:	440b      	add	r3, r1
 8001742:	6103      	str	r3, [r0, #16]
 8001744:	e79a      	b.n	800167c <XMC_USBD_IRQHandler+0x188>
      if (doepint.b.xfercompl)
 8001746:	07d1      	lsls	r1, r2, #31
 8001748:	d4af      	bmi.n	80016aa <XMC_USBD_IRQHandler+0x1b6>
 800174a:	e7c3      	b.n	80016d4 <XMC_USBD_IRQHandler+0x1e0>
 800174c:	20000860 	.word	0x20000860
  daint.d32 = xmc_device.device_register->daint;
 8001750:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8001754:	699a      	ldr	r2, [r3, #24]
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	9303      	str	r3, [sp, #12]
  while ((uint16_t)mask >> ep_num)
 800175a:	fa1f fb82 	uxth.w	fp, r2
 800175e:	f1bb 0f00 	cmp.w	fp, #0
 8001762:	d05b      	beq.n	800181c <XMC_USBD_IRQHandler+0x328>
  ep_num = 0U;
 8001764:	2500      	movs	r5, #0
  while ((uint16_t)mask >> ep_num)
 8001766:	465b      	mov	r3, fp
 8001768:	4628      	mov	r0, r5
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800176a:	f04f 0a34 	mov.w	sl, #52	; 0x34
 800176e:	46c8      	mov	r8, r9
    if ((uint16_t)temp)
 8001770:	07db      	lsls	r3, r3, #31
 8001772:	d54c      	bpl.n	800180e <XMC_USBD_IRQHandler+0x31a>
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001774:	f100 036a 	add.w	r3, r0, #106	; 0x6a
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001778:	fb0a f200 	mul.w	r2, sl, r0
 800177c:	f8d4 91a4 	ldr.w	r9, [r4, #420]	; 0x1a4
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8001786:	f814 c002 	ldrb.w	ip, [r4, r2]
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 800178a:	6899      	ldr	r1, [r3, #8]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 800178c:	f8d9 6034 	ldr.w	r6, [r9, #52]	; 0x34
 8001790:	f00c 0c0f 	and.w	ip, ip, #15
 8001794:	4422      	add	r2, r4
 8001796:	fa26 f60c 	lsr.w	r6, r6, ip
 800179a:	9204      	str	r2, [sp, #16]
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 800179c:	01f6      	lsls	r6, r6, #7
 800179e:	9a03      	ldr	r2, [sp, #12]
 80017a0:	b2f6      	uxtb	r6, r6
 80017a2:	4316      	orrs	r6, r2
      diepint.d32 = inepint &
 80017a4:	400e      	ands	r6, r1
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80017a6:	f898 100d 	ldrb.w	r1, [r8, #13]
 80017aa:	b9c1      	cbnz	r1, 80017de <XMC_USBD_IRQHandler+0x2ea>
      if (diepint.b.xfercompl)
 80017ac:	07f7      	lsls	r7, r6, #31
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80017ae:	6919      	ldr	r1, [r3, #16]
      if (diepint.b.xfercompl)
 80017b0:	d52c      	bpl.n	800180c <XMC_USBD_IRQHandler+0x318>
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 80017b2:	f031 4360 	bics.w	r3, r1, #3758096384	; 0xe0000000
 80017b6:	d107      	bne.n	80017c8 <XMC_USBD_IRQHandler+0x2d4>
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 80017b8:	9a04      	ldr	r2, [sp, #16]
 80017ba:	e9d2 310a 	ldrd	r3, r1, [r2, #40]	; 0x28
 80017be:	1a59      	subs	r1, r3, r1
            ep->xferCount += Bytes;
 80017c0:	62d3      	str	r3, [r2, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 80017c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80017c4:	440b      	add	r3, r1
 80017c6:	6253      	str	r3, [r2, #36]	; 0x24
        if (ep->xferTotal==ep->xferLength)
 80017c8:	fb0a 4100 	mla	r1, sl, r0, r4
 80017cc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80017ce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d114      	bne.n	80017fe <XMC_USBD_IRQHandler+0x30a>
          ep->inInUse = 0U;
 80017d4:	684b      	ldr	r3, [r1, #4]
 80017d6:	f36f 03c3 	bfc	r3, #3, #1
 80017da:	604b      	str	r3, [r1, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80017dc:	e0e0      	b.n	80019a0 <XMC_USBD_IRQHandler+0x4ac>
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80017de:	2901      	cmp	r1, #1
 80017e0:	d102      	bne.n	80017e8 <XMC_USBD_IRQHandler+0x2f4>
        if (diepint.b.emptyintr)
 80017e2:	0632      	lsls	r2, r6, #24
 80017e4:	f100 80e6 	bmi.w	80019b4 <XMC_USBD_IRQHandler+0x4c0>
      if (diepint.b.xfercompl)
 80017e8:	07f2      	lsls	r2, r6, #31
 80017ea:	d50f      	bpl.n	800180c <XMC_USBD_IRQHandler+0x318>
        if (ep->xferTotal==ep->xferLength)
 80017ec:	fb0a 4c00 	mla	ip, sl, r0, r4
 80017f0:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
 80017f4:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f000 80c1 	beq.w	8001980 <XMC_USBD_IRQHandler+0x48c>
          XMC_USBD_lStartWriteXfer(ep);
 80017fe:	fb0a 4000 	mla	r0, sl, r0, r4
 8001802:	f7ff fa37 	bl	8000c74 <XMC_USBD_lStartWriteXfer>
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001806:	9b01      	ldr	r3, [sp, #4]
 8001808:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800180c:	609e      	str	r6, [r3, #8]
    ep_num++;
 800180e:	3501      	adds	r5, #1
 8001810:	b2ed      	uxtb	r5, r5
  while ((uint16_t)mask >> ep_num)
 8001812:	fa5b f305 	asrs.w	r3, fp, r5
 8001816:	4628      	mov	r0, r5
 8001818:	d1aa      	bne.n	8001770 <XMC_USBD_IRQHandler+0x27c>
 800181a:	46c1      	mov	r9, r8
	xmc_device.global_register->gintsts = clear.d32;
 800181c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
}
 8001824:	e6be      	b.n	80015a4 <XMC_USBD_IRQHandler+0xb0>
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8001826:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  xmc_device.IsConnected = 1U;
 800182a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 800182e:	680a      	ldr	r2, [r1, #0]
  xmc_device.IsConnected = 1U;
 8001830:	f023 0305 	bic.w	r3, r3, #5
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8001834:	f36f 020a 	bfc	r2, #0, #11
  xmc_device.IsConnected = 1U;
 8001838:	f043 0305 	orr.w	r3, r3, #5
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 800183c:	600a      	str	r2, [r1, #0]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 800183e:	2002      	movs	r0, #2
  xmc_device.IsConnected = 1U;
 8001840:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8001844:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001848:	4798      	blx	r3
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 800184a:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800184e:	68d3      	ldr	r3, [r2, #12]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8001850:	2109      	movs	r1, #9
 8001852:	f361 238d 	bfi	r3, r1, #10, #4
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8001856:	60d3      	str	r3, [r2, #12]
	xmc_device.global_register->gintsts = clear.d32;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	6153      	str	r3, [r2, #20]
}
 800185e:	e69b      	b.n	8001598 <XMC_USBD_IRQHandler+0xa4>
  dctl.d32 = xmc_device.device_register->dctl;
 8001860:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8001864:	4878      	ldr	r0, [pc, #480]	; (8001a48 <XMC_USBD_IRQHandler+0x554>)
 8001866:	6853      	ldr	r3, [r2, #4]
  dctl.b.rmtwkupsig = 1U;
 8001868:	f043 0301 	orr.w	r3, r3, #1
  xmc_device.device_register->dctl = dctl.d32;
 800186c:	6053      	str	r3, [r2, #4]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 800186e:	f100 0c1c 	add.w	ip, r0, #28
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8001872:	f850 7b04 	ldr.w	r7, [r0], #4
 8001876:	683b      	ldr	r3, [r7, #0]
		epctl.b.stall = 0U;
 8001878:	f3c3 410f 	ubfx	r1, r3, #16, #16
 800187c:	f421 6102 	bic.w	r1, r1, #2080	; 0x820
 8001880:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001884:	f361 431f 	bfi	r3, r1, #16, #16
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8001888:	4584      	cmp	ip, r0
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 800188a:	603b      	str	r3, [r7, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 800188c:	d1f1      	bne.n	8001872 <XMC_USBD_IRQHandler+0x37e>
  xmc_device.global_register->grxfsiz = 64U;
 800188e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8001892:	486e      	ldr	r0, [pc, #440]	; (8001a4c <XMC_USBD_IRQHandler+0x558>)
 8001894:	496e      	ldr	r1, [pc, #440]	; (8001a50 <XMC_USBD_IRQHandler+0x55c>)
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8001896:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8001a58 <XMC_USBD_IRQHandler+0x564>
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 800189a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a5c <XMC_USBD_IRQHandler+0x568>
 800189e:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8001a60 <XMC_USBD_IRQHandler+0x56c>
 80018a2:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8001a64 <XMC_USBD_IRQHandler+0x570>
 80018a6:	4f6b      	ldr	r7, [pc, #428]	; (8001a54 <XMC_USBD_IRQHandler+0x560>)
  xmc_device.global_register->grxfsiz = 64U;
 80018a8:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80018ac:	f8c3 a024 	str.w	sl, [r3, #36]	; 0x24
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80018b0:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80018b4:	f8c3 8104 	str.w	r8, [r3, #260]	; 0x104
 80018b8:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
 80018bc:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
 80018c0:	f8c3 7110 	str.w	r7, [r3, #272]	; 0x110
 80018c4:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
 80018c8:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  data.d32 = 0U;
 80018cc:	2100      	movs	r1, #0
 80018ce:	910b      	str	r1, [sp, #44]	; 0x2c
  data.b.txfflsh = 1U;
 80018d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80018d2:	f041 0120 	orr.w	r1, r1, #32
 80018d6:	910b      	str	r1, [sp, #44]	; 0x2c
  data.b.txfnum = fifo_num;
 80018d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80018da:	2010      	movs	r0, #16
 80018dc:	f360 118a 	bfi	r1, r0, #6, #5
 80018e0:	910b      	str	r1, [sp, #44]	; 0x2c
  xmc_device.global_register->grstctl = data.d32;
 80018e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80018e4:	6119      	str	r1, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 80018e6:	6919      	ldr	r1, [r3, #16]
 80018e8:	910b      	str	r1, [sp, #44]	; 0x2c
  } while (data.b.txfflsh);
 80018ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80018ec:	068f      	lsls	r7, r1, #26
 80018ee:	f3c1 1040 	ubfx	r0, r1, #5, #1
 80018f2:	d4f8      	bmi.n	80018e6 <XMC_USBD_IRQHandler+0x3f2>
  data.d32 = 0U;
 80018f4:	900a      	str	r0, [sp, #40]	; 0x28
  data.b.txfflsh = 1U;
 80018f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018f8:	f041 0120 	orr.w	r1, r1, #32
 80018fc:	910a      	str	r1, [sp, #40]	; 0x28
  data.b.txfnum = fifo_num;
 80018fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001900:	f360 118a 	bfi	r1, r0, #6, #5
 8001904:	910a      	str	r1, [sp, #40]	; 0x28
  xmc_device.global_register->grstctl = data.d32;
 8001906:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001908:	6119      	str	r1, [r3, #16]
   data.d32 = xmc_device.global_register->grstctl;
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	910a      	str	r1, [sp, #40]	; 0x28
  } while (data.b.txfflsh);
 800190e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001910:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001914:	0689      	lsls	r1, r1, #26
 8001916:	d4f8      	bmi.n	800190a <XMC_USBD_IRQHandler+0x416>
	data.d32 = 0U;
 8001918:	9009      	str	r0, [sp, #36]	; 0x24
  data.b.rxfflsh = 1U;
 800191a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800191c:	f041 0110 	orr.w	r1, r1, #16
 8001920:	9109      	str	r1, [sp, #36]	; 0x24
  xmc_device.global_register->grstctl = data.d32;
 8001922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001924:	6119      	str	r1, [r3, #16]
    data.d32 = xmc_device.global_register->grstctl;
 8001926:	6919      	ldr	r1, [r3, #16]
 8001928:	9109      	str	r1, [sp, #36]	; 0x24
  } while (data.b.rxfflsh);
 800192a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800192c:	06cf      	lsls	r7, r1, #27
 800192e:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001932:	d4f8      	bmi.n	8001926 <XMC_USBD_IRQHandler+0x432>
  xmc_device.device_register->daintmsk = daint.d32;
 8001934:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001938:	61d3      	str	r3, [r2, #28]
	xmc_device.device_register->doepmsk |= doepint.d32;
 800193a:	6953      	ldr	r3, [r2, #20]
 800193c:	f043 030f 	orr.w	r3, r3, #15
 8001940:	6153      	str	r3, [r2, #20]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001942:	6913      	ldr	r3, [r2, #16]
 8001944:	f043 030f 	orr.w	r3, r3, #15
 8001948:	6113      	str	r3, [r2, #16]
  dcfg.d32 = xmc_device.device_register->dcfg;
 800194a:	6813      	ldr	r3, [r2, #0]
  dcfg.b.devaddr = 0U;
 800194c:	f360 130a 	bfi	r3, r0, #4, #7
  xmc_device.device_register->dcfg = dcfg.d32;
 8001950:	6013      	str	r3, [r2, #0]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001952:	f899 300d 	ldrb.w	r3, [r9, #13]
 8001956:	2b01      	cmp	r3, #1
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8001958:	bf08      	it	eq
 800195a:	6350      	streq	r0, [r2, #52]	; 0x34
  xmc_device.ep[0U].outInUse = 0U;
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	f36f 1304 	bfc	r3, #4, #1
 8001962:	6063      	str	r3, [r4, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	f36f 03c3 	bfc	r3, #3, #1
 800196a:	6063      	str	r3, [r4, #4]
  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 800196c:	2004      	movs	r0, #4
 800196e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001972:	4798      	blx	r3
	xmc_device.global_register->gintsts = clear.d32;
 8001974:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8001978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197c:	615a      	str	r2, [r3, #20]
}
 800197e:	e608      	b.n	8001592 <XMC_USBD_IRQHandler+0x9e>
          ep->inInUse = 0U;
 8001980:	f8dc 3004 	ldr.w	r3, [ip, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8001984:	2901      	cmp	r1, #1
          ep->inInUse = 0U;
 8001986:	f36f 03c3 	bfc	r3, #3, #1
 800198a:	f8cc 3004 	str.w	r3, [ip, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800198e:	d107      	bne.n	80019a0 <XMC_USBD_IRQHandler+0x4ac>
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8001990:	fa01 f000 	lsl.w	r0, r1, r0
 8001994:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 8001998:	ea21 0100 	bic.w	r1, r1, r0
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800199c:	f8c9 1034 	str.w	r1, [r9, #52]	; 0x34
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 80019a0:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80019a4:	2102      	movs	r1, #2
 80019a6:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 80019aa:	4798      	blx	r3
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80019ac:	9b01      	ldr	r3, [sp, #4]
 80019ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80019b2:	e72b      	b.n	800180c <XMC_USBD_IRQHandler+0x318>
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80019b4:	f10c 0e6a 	add.w	lr, ip, #106	; 0x6a
  byte_count = ep->xferLength - ep->xferCount;
 80019b8:	9a04      	ldr	r2, [sp, #16]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 80019ba:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 80019be:	f8de 7018 	ldr.w	r7, [lr, #24]
  byte_count = ep->xferLength - ep->xferCount;
 80019c2:	e9d2 2e0a 	ldrd	r2, lr, [r2, #40]	; 0x28
  if (!byte_count)
 80019c6:	ebb2 020e 	subs.w	r2, r2, lr
 80019ca:	9204      	str	r2, [sp, #16]
 80019cc:	d02d      	beq.n	8001a2a <XMC_USBD_IRQHandler+0x536>
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 80019ce:	3203      	adds	r2, #3
 80019d0:	b2bf      	uxth	r7, r7
 80019d2:	9706      	str	r7, [sp, #24]
 80019d4:	0897      	lsrs	r7, r2, #2
 80019d6:	9705      	str	r7, [sp, #20]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 80019d8:	9f06      	ldr	r7, [sp, #24]
 80019da:	ebb7 0f92 	cmp.w	r7, r2, lsr #2
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 80019de:	bf3c      	itt	cc
 80019e0:	00ba      	lslcc	r2, r7, #2
 80019e2:	e9cd 2704 	strdcc	r2, r7, [sp, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 80019e6:	9a05      	ldr	r2, [sp, #20]
 80019e8:	b352      	cbz	r2, 8001a40 <XMC_USBD_IRQHandler+0x54c>
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80019ea:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
      *fifo = *(uint32_t*)ep->xferBuffer;
 80019ee:	fb0a 4e00 	mla	lr, sl, r0, r4
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80019f2:	f854 702c 	ldr.w	r7, [r4, ip, lsl #2]
 80019f6:	9706      	str	r7, [sp, #24]
      *fifo = *(uint32_t*)ep->xferBuffer;
 80019f8:	f8de 2024 	ldr.w	r2, [lr, #36]	; 0x24
 80019fc:	9f05      	ldr	r7, [sp, #20]
 80019fe:	9005      	str	r0, [sp, #20]
 8001a00:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001a04:	46bc      	mov	ip, r7
 8001a06:	9806      	ldr	r0, [sp, #24]
 8001a08:	9f01      	ldr	r7, [sp, #4]
 8001a0a:	9307      	str	r3, [sp, #28]
 8001a0c:	f852 3b04 	ldr.w	r3, [r2], #4
 8001a10:	6003      	str	r3, [r0, #0]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8001a12:	4562      	cmp	r2, ip
 8001a14:	f8ce 2024 	str.w	r2, [lr, #36]	; 0x24
 8001a18:	d1f8      	bne.n	8001a0c <XMC_USBD_IRQHandler+0x518>
          ep->xferCount += bytes;
 8001a1a:	f8de 202c 	ldr.w	r2, [lr, #44]	; 0x2c
 8001a1e:	9701      	str	r7, [sp, #4]
 8001a20:	9f04      	ldr	r7, [sp, #16]
 8001a22:	9805      	ldr	r0, [sp, #20]
 8001a24:	9b07      	ldr	r3, [sp, #28]
 8001a26:	eb07 0e02 	add.w	lr, r7, r2
 8001a2a:	fb0a 4c00 	mla	ip, sl, r0, r4
          ep->xferBuffer += bytes;
 8001a2e:	9f04      	ldr	r7, [sp, #16]
 8001a30:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
          ep->xferCount += bytes;
 8001a34:	f8cc e02c 	str.w	lr, [ip, #44]	; 0x2c
          ep->xferBuffer += bytes;
 8001a38:	443a      	add	r2, r7
 8001a3a:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
 8001a3e:	e6d3      	b.n	80017e8 <XMC_USBD_IRQHandler+0x2f4>
          ep->xferCount += bytes;
 8001a40:	9a04      	ldr	r2, [sp, #16]
 8001a42:	4496      	add	lr, r2
 8001a44:	e7f1      	b.n	8001a2a <XMC_USBD_IRQHandler+0x536>
 8001a46:	bf00      	nop
 8001a48:	20000a24 	.word	0x20000a24
 8001a4c:	00100090 	.word	0x00100090
 8001a50:	001000a0 	.word	0x001000a0
 8001a54:	00100080 	.word	0x00100080
 8001a58:	00100040 	.word	0x00100040
 8001a5c:	00100050 	.word	0x00100050
 8001a60:	00100060 	.word	0x00100060
 8001a64:	00100070 	.word	0x00100070

08001a68 <XMC_USBD_Enable>:
{
 8001a68:	b508      	push	{r3, lr}
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <XMC_USBD_Enable+0x10>)
 8001a6c:	f000 fd98 	bl	80025a0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8001a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XMC_SCU_POWER_EnableUsb();
 8001a74:	f000 bfe8 	b.w	8002a48 <XMC_SCU_POWER_EnableUsb>
 8001a78:	20000080 	.word	0x20000080

08001a7c <XMC_USBD_Disable>:
{
 8001a7c:	b508      	push	{r3, lr}
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <XMC_USBD_Disable+0x10>)
 8001a80:	f000 fd82 	bl	8002588 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8001a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  XMC_SCU_POWER_DisableUsb();
 8001a88:	f000 bfe6 	b.w	8002a58 <XMC_SCU_POWER_DisableUsb>
 8001a8c:	20000080 	.word	0x20000080

08001a90 <XMC_USBD_ClearEvent>:
  switch(event)
 8001a90:	280d      	cmp	r0, #13
 8001a92:	d808      	bhi.n	8001aa6 <XMC_USBD_ClearEvent+0x16>
 8001a94:	e8df f000 	tbb	[pc, r0]
 8001a98:	0707073d 	.word	0x0707073d
 8001a9c:	0d140736 	.word	0x0d140736
 8001aa0:	28211b0d 	.word	0x28211b0d
 8001aa4:	2f07      	.short	0x2f07
 8001aa6:	2300      	movs	r3, #0
	xmc_device.global_register->gintsts = clear.d32;
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001aaa:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8001aae:	6153      	str	r3, [r2, #20]
}
 8001ab0:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001ab2:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001ab4:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001ab8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xmc_device.global_register->gintsts = clear.d32;
 8001abc:	6153      	str	r3, [r2, #20]
}
 8001abe:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001ac2:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001ac6:	f44f 6300 	mov.w	r3, #2048	; 0x800
	xmc_device.global_register->gintsts = clear.d32;
 8001aca:	6153      	str	r3, [r2, #20]
}
 8001acc:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001ad0:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001ad4:	2308      	movs	r3, #8
	xmc_device.global_register->gintsts = clear.d32;
 8001ad6:	6153      	str	r3, [r2, #20]
}
 8001ad8:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001adc:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	xmc_device.global_register->gintsts = clear.d32;
 8001ae4:	6153      	str	r3, [r2, #20]
}
 8001ae6:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001aea:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	xmc_device.global_register->gintsts = clear.d32;
 8001af2:	6153      	str	r3, [r2, #20]
}
 8001af4:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001af8:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001afc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	xmc_device.global_register->gintsts = clear.d32;
 8001b00:	6153      	str	r3, [r2, #20]
}
 8001b02:	4770      	bx	lr
	xmc_device.global_register->gintsts = clear.d32;
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <XMC_USBD_ClearEvent+0x88>)
 8001b06:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
	  break;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	xmc_device.global_register->gintsts = clear.d32;
 8001b0e:	6153      	str	r3, [r2, #20]
}
 8001b10:	4770      	bx	lr
  switch(event)
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	e7c7      	b.n	8001aa8 <XMC_USBD_ClearEvent+0x18>
 8001b18:	20000860 	.word	0x20000860

08001b1c <XMC_USBD_ClearEventINEP>:
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <XMC_USBD_ClearEventINEP+0xc>)
 8001b1e:	316a      	adds	r1, #106	; 0x6a
 8001b20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b24:	6098      	str	r0, [r3, #8]
}
 8001b26:	4770      	bx	lr
 8001b28:	20000860 	.word	0x20000860

08001b2c <XMC_USBD_ClearEventOUTEP>:
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <XMC_USBD_ClearEventOUTEP+0x10>)
 8001b2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001b32:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 8001b36:	6098      	str	r0, [r3, #8]
}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000860 	.word	0x20000860

08001b40 <XMC_USBD_EnableEventOUTEP>:
	xmc_device.device_register->doepmsk |= doepint.d32;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <XMC_USBD_EnableEventOUTEP+0x10>)
 8001b42:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001b46:	6953      	ldr	r3, [r2, #20]
 8001b48:	4318      	orrs	r0, r3
 8001b4a:	6150      	str	r0, [r2, #20]
}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000860 	.word	0x20000860

08001b54 <XMC_USBD_EnableEventINEP>:
	xmc_device.device_register->diepmsk |= diepint.d32;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <XMC_USBD_EnableEventINEP+0x10>)
 8001b56:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8001b5a:	6913      	ldr	r3, [r2, #16]
 8001b5c:	4318      	orrs	r0, r3
 8001b5e:	6110      	str	r0, [r2, #16]
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000860 	.word	0x20000860

08001b68 <CDC_Device_ConfigureEndpoints>:
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001b68:	2300      	movs	r3, #0

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8001b6a:	2202      	movs	r2, #2
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8001b6c:	2103      	movs	r1, #3
{
 8001b6e:	b510      	push	{r4, lr}
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 8001b70:	7481      	strb	r1, [r0, #18]
{
 8001b72:	4604      	mov	r4, r0
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8001b74:	6143      	str	r3, [r0, #20]
 8001b76:	6183      	str	r3, [r0, #24]
 8001b78:	61c3      	str	r3, [r0, #28]
	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 8001b7a:	7182      	strb	r2, [r0, #6]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8001b7c:	7302      	strb	r2, [r0, #12]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4410      	add	r0, r2
 8001b82:	f000 fb7d 	bl	8002280 <Endpoint_ConfigureEndpointTable>
 8001b86:	b908      	cbnz	r0, 8001b8c <CDC_Device_ConfigureEndpoints+0x24>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 8001b88:	2000      	movs	r0, #0
 8001b8a:	bd10      	pop	{r4, pc}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	f104 0008 	add.w	r0, r4, #8
 8001b92:	f000 fb75 	bl	8002280 <Endpoint_ConfigureEndpointTable>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d0f6      	beq.n	8001b88 <CDC_Device_ConfigureEndpoints+0x20>
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8001b9a:	f104 000e 	add.w	r0, r4, #14
 8001b9e:	2101      	movs	r1, #1
}
 8001ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 8001ba4:	f000 bb6c 	b.w	8002280 <Endpoint_ConfigureEndpointTable>

08001ba8 <CDC_Device_SendString>:
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <CDC_Device_SendString+0x3c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d117      	bne.n	8001be0 <CDC_Device_SendString+0x38>
 8001bb0:	6983      	ldr	r3, [r0, #24]
 8001bb2:	b1ab      	cbz	r3, 8001be0 <CDC_Device_SendString+0x38>
{
 8001bb4:	b510      	push	{r4, lr}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001bb6:	7883      	ldrb	r3, [r0, #2]
	 *  \param[in] Address Endpoint address to select.
	 */
	static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_SelectEndpoint(const uint8_t Address)
	{
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <CDC_Device_SendString+0x40>)
 8001bba:	460c      	mov	r4, r1
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f003 010f 	and.w	r1, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001bc6:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001bca:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
 8001bce:	f002 f877 	bl	8003cc0 <strlen>
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	b281      	uxth	r1, r0
 8001bd6:	4620      	mov	r0, r4
}
 8001bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
 8001bdc:	f001 baf6 	b.w	80031cc <Endpoint_Write_Stream_LE>
}
 8001be0:	2002      	movs	r0, #2
 8001be2:	4770      	bx	lr
 8001be4:	20000aa4 	.word	0x20000aa4
 8001be8:	20000520 	.word	0x20000520

08001bec <CDC_Device_SendData>:

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <CDC_Device_SendData+0x3c>)
 8001bee:	f893 c000 	ldrb.w	ip, [r3]
 8001bf2:	f1bc 0f04 	cmp.w	ip, #4
 8001bf6:	d114      	bne.n	8001c22 <CDC_Device_SendData+0x36>
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6981      	ldr	r1, [r0, #24]
 8001bfc:	b189      	cbz	r1, 8001c22 <CDC_Device_SendData+0x36>
{
 8001bfe:	b510      	push	{r4, lr}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001c00:	7881      	ldrb	r1, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c02:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <CDC_Device_SendData+0x40>)
 8001c04:	f001 0e0f 	and.w	lr, r1, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c08:	f021 0c7f 	bic.w	ip, r1, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c0c:	f884 e13c 	strb.w	lr, [r4, #316]	; 0x13c
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001c10:	4611      	mov	r1, r2
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c12:	f884 c13d 	strb.w	ip, [r4, #317]	; 0x13d
 8001c16:	4618      	mov	r0, r3
}
 8001c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f001 bad5 	b.w	80031cc <Endpoint_Write_Stream_LE>
}
 8001c22:	2002      	movs	r0, #2
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000aa4 	.word	0x20000aa4
 8001c2c:	20000520 	.word	0x20000520

08001c30 <CDC_Device_SendByte>:

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <CDC_Device_SendByte+0x44>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d11a      	bne.n	8001c6e <CDC_Device_SendByte+0x3e>
 8001c38:	6983      	ldr	r3, [r0, #24]
 8001c3a:	b1c3      	cbz	r3, 8001c6e <CDC_Device_SendByte+0x3e>
{
 8001c3c:	b510      	push	{r4, lr}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001c3e:	7883      	ldrb	r3, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <CDC_Device_SendByte+0x48>)
 8001c42:	460c      	mov	r4, r1
 8001c44:	f003 010f 	and.w	r1, r3, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c4c:	f882 113c 	strb.w	r1, [r2, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c50:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d

	if (!(Endpoint_IsReadWriteAllowed()))
 8001c54:	f000 faa0 	bl	8002198 <Endpoint_IsReadWriteAllowed>
 8001c58:	b920      	cbnz	r0, 8001c64 <CDC_Device_SendByte+0x34>
	{
		Endpoint_ClearIN();
 8001c5a:	f000 fa53 	bl	8002104 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8001c5e:	f000 f9d7 	bl	8002010 <Endpoint_WaitUntilReady>
 8001c62:	b918      	cbnz	r0, 8001c6c <CDC_Device_SendByte+0x3c>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
 8001c64:	4620      	mov	r0, r4
 8001c66:	f000 faaf 	bl	80021c8 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
 8001c6a:	2000      	movs	r0, #0
}
 8001c6c:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8001c6e:	2002      	movs	r0, #2
}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000aa4 	.word	0x20000aa4
 8001c78:	20000520 	.word	0x20000520

08001c7c <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <CDC_Device_Flush+0x64>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d122      	bne.n	8001cca <CDC_Device_Flush+0x4e>
 8001c84:	6983      	ldr	r3, [r0, #24]
 8001c86:	b303      	cbz	r3, 8001cca <CDC_Device_Flush+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001c88:	7882      	ldrb	r2, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c8a:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <CDC_Device_Flush+0x68>)
 8001c8c:	f002 000f 	and.w	r0, r2, #15
	 */
	static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint16_t Endpoint_BytesInEndpoint(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
		if (ep->Direction)
 8001c90:	232c      	movs	r3, #44	; 0x2c
 8001c92:	fb03 1300 	mla	r3, r3, r0, r1
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001c9a:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001c9e:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		if (ep->Direction)
 8001ca2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001ca6:	2a00      	cmp	r2, #0
			return ep->InBytesAvailable;
 8001ca8:	bfb4      	ite	lt
 8001caa:	8b9b      	ldrhlt	r3, [r3, #28]
		else
			return ep->OutBytesAvailable;
 8001cac:	899b      	ldrhge	r3, [r3, #12]

	if (!(Endpoint_BytesInEndpoint()))
 8001cae:	b90b      	cbnz	r3, 8001cb4 <CDC_Device_Flush+0x38>
	  return ENDPOINT_READYWAIT_NoError;
 8001cb0:	2000      	movs	r0, #0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 8001cb2:	4770      	bx	lr
{
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	b082      	sub	sp, #8
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
 8001cb8:	f000 fa6e 	bl	8002198 <Endpoint_IsReadWriteAllowed>
 8001cbc:	4604      	mov	r4, r0
	Endpoint_ClearIN();
 8001cbe:	f000 fa21 	bl	8002104 <Endpoint_ClearIN>
	if (BankFull)
 8001cc2:	b124      	cbz	r4, 8001cce <CDC_Device_Flush+0x52>
	  return ENDPOINT_READYWAIT_NoError;
 8001cc4:	2000      	movs	r0, #0
}
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd10      	pop	{r4, pc}
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 8001cca:	2002      	movs	r0, #2
 8001ccc:	4770      	bx	lr
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 8001cce:	f000 f99f 	bl	8002010 <Endpoint_WaitUntilReady>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d1f7      	bne.n	8001cc6 <CDC_Device_Flush+0x4a>
 8001cd6:	9001      	str	r0, [sp, #4]
		Endpoint_ClearIN();
 8001cd8:	f000 fa14 	bl	8002104 <Endpoint_ClearIN>
 8001cdc:	9801      	ldr	r0, [sp, #4]
 8001cde:	e7f2      	b.n	8001cc6 <CDC_Device_Flush+0x4a>
 8001ce0:	20000aa4 	.word	0x20000aa4
 8001ce4:	20000520 	.word	0x20000520

08001ce8 <CDC_Device_USBTask>:
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <CDC_Device_USBTask+0x38>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	2a04      	cmp	r2, #4
 8001cee:	d116      	bne.n	8001d1e <CDC_Device_USBTask+0x36>
 8001cf0:	6982      	ldr	r2, [r0, #24]
 8001cf2:	b1a2      	cbz	r2, 8001d1e <CDC_Device_USBTask+0x36>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
 8001cf4:	7882      	ldrb	r2, [r0, #2]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <CDC_Device_USBTask+0x3c>)
 8001cf8:	f002 010f 	and.w	r1, r2, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001cfc:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001d00:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d04:	222c      	movs	r2, #44	; 0x2c
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d06:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
		return ep->InInUse == 0 && ep->IsEnabled;
 8001d0a:	fb02 3301 	mla	r3, r2, r1, r3
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	06d2      	lsls	r2, r2, #27
 8001d12:	d404      	bmi.n	8001d1e <CDC_Device_USBTask+0x36>
 8001d14:	7a1b      	ldrb	r3, [r3, #8]
 8001d16:	079b      	lsls	r3, r3, #30
 8001d18:	d501      	bpl.n	8001d1e <CDC_Device_USBTask+0x36>
	  CDC_Device_Flush(CDCInterfaceInfo);
 8001d1a:	f7ff bfaf 	b.w	8001c7c <CDC_Device_Flush>
}
 8001d1e:	4770      	bx	lr
 8001d20:	20000aa4 	.word	0x20000aa4
 8001d24:	20000520 	.word	0x20000520

08001d28 <CDC_Device_BytesReceived>:

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <CDC_Device_BytesReceived+0x54>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d119      	bne.n	8001d64 <CDC_Device_BytesReceived+0x3c>
 8001d30:	6983      	ldr	r3, [r0, #24]
 8001d32:	b1bb      	cbz	r3, 8001d64 <CDC_Device_BytesReceived+0x3c>
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8001d34:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d36:	4912      	ldr	r1, [pc, #72]	; (8001d80 <CDC_Device_BytesReceived+0x58>)
 8001d38:	f002 000f 	and.w	r0, r2, #15
		return ep->IsOutRecieved;
 8001d3c:	232c      	movs	r3, #44	; 0x2c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		return ep->IsOutRecieved;
 8001d42:	fb03 1300 	mla	r3, r3, r0, r1
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d46:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d4a:	f881 213d 	strb.w	r2, [r1, #317]	; 0x13d
		return ep->IsOutRecieved;
 8001d4e:	689a      	ldr	r2, [r3, #8]

	if (Endpoint_IsOUTReceived())
 8001d50:	0692      	lsls	r2, r2, #26
 8001d52:	d507      	bpl.n	8001d64 <CDC_Device_BytesReceived+0x3c>
		if (ep->Direction)
 8001d54:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001d58:	2a00      	cmp	r2, #0
			return ep->InBytesAvailable;
 8001d5a:	bfb4      	ite	lt
 8001d5c:	8b98      	ldrhlt	r0, [r3, #28]
			return ep->OutBytesAvailable;
 8001d5e:	8998      	ldrhge	r0, [r3, #12]
	{
		if (!(Endpoint_BytesInEndpoint()))
 8001d60:	b110      	cbz	r0, 8001d68 <CDC_Device_BytesReceived+0x40>
	}
	else
	{
		return 0;
	}
}
 8001d62:	4770      	bx	lr
	  return 0;
 8001d64:	2000      	movs	r0, #0
 8001d66:	4770      	bx	lr
{
 8001d68:	b500      	push	{lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	9001      	str	r0, [sp, #4]
			Endpoint_ClearOUT();
 8001d6e:	f000 f99f 	bl	80020b0 <Endpoint_ClearOUT>
 8001d72:	9801      	ldr	r0, [sp, #4]
}
 8001d74:	b003      	add	sp, #12
 8001d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d7a:	bf00      	nop
 8001d7c:	20000aa4 	.word	0x20000aa4
 8001d80:	20000520 	.word	0x20000520

08001d84 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <CDC_Device_ReceiveByte+0xa4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d149      	bne.n	8001e20 <CDC_Device_ReceiveByte+0x9c>
 8001d8c:	6983      	ldr	r3, [r0, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d046      	beq.n	8001e20 <CDC_Device_ReceiveByte+0x9c>
{
 8001d92:	b510      	push	{r4, lr}
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
 8001d94:	7a02      	ldrb	r2, [r0, #8]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001d96:	4c25      	ldr	r4, [pc, #148]	; (8001e2c <CDC_Device_ReceiveByte+0xa8>)
 8001d98:	f002 000f 	and.w	r0, r2, #15
		return ep->IsOutRecieved;
 8001d9c:	232c      	movs	r3, #44	; 0x2c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001d9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
		return ep->IsOutRecieved;
 8001da2:	fb03 4300 	mla	r3, r3, r0, r4
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001da6:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001daa:	f884 213d 	strb.w	r2, [r4, #317]	; 0x13d
		return ep->IsOutRecieved;
 8001dae:	689a      	ldr	r2, [r3, #8]

	if (Endpoint_IsOUTReceived())
 8001db0:	0692      	lsls	r2, r2, #26
{
 8001db2:	b082      	sub	sp, #8
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001db4:	4601      	mov	r1, r0
	if (Endpoint_IsOUTReceived())
 8001db6:	d530      	bpl.n	8001e1a <CDC_Device_ReceiveByte+0x96>
		if (ep->Direction)
 8001db8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8001dbc:	2a00      	cmp	r2, #0
 8001dbe:	db22      	blt.n	8001e06 <CDC_Device_ReceiveByte+0x82>
	{
		if (Endpoint_BytesInEndpoint())
 8001dc0:	899b      	ldrh	r3, [r3, #12]
 8001dc2:	b943      	cbnz	r3, 8001dd6 <CDC_Device_ReceiveByte+0x52>
	int16_t ReceivedByte = -1;
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return ep->OutBytesAvailable;
 8001dc8:	232c      	movs	r3, #44	; 0x2c
 8001dca:	fb03 4401 	mla	r4, r3, r1, r4
 8001dce:	89a3      	ldrh	r3, [r4, #12]
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 8001dd0:	b19b      	cbz	r3, 8001dfa <CDC_Device_ReceiveByte+0x76>
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd10      	pop	{r4, pc}
		  ReceivedByte = Endpoint_Read_8();
 8001dd6:	f000 fa0d 	bl	80021f4 <Endpoint_Read_8>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001dda:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
		if (ep->Direction)
 8001dde:	232c      	movs	r3, #44	; 0x2c
 8001de0:	fb03 4301 	mla	r3, r3, r1, r4
 8001de4:	b200      	sxth	r0, r0
 8001de6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	daec      	bge.n	8001dc8 <CDC_Device_ReceiveByte+0x44>
			return ep->InBytesAvailable;
 8001dee:	232c      	movs	r3, #44	; 0x2c
 8001df0:	fb03 4401 	mla	r4, r3, r1, r4
 8001df4:	8ba3      	ldrh	r3, [r4, #28]
		if (!(Endpoint_BytesInEndpoint()))
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1eb      	bne.n	8001dd2 <CDC_Device_ReceiveByte+0x4e>
 8001dfa:	9001      	str	r0, [sp, #4]
		  Endpoint_ClearOUT();
 8001dfc:	f000 f958 	bl	80020b0 <Endpoint_ClearOUT>
 8001e00:	9801      	ldr	r0, [sp, #4]
}
 8001e02:	b002      	add	sp, #8
 8001e04:	bd10      	pop	{r4, pc}
		if (Endpoint_BytesInEndpoint())
 8001e06:	8b9b      	ldrh	r3, [r3, #28]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e4      	bne.n	8001dd6 <CDC_Device_ReceiveByte+0x52>
 8001e0c:	232c      	movs	r3, #44	; 0x2c
 8001e0e:	fb03 4401 	mla	r4, r3, r1, r4
	int16_t ReceivedByte = -1;
 8001e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e16:	8ba3      	ldrh	r3, [r4, #28]
 8001e18:	e7ed      	b.n	8001df6 <CDC_Device_ReceiveByte+0x72>
	  return -1;
 8001e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e1e:	e7d8      	b.n	8001dd2 <CDC_Device_ReceiveByte+0x4e>
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000aa4 	.word	0x20000aa4
 8001e2c:	20000520 	.word	0x20000520

08001e30 <CDC_Device_SendControlLineStateChange>:

void CDC_Device_SendControlLineStateChange(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <CDC_Device_SendControlLineStateChange+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d106      	bne.n	8001e46 <CDC_Device_SendControlLineStateChange+0x16>
{
 8001e38:	b530      	push	{r4, r5, lr}
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001e3a:	6983      	ldr	r3, [r0, #24]
{
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	4604      	mov	r4, r0
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 8001e40:	b913      	cbnz	r3, 8001e48 <CDC_Device_SendControlLineStateChange+0x18>
	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
	                         sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
	                         NULL);
	Endpoint_ClearIN();
}
 8001e42:	b003      	add	sp, #12
 8001e44:	bd30      	pop	{r4, r5, pc}
 8001e46:	4770      	bx	lr
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.NotificationEndpoint.Address);
 8001e48:	7b83      	ldrb	r3, [r0, #14]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001e4a:	4d10      	ldr	r5, [pc, #64]	; (8001e8c <CDC_Device_SendControlLineStateChange+0x5c>)
	USB_Request_Header_t Notification = (USB_Request_Header_t)
 8001e4c:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <CDC_Device_SendControlLineStateChange+0x60>)
 8001e4e:	f003 010f 	and.w	r1, r3, #15
 8001e52:	f885 113c 	strb.w	r1, [r5, #316]	; 0x13c
 8001e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e5a:	46ec      	mov	ip, sp
 8001e5c:	e88c 0003 	stmia.w	ip, {r0, r1}
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001e60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 8001e64:	4660      	mov	r0, ip
 8001e66:	2200      	movs	r2, #0
 8001e68:	2108      	movs	r1, #8
 8001e6a:	f885 313d 	strb.w	r3, [r5, #317]	; 0x13d
 8001e6e:	f001 f9ad 	bl	80031cc <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
 8001e72:	2200      	movs	r2, #0
 8001e74:	2102      	movs	r1, #2
 8001e76:	f104 0016 	add.w	r0, r4, #22
 8001e7a:	f001 f9a7 	bl	80031cc <Endpoint_Write_Stream_LE>
	Endpoint_ClearIN();
 8001e7e:	f000 f941 	bl	8002104 <Endpoint_ClearIN>
}
 8001e82:	b003      	add	sp, #12
 8001e84:	bd30      	pop	{r4, r5, pc}
 8001e86:	bf00      	nop
 8001e88:	20000aa4 	.word	0x20000aa4
 8001e8c:	20000520 	.word	0x20000520
 8001e90:	08003ef8 	.word	0x08003ef8

08001e94 <EVENT_CDC_Device_LineEncodingChanged>:
}
#endif

__WEAK void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <EVENT_CDC_Device_ControLineStateChanged>:
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <EVENT_CDC_Device_BreakSent>:
}

__WEAK void EVENT_CDC_Device_BreakSent(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
				                               const uint8_t Duration)
{
}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <CDC_Device_ProcessControlRequest>:
		return device.IsSetupRecieved;
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <CDC_Device_ProcessControlRequest+0x110>)
 8001ea2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	if (!(Endpoint_IsSETUPReceived()))
 8001ea6:	0792      	lsls	r2, r2, #30
 8001ea8:	d50f      	bpl.n	8001eca <CDC_Device_ProcessControlRequest+0x2a>
{
 8001eaa:	b510      	push	{r4, lr}
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 8001eac:	4a41      	ldr	r2, [pc, #260]	; (8001fb4 <CDC_Device_ProcessControlRequest+0x114>)
 8001eae:	7801      	ldrb	r1, [r0, #0]
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	8890      	ldrh	r0, [r2, #4]
 8001eb4:	4288      	cmp	r0, r1
 8001eb6:	d000      	beq.n	8001eba <CDC_Device_ProcessControlRequest+0x1a>
}
 8001eb8:	bd10      	pop	{r4, pc}
	switch (USB_ControlRequest.bRequest)
 8001eba:	7851      	ldrb	r1, [r2, #1]
 8001ebc:	3920      	subs	r1, #32
 8001ebe:	2903      	cmp	r1, #3
 8001ec0:	d8fa      	bhi.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
 8001ec2:	e8df f001 	tbb	[pc, r1]
 8001ec6:	284c      	.short	0x284c
 8001ec8:	0313      	.short	0x0313
 8001eca:	4770      	bx	lr
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001ecc:	7811      	ldrb	r1, [r2, #0]
 8001ece:	2921      	cmp	r1, #33	; 0x21
 8001ed0:	d1f2      	bne.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
		device.IsSetupRecieved = 0;
 8001ed2:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 8001ed6:	8851      	ldrh	r1, [r2, #2]
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f36f 0241 	bfc	r2, #1, #1
 8001ede:	b2c9      	uxtb	r1, r1
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 8001ee6:	f7ff ffd9 	bl	8001e9c <EVENT_CDC_Device_BreakSent>
}
 8001eea:	bd10      	pop	{r4, pc}
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001eec:	7811      	ldrb	r1, [r2, #0]
 8001eee:	2921      	cmp	r1, #33	; 0x21
 8001ef0:	d1e2      	bne.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
 8001ef2:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8001ef6:	f892 c002 	ldrb.w	ip, [r2, #2]
 8001efa:	78d2      	ldrb	r2, [r2, #3]
 8001efc:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8001f00:	460a      	mov	r2, r1
 8001f02:	f36f 0241 	bfc	r2, #1, #1
 8001f06:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8001f0a:	4620      	mov	r0, r4
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 8001f0c:	f8a4 c014 	strh.w	ip, [r4, #20]
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 8001f10:	f7ff ffc2 	bl	8001e98 <EVENT_CDC_Device_ControLineStateChanged>
}
 8001f14:	bd10      	pop	{r4, pc}
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	2aa1      	cmp	r2, #161	; 0xa1
 8001f1a:	d1cd      	bne.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
 8001f1c:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001f20:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		device.IsSetupRecieved = 0;
 8001f24:	f36f 0141 	bfc	r1, #1, #1
		return ep->InInUse == 0 && ep->IsEnabled;
 8001f28:	202c      	movs	r0, #44	; 0x2c
		device.IsSetupRecieved = 0;
 8001f2a:	f883 113e 	strb.w	r1, [r3, #318]	; 0x13e
		return ep->InInUse == 0 && ep->IsEnabled;
 8001f2e:	fb00 3302 	mla	r3, r0, r2, r3
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	06d0      	lsls	r0, r2, #27
 8001f36:	d4fc      	bmi.n	8001f32 <CDC_Device_ProcessControlRequest+0x92>
 8001f38:	7a1a      	ldrb	r2, [r3, #8]
 8001f3a:	0791      	lsls	r1, r2, #30
 8001f3c:	d5f9      	bpl.n	8001f32 <CDC_Device_ProcessControlRequest+0x92>
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 8001f3e:	69a0      	ldr	r0, [r4, #24]
 8001f40:	f000 f96e 	bl	8002220 <Endpoint_Write_32_LE>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8001f44:	7f20      	ldrb	r0, [r4, #28]
 8001f46:	f000 f93f 	bl	80021c8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8001f4a:	7f60      	ldrb	r0, [r4, #29]
 8001f4c:	f000 f93c 	bl	80021c8 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 8001f50:	7fa0      	ldrb	r0, [r4, #30]
 8001f52:	f000 f939 	bl	80021c8 <Endpoint_Write_8>
}
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Endpoint_ClearIN();
 8001f5a:	f000 b8d3 	b.w	8002104 <Endpoint_ClearIN>
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	2a21      	cmp	r2, #33	; 0x21
 8001f62:	d1a9      	bne.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
		device.IsSetupRecieved = 0;
 8001f64:	f893 113e 	ldrb.w	r1, [r3, #318]	; 0x13e
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8001f68:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
		device.IsSetupRecieved = 0;
 8001f6c:	f36f 0141 	bfc	r1, #1, #1
		return ep->IsOutRecieved;
 8001f70:	202c      	movs	r0, #44	; 0x2c
		device.IsSetupRecieved = 0;
 8001f72:	f883 113e 	strb.w	r1, [r3, #318]	; 0x13e
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 8001f76:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <CDC_Device_ProcessControlRequest+0x118>)
		return ep->IsOutRecieved;
 8001f78:	fb00 3302 	mla	r3, r0, r2, r3
	}
 8001f7c:	e002      	b.n	8001f84 <CDC_Device_ProcessControlRequest+0xe4>
 8001f7e:	780a      	ldrb	r2, [r1, #0]
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d099      	beq.n	8001eb8 <CDC_Device_ProcessControlRequest+0x18>
		return ep->IsOutRecieved;
 8001f84:	689a      	ldr	r2, [r3, #8]
				while (!(Endpoint_IsOUTReceived()))
 8001f86:	0692      	lsls	r2, r2, #26
 8001f88:	d5f9      	bpl.n	8001f7e <CDC_Device_ProcessControlRequest+0xde>
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 8001f8a:	f000 f95f 	bl	800224c <Endpoint_Read_32_LE>
 8001f8e:	61a0      	str	r0, [r4, #24]
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8001f90:	f000 f930 	bl	80021f4 <Endpoint_Read_8>
 8001f94:	7720      	strb	r0, [r4, #28]
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 8001f96:	f000 f92d 	bl	80021f4 <Endpoint_Read_8>
 8001f9a:	7760      	strb	r0, [r4, #29]
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 8001f9c:	f000 f92a 	bl	80021f4 <Endpoint_Read_8>
 8001fa0:	77a0      	strb	r0, [r4, #30]
				Endpoint_ClearOUT();
 8001fa2:	f000 f885 	bl	80020b0 <Endpoint_ClearOUT>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff ff74 	bl	8001e94 <EVENT_CDC_Device_LineEncodingChanged>
}
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000520 	.word	0x20000520
 8001fb4:	20000aa8 	.word	0x20000aa8
 8001fb8:	20000aa4 	.word	0x20000aa4

08001fbc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 8001fbc:	b538      	push	{r3, r4, r5, lr}
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <USB_USBTask+0x4c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b1ab      	cbz	r3, 8001ff0 <USB_USBTask+0x34>
	 *  \return Index of the currently selected endpoint.
	 */
	static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetCurrentEndpoint(void)
	{
		return device.CurrentDirection | device.CurrentEndpoint;
 8001fc4:	4c11      	ldr	r4, [pc, #68]	; (800200c <USB_USBTask+0x50>)
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 8001fc6:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
		return device.CurrentDirection | device.CurrentEndpoint;
 8001fca:	f894 513d 	ldrb.w	r5, [r4, #317]	; 0x13d
 8001fce:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001fd2:	2100      	movs	r1, #0

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8001fd4:	079b      	lsls	r3, r3, #30
 8001fd6:	f8a4 113c 	strh.w	r1, [r4, #316]	; 0x13c
		return device.CurrentDirection | device.CurrentEndpoint;
 8001fda:	ea45 0502 	orr.w	r5, r5, r2
 8001fde:	d408      	bmi.n	8001ff2 <USB_USBTask+0x36>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001fe0:	f005 030f 	and.w	r3, r5, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001fe4:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001fe8:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001fec:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
}
 8001ff0:	bd38      	pop	{r3, r4, r5, pc}
	  USB_Device_ProcessControlRequest();
 8001ff2:	f7fe fa77 	bl	80004e4 <USB_Device_ProcessControlRequest>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001ff6:	f005 030f 	and.w	r3, r5, #15
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8001ffa:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8001ffe:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002002:	f884 513d 	strb.w	r5, [r4, #317]	; 0x13d
 8002006:	e7f3      	b.n	8001ff0 <USB_USBTask+0x34>
 8002008:	20000aa4 	.word	0x20000aa4
 800200c:	20000520 	.word	0x20000520

08002010 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002014:	4c24      	ldr	r4, [pc, #144]	; (80020a8 <Endpoint_WaitUntilReady+0x98>)
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8002016:	4e25      	ldr	r6, [pc, #148]	; (80020ac <Endpoint_WaitUntilReady+0x9c>)
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	4798      	blx	r3
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800201e:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 8002022:	272c      	movs	r7, #44	; 0x2c
 8002024:	fb07 4203 	mla	r2, r7, r3, r4
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002028:	2564      	movs	r5, #100	; 0x64
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 800202a:	f992 1004 	ldrsb.w	r1, [r2, #4]
 800202e:	2900      	cmp	r1, #0
 8002030:	4680      	mov	r8, r0
 8002032:	db1f      	blt.n	8002074 <Endpoint_WaitUntilReady+0x64>
		return ep->IsOutRecieved;
 8002034:	6892      	ldr	r2, [r2, #8]
			if (Endpoint_IsOUTReceived())
 8002036:	0692      	lsls	r2, r2, #26
 8002038:	d432      	bmi.n	80020a0 <Endpoint_WaitUntilReady+0x90>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 800203a:	7832      	ldrb	r2, [r6, #0]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800203c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002040:	b312      	cbz	r2, 8002088 <Endpoint_WaitUntilReady+0x78>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8002042:	2905      	cmp	r1, #5
 8002044:	d023      	beq.n	800208e <Endpoint_WaitUntilReady+0x7e>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 8002046:	fb07 4303 	mla	r3, r7, r3, r4
 800204a:	7a1b      	ldrb	r3, [r3, #8]
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 800204c:	075b      	lsls	r3, r3, #29
 800204e:	d421      	bmi.n	8002094 <Endpoint_WaitUntilReady+0x84>
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	4798      	blx	r3
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8002056:	4580      	cmp	r8, r0
 8002058:	d003      	beq.n	8002062 <Endpoint_WaitUntilReady+0x52>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 800205a:	1e6b      	subs	r3, r5, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	b1e5      	cbz	r5, 800209a <Endpoint_WaitUntilReady+0x8a>
 8002060:	461d      	mov	r5, r3
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002062:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		return ep->Address & ENDPOINT_DIR_MASK;
 8002066:	fb07 4203 	mla	r2, r7, r3, r4
 800206a:	4680      	mov	r8, r0
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 800206c:	f992 1004 	ldrsb.w	r1, [r2, #4]
 8002070:	2900      	cmp	r1, #0
 8002072:	dadf      	bge.n	8002034 <Endpoint_WaitUntilReady+0x24>
		return ep->InInUse == 0 && ep->IsEnabled;
 8002074:	6891      	ldr	r1, [r2, #8]
 8002076:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800207a:	06c9      	lsls	r1, r1, #27
 800207c:	d4dd      	bmi.n	800203a <Endpoint_WaitUntilReady+0x2a>
 800207e:	7a12      	ldrb	r2, [r2, #8]
 8002080:	0791      	lsls	r1, r2, #30
 8002082:	d5da      	bpl.n	800203a <Endpoint_WaitUntilReady+0x2a>
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8002088:	2002      	movs	r0, #2
}
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_BusSuspended;
 800208e:	2003      	movs	r0, #3
}
 8002090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8002094:	2001      	movs	r0, #1
}
 8002096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_Timeout;
 800209a:	2004      	movs	r0, #4
}
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  return ENDPOINT_READYWAIT_NoError;
 80020a0:	2000      	movs	r0, #0
}
 80020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020a6:	bf00      	nop
 80020a8:	20000520 	.word	0x20000520
 80020ac:	20000aa4 	.word	0x20000aa4

080020b0 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 80020b0:	b570      	push	{r4, r5, r6, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80020b2:	4d13      	ldr	r5, [pc, #76]	; (8002100 <Endpoint_ClearOUT+0x50>)
 80020b4:	f895 413c 	ldrb.w	r4, [r5, #316]	; 0x13c
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 80020b8:	232c      	movs	r3, #44	; 0x2c
 80020ba:	fb03 5404 	mla	r4, r3, r4, r5
 80020be:	7a23      	ldrb	r3, [r4, #8]
 80020c0:	079a      	lsls	r2, r3, #30
 80020c2:	d51b      	bpl.n	80020fc <Endpoint_ClearOUT+0x4c>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	69a2      	ldr	r2, [r4, #24]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	6961      	ldr	r1, [r4, #20]
 80020cc:	7920      	ldrb	r0, [r4, #4]
 80020ce:	4798      	blx	r3
	ep->OutOffset = 0;
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 80020d0:	68a3      	ldr	r3, [r4, #8]
	ep->OutOffset = 0;
 80020d2:	2200      	movs	r2, #0
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 80020d4:	071b      	lsls	r3, r3, #28
	ep->OutOffset = 0;
 80020d6:	e9c4 0203 	strd	r0, r2, [r4, #12]
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 80020da:	d40f      	bmi.n	80020fc <Endpoint_ClearOUT+0x4c>
 80020dc:	b970      	cbnz	r0, 80020fc <Endpoint_ClearOUT+0x4c>
		ep->OutInUse = true;
 80020de:	8923      	ldrh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
		device.Driver->EndpointReadStart(ep->Address,
 80020e0:	69a1      	ldr	r1, [r4, #24]
		ep->OutInUse = true;
 80020e2:	f043 0308 	orr.w	r3, r3, #8
 80020e6:	8123      	strh	r3, [r4, #8]
		ep->IsOutRecieved = 0;
 80020e8:	8923      	ldrh	r3, [r4, #8]
 80020ea:	f360 1345 	bfi	r3, r0, #5, #1
 80020ee:	8123      	strh	r3, [r4, #8]
		device.Driver->EndpointReadStart(ep->Address,
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	7920      	ldrb	r0, [r4, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				ep->OutBufferLength);
	}
}
 80020f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		device.Driver->EndpointReadStart(ep->Address,
 80020fa:	4718      	bx	r3
}
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	bf00      	nop
 8002100:	20000520 	.word	0x20000520

08002104 <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002106:	4d21      	ldr	r5, [pc, #132]	; (800218c <Endpoint_ClearIN+0x88>)
 8002108:	f895 413c 	ldrb.w	r4, [r5, #316]	; 0x13c
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 800210c:	232c      	movs	r3, #44	; 0x2c
 800210e:	fb03 5404 	mla	r4, r3, r4, r5
 8002112:	68a3      	ldr	r3, [r4, #8]
 8002114:	06d8      	lsls	r0, r3, #27
 8002116:	d426      	bmi.n	8002166 <Endpoint_ClearIN+0x62>
 8002118:	7a23      	ldrb	r3, [r4, #8]
 800211a:	0799      	lsls	r1, r3, #30
 800211c:	d523      	bpl.n	8002166 <Endpoint_ClearIN+0x62>
		return;
	ep->InInUse = true;
 800211e:	8923      	ldrh	r3, [r4, #8]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002120:	4e1b      	ldr	r6, [pc, #108]	; (8002190 <Endpoint_ClearIN+0x8c>)
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 8002122:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
	ep->InInUse = true;
 8002126:	f043 0310 	orr.w	r3, r3, #16
 800212a:	8123      	strh	r3, [r4, #8]
 800212c:	f44f 6700 	mov.w	r7, #2048	; 0x800
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
 8002130:	2300      	movs	r3, #0
	ep->InDataBuffer = ep->InBuffer;
 8002132:	62e1      	str	r1, [r4, #44]	; 0x2c
	ep->InDataLeft = ep->InBytesAvailable;
 8002134:	62a2      	str	r2, [r4, #40]	; 0x28
	ep->InBytesAvailable = 0;
 8002136:	61e3      	str	r3, [r4, #28]
 8002138:	f8c6 708c 	str.w	r7, [r6, #140]	; 0x8c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800213c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002140:	f3bf 8f6f 	isb	sy
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	7920      	ldrb	r0, [r4, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800214e:	4798      	blx	r3
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
	ep->InDataLeft -= data_count;
 8002150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	ep->InDataBuffer += data_count;
 8002152:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002154:	4401      	add	r1, r0
	ep->InDataLeft -= data_count;
 8002156:	1a18      	subs	r0, r3, r0
	ep->InDataBuffer += data_count;
 8002158:	62e1      	str	r1, [r4, #44]	; 0x2c
	ep->InDataLeft -= data_count;
 800215a:	62a0      	str	r0, [r4, #40]	; 0x28
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800215c:	60f7      	str	r7, [r6, #12]
	NVIC_EnableIRQ(USB0_0_IRQn);
	if((zlp_flag == true) && (ep->Number != 0))
 800215e:	4e0d      	ldr	r6, [pc, #52]	; (8002194 <Endpoint_ClearIN+0x90>)
 8002160:	7833      	ldrb	r3, [r6, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d000      	beq.n	8002168 <Endpoint_ClearIN+0x64>
	  ep->InInUse = true;
	  device.Driver->EndpointWrite(ep->Address,
	  			ep->InDataBuffer,0);
	  zlp_flag = false;
	}
}
 8002166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if((zlp_flag == true) && (ep->Number != 0))
 8002168:	7920      	ldrb	r0, [r4, #4]
 800216a:	0702      	lsls	r2, r0, #28
 800216c:	d0fb      	beq.n	8002166 <Endpoint_ClearIN+0x62>
	  while(ep->InInUse)
 800216e:	68a3      	ldr	r3, [r4, #8]
 8002170:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8002174:	06db      	lsls	r3, r3, #27
 8002176:	d4fa      	bmi.n	800216e <Endpoint_ClearIN+0x6a>
	  ep->InInUse = true;
 8002178:	8923      	ldrh	r3, [r4, #8]
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	8123      	strh	r3, [r4, #8]
	  device.Driver->EndpointWrite(ep->Address,
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	463a      	mov	r2, r7
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4798      	blx	r3
	  zlp_flag = false;
 8002188:	7037      	strb	r7, [r6, #0]
}
 800218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218c:	20000520 	.word	0x20000520
 8002190:	e000e100 	.word	0xe000e100
 8002194:	20000b34 	.word	0x20000b34

08002198 <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <Endpoint_IsReadWriteAllowed+0x2c>)
 800219a:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Retval = false;

	if(EndPoint->Direction)
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 3302 	mla	r3, r1, r2, r3
 80021a4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	db04      	blt.n	80021b6 <Endpoint_IsReadWriteAllowed+0x1e>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 80021ac:	68d8      	ldr	r0, [r3, #12]
 80021ae:	3800      	subs	r0, #0
 80021b0:	bf18      	it	ne
 80021b2:	2001      	movne	r0, #1
	}
	return Retval;
}
 80021b4:	4770      	bx	lr
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 80021b6:	69d8      	ldr	r0, [r3, #28]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	4298      	cmp	r0, r3
 80021bc:	bf2c      	ite	cs
 80021be:	2000      	movcs	r0, #0
 80021c0:	2001      	movcc	r0, #1
 80021c2:	4770      	bx	lr
 80021c4:	20000520 	.word	0x20000520

080021c8 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80021c8:	4909      	ldr	r1, [pc, #36]	; (80021f0 <Endpoint_Write_8+0x28>)
 80021ca:	f891 c13c 	ldrb.w	ip, [r1, #316]	; 0x13c
	bool Success = false;

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 80021ce:	222c      	movs	r2, #44	; 0x2c
 80021d0:	fb02 120c 	mla	r2, r2, ip, r1
 80021d4:	69d3      	ldr	r3, [r2, #28]
 80021d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021d8:	4293      	cmp	r3, r2
 80021da:	d2fd      	bcs.n	80021d8 <Endpoint_Write_8+0x10>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 80021dc:	222c      	movs	r2, #44	; 0x2c
 80021de:	fb02 110c 	mla	r1, r2, ip, r1
 80021e2:	6a0a      	ldr	r2, [r1, #32]
 80021e4:	54d0      	strb	r0, [r2, r3]
	      EndPoint->InBytesAvailable++;
 80021e6:	69cb      	ldr	r3, [r1, #28]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61cb      	str	r3, [r1, #28]

	      Success = true;
	    }
	  }while(!Success);
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000520 	.word	0x20000520

080021f4 <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <Endpoint_Read_8+0x28>)
 80021f6:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
	bool Success = false;
	uint8_t data = 0;
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 3302 	mla	r3, r1, r2, r3
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	b152      	cbz	r2, 800221a <Endpoint_Read_8+0x26>
uint8_t Endpoint_Read_8(void) {
 8002204:	b410      	push	{r4}
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8002206:	e9d3 1004 	ldrd	r1, r0, [r3, #16]
          EndPoint->OutOffset++;
          EndPoint->OutBytesAvailable--;
 800220a:	3a01      	subs	r2, #1
          EndPoint->OutOffset++;
 800220c:	1c4c      	adds	r4, r1, #1
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 800220e:	5c40      	ldrb	r0, [r0, r1]
          EndPoint->OutBytesAvailable--;
 8002210:	e9c3 2403 	strd	r2, r4, [r3, #12]
		  Success = true;
		}
	  }while(!Success);
	 return data;
}
 8002214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	e7fe      	b.n	800221a <Endpoint_Read_8+0x26>
 800221c:	20000520 	.word	0x20000520

08002220 <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <Endpoint_Write_32_LE+0x28>)
 8002222:	f891 c13c 	ldrb.w	ip, [r1, #316]	; 0x13c
	bool Success = false;

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8002226:	232c      	movs	r3, #44	; 0x2c
 8002228:	fb03 130c 	mla	r3, r3, ip, r1
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	3b03      	subs	r3, #3
 8002232:	429a      	cmp	r2, r3
 8002234:	d2fd      	bcs.n	8002232 <Endpoint_Write_32_LE+0x12>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 8002236:	232c      	movs	r3, #44	; 0x2c
 8002238:	fb03 110c 	mla	r1, r3, ip, r1
 800223c:	6a0b      	ldr	r3, [r1, #32]
 800223e:	5098      	str	r0, [r3, r2]
			EndPoint->InBytesAvailable+=4;
 8002240:	69cb      	ldr	r3, [r1, #28]
 8002242:	3304      	adds	r3, #4
 8002244:	61cb      	str	r3, [r1, #28]

			Success = true;
		}
	}while(!Success);
}
 8002246:	4770      	bx	lr
 8002248:	20000520 	.word	0x20000520

0800224c <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 800224c:	b410      	push	{r4}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <Endpoint_Read_32_LE+0x30>)
 8002250:	f893 113c 	ldrb.w	r1, [r3, #316]	; 0x13c
	bool Success = false;
	uint32_t data = 0;

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8002254:	222c      	movs	r2, #44	; 0x2c
 8002256:	fb02 3201 	mla	r2, r2, r1, r3
 800225a:	68d2      	ldr	r2, [r2, #12]
 800225c:	2a03      	cmp	r2, #3
 800225e:	d9fd      	bls.n	800225c <Endpoint_Read_32_LE+0x10>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8002260:	202c      	movs	r0, #44	; 0x2c
 8002262:	fb00 3301 	mla	r3, r0, r1, r3
 8002266:	e9d3 1004 	ldrd	r1, r0, [r3, #16]
			EndPoint->OutOffset+=4;
			EndPoint->OutBytesAvailable-=4;
 800226a:	3a04      	subs	r2, #4
			EndPoint->OutOffset+=4;
 800226c:	1d0c      	adds	r4, r1, #4
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 800226e:	5840      	ldr	r0, [r0, r1]
			EndPoint->OutBytesAvailable-=4;
 8002270:	e9c3 2403 	strd	r2, r4, [r3, #12]

			Success = true;
		}
	} while(!Success);
	return data;
}
 8002274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000520 	.word	0x20000520

08002280 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8002280:	2900      	cmp	r1, #0
 8002282:	d037      	beq.n	80022f4 <Endpoint_ConfigureEndpointTable+0x74>
 8002284:	3901      	subs	r1, #1
			                                     const uint8_t Entries) {
 8002286:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800228a:	b2c9      	uxtb	r1, r1
 800228c:	1d83      	adds	r3, r0, #6
 800228e:	2506      	movs	r5, #6
 8002290:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80022fc <Endpoint_ConfigureEndpointTable+0x7c>
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
			return false;
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
		device.Endpoints[Number].IsConfigured = 1;
 8002294:	4f18      	ldr	r7, [pc, #96]	; (80022f8 <Endpoint_ConfigureEndpointTable+0x78>)
 8002296:	4604      	mov	r4, r0
 8002298:	fb15 3501 	smlabb	r5, r5, r1, r3
		device.Endpoints[Number].Address = Table[i].Address;
 800229c:	262c      	movs	r6, #44	; 0x2c
 800229e:	e016      	b.n	80022ce <Endpoint_ConfigureEndpointTable+0x4e>
		device.Endpoints[Number].IsConfigured = 1;
 80022a0:	8863      	ldrh	r3, [r4, #2]
 80022a2:	8911      	ldrh	r1, [r2, #8]
		device.Endpoints[Number].Address = Table[i].Address;
 80022a4:	7820      	ldrb	r0, [r4, #0]
 80022a6:	7110      	strb	r0, [r2, #4]
		device.Endpoints[Number].IsConfigured = 1;
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	f403 53fe 	and.w	r3, r3, #8128	; 0x1fc0
 80022ae:	f043 0303 	orr.w	r3, r3, #3
 80022b2:	4039      	ands	r1, r7
 80022b4:	430b      	orrs	r3, r1
 80022b6:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 80022b8:	0603      	lsls	r3, r0, #24
	for (i=0;i<Entries;i++) {
 80022ba:	f104 0406 	add.w	r4, r4, #6
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 80022be:	d404      	bmi.n	80022ca <Endpoint_ConfigureEndpointTable+0x4a>
			device.Driver->EndpointReadStart(Table[i].Address,
 80022c0:	f8d8 3000 	ldr.w	r3, [r8]
 80022c4:	6991      	ldr	r1, [r2, #24]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	4798      	blx	r3
	for (i=0;i<Entries;i++) {
 80022ca:	42ac      	cmp	r4, r5
 80022cc:	d00f      	beq.n	80022ee <Endpoint_ConfigureEndpointTable+0x6e>
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 80022ce:	f8d8 3000 	ldr.w	r3, [r8]
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 80022d2:	7820      	ldrb	r0, [r4, #0]
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 80022d4:	8862      	ldrh	r2, [r4, #2]
 80022d6:	7921      	ldrb	r1, [r4, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 80022da:	f000 090f 	and.w	r9, r0, #15
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 80022de:	4798      	blx	r3
		device.Endpoints[Number].Address = Table[i].Address;
 80022e0:	fb06 8209 	mla	r2, r6, r9, r8
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d0db      	beq.n	80022a0 <Endpoint_ConfigureEndpointTable+0x20>
			return false;
 80022e8:	2000      	movs	r0, #0
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
}
 80022ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return true;
 80022ee:	2001      	movs	r0, #1
}
 80022f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return true;
 80022f4:	2001      	movs	r0, #1
}
 80022f6:	4770      	bx	lr
 80022f8:	ffffe03c 	.word	0xffffe03c
 80022fc:	20000520 	.word	0x20000520

08002300 <XMC_SCU_INTERRUPT_EnableEvent>:
}

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8002300:	4a02      	ldr	r2, [pc, #8]	; (800230c <XMC_SCU_INTERRUPT_EnableEvent+0xc>)
 8002302:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8002304:	4318      	orrs	r0, r3
 8002306:	67d0      	str	r0, [r2, #124]	; 0x7c
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	50004000 	.word	0x50004000

08002310 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8002310:	4a02      	ldr	r2, [pc, #8]	; (800231c <XMC_SCU_INTERRUPT_DisableEvent+0xc>)
 8002312:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8002314:	ea23 0000 	bic.w	r0, r3, r0
 8002318:	67d0      	str	r0, [r2, #124]	; 0x7c
}
 800231a:	4770      	bx	lr
 800231c:	50004000 	.word	0x50004000

08002320 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 8002320:	4a03      	ldr	r2, [pc, #12]	; (8002330 <XMC_SCU_INTERRUPT_TriggerEvent+0x10>)
 8002322:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002326:	4318      	orrs	r0, r3
 8002328:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	50004000 	.word	0x50004000

08002334 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  return (SCU_INTERRUPT->SRRAW);
 8002334:	4b01      	ldr	r3, [pc, #4]	; (800233c <XMC_SCU_INTERUPT_GetEventStatus+0x8>)
 8002336:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	50004000 	.word	0x50004000

08002340 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 8002342:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 8002346:	4770      	bx	lr
 8002348:	50004000 	.word	0x50004000

0800234c <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <XMC_SCU_GetBootMode+0xc>)
 800234e:	6918      	ldr	r0, [r3, #16]
}
 8002350:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	50004000 	.word	0x50004000

0800235c <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 800235c:	4b01      	ldr	r3, [pc, #4]	; (8002364 <XMC_SCU_SetBootMode+0x8>)
 800235e:	6118      	str	r0, [r3, #16]
}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	50004000 	.word	0x50004000

08002368 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
  return (SCU_GENERAL->GPR[index]);
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <XMC_SCU_ReadGPR+0xc>)
 800236a:	0080      	lsls	r0, r0, #2
 800236c:	4403      	add	r3, r0
 800236e:	6858      	ldr	r0, [r3, #4]
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	50004028 	.word	0x50004028

08002378 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
  SCU_GENERAL->GPR[index] = data;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <XMC_SCU_WriteGPR+0xc>)
 800237a:	0080      	lsls	r0, r0, #2
 800237c:	4403      	add	r3, r0
 800237e:	6059      	str	r1, [r3, #4]
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	50004028 	.word	0x50004028

08002388 <XMC_SCU_EnableOutOfRangeComparator>:
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8002388:	0080      	lsls	r0, r0, #2
 800238a:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 800238e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8002392:	2301      	movs	r3, #1
 8002394:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8002398:	fa03 f101 	lsl.w	r1, r3, r1
 800239c:	4311      	orrs	r1, r2
 800239e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
}
 80023a2:	4770      	bx	lr

080023a4 <XMC_SCU_DisableOutOfRangeComparator>:
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 80023a4:	0080      	lsls	r0, r0, #2
 80023a6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
 80023aa:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 80023ae:	2201      	movs	r2, #1
 80023b0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80023b4:	fa02 f101 	lsl.w	r1, r2, r1
 80023b8:	ea23 0301 	bic.w	r3, r3, r1
 80023bc:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop

080023c4 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 80023c4:	02c9      	lsls	r1, r1, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <XMC_SCU_CalibrateTemperatureSensor+0x14>)
 80023c8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 80023cc:	f441 0108 	orr.w	r1, r1, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80023d0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	50004000 	.word	0x50004000

080023dc <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 80023dc:	4a03      	ldr	r2, [pc, #12]	; (80023ec <XMC_SCU_EnableTemperatureSensor+0x10>)
 80023de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80023ea:	4770      	bx	lr
 80023ec:	50004000 	.word	0x50004000

080023f0 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <XMC_SCU_DisableTemperatureSensor+0x10>)
 80023f2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80023fe:	4770      	bx	lr
 8002400:	50004000 	.word	0x50004000

08002404 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <XMC_SCU_IsTemperatureSensorEnabled+0x10>)
 8002406:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 800240a:	43c0      	mvns	r0, r0
}
 800240c:	f000 0001 	and.w	r0, r0, #1
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	50004000 	.word	0x50004000

08002418 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <XMC_SCU_IsTemperatureSensorReady+0xc>)
 800241a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 800241e:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002422:	4770      	bx	lr
 8002424:	50004000 	.word	0x50004000

08002428 <XMC_SCU_StartTemperatureMeasurement>:
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <XMC_SCU_StartTemperatureMeasurement+0x24>)
  {
    status = XMC_SCU_STATUS_BUSY;
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <XMC_SCU_StartTemperatureMeasurement+0x24>)
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 800242c:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
}

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8002434:	041b      	lsls	r3, r3, #16
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002436:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800243a:	f043 0302 	orr.w	r3, r3, #2
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800243e:	bf54      	ite	pl
 8002440:	f000 0001 	andpl.w	r0, r0, #1
    status = XMC_SCU_STATUS_BUSY;
 8002444:	2002      	movmi	r0, #2
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8002446:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800244a:	4770      	bx	lr
 800244c:	50004000 	.word	0x50004000

08002450 <XMC_SCU_GetTemperatureMeasurement>:
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <XMC_SCU_GetTemperatureMeasurement+0x18>)
 8002452:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8002456:	07d2      	lsls	r2, r2, #31
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 8002458:	bf5a      	itte	pl
 800245a:	f8d3 0090 	ldrpl.w	r0, [r3, #144]	; 0x90
 800245e:	f3c0 0009 	ubfxpl	r0, r0, #0, #10
    temperature = 0x7FFFFFFFUL;
 8002462:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
}
 8002466:	4770      	bx	lr
 8002468:	50004000 	.word	0x50004000

0800246c <XMC_SCU_IsTemperatureSensorBusy>:
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <XMC_SCU_IsTemperatureSensorBusy+0xc>)
 800246e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 8002472:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8002476:	4770      	bx	lr
 8002478:	50004000 	.word	0x50004000

0800247c <XMC_SCU_WriteToRetentionMemory>:
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800247c:	0400      	lsls	r0, r0, #16
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 800247e:	4a07      	ldr	r2, [pc, #28]	; (800249c <XMC_SCU_WriteToRetentionMemory+0x20>)
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8002480:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8002484:	f040 0001 	orr.w	r0, r0, #1
  SCU_GENERAL->RMDATA = data;
 8002488:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800248c:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8002490:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002494:	049b      	lsls	r3, r3, #18
 8002496:	d4fb      	bmi.n	8002490 <XMC_SCU_WriteToRetentionMemory+0x14>
  {
  }
}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	50004000 	.word	0x50004000

080024a0 <XMC_SCU_ReadFromRetentionMemory>:
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80024a0:	4a06      	ldr	r2, [pc, #24]	; (80024bc <XMC_SCU_ReadFromRetentionMemory+0x1c>)
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80024a2:	0400      	lsls	r0, r0, #16
 80024a4:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
  SCU_GENERAL->RMACR = rmacr;
 80024a8:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80024ac:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80024b0:	049b      	lsls	r3, r3, #18
 80024b2:	d4fb      	bmi.n	80024ac <XMC_SCU_ReadFromRetentionMemory+0xc>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80024b4:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	50004000 	.word	0x50004000

080024c0 <XMC_SCU_TRAP_Enable>:
}

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80024c0:	4a02      	ldr	r2, [pc, #8]	; (80024cc <XMC_SCU_TRAP_Enable+0xc>)
 80024c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80024c4:	ea23 0000 	bic.w	r0, r3, r0
 80024c8:	6690      	str	r0, [r2, #104]	; 0x68
}
 80024ca:	4770      	bx	lr
 80024cc:	50004100 	.word	0x50004100

080024d0 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80024d0:	4a02      	ldr	r2, [pc, #8]	; (80024dc <XMC_SCU_TRAP_Disable+0xc>)
 80024d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80024d4:	4318      	orrs	r0, r3
 80024d6:	6690      	str	r0, [r2, #104]	; 0x68
}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	50004100 	.word	0x50004100

080024e0 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
  return (SCU_TRAP->TRAPRAW);
 80024e0:	4b01      	ldr	r3, [pc, #4]	; (80024e8 <XMC_SCU_TRAP_GetStatus+0x8>)
 80024e2:	6e58      	ldr	r0, [r3, #100]	; 0x64
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	50004100 	.word	0x50004100

080024ec <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <XMC_SCU_TRAP_Trigger+0x8>)
 80024ee:	6718      	str	r0, [r3, #112]	; 0x70
}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	50004100 	.word	0x50004100

080024f8 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <XMC_SCU_TRAP_ClearStatus+0x8>)
 80024fa:	66d8      	str	r0, [r3, #108]	; 0x6c
}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	50004100 	.word	0x50004100

08002504 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8002504:	4a02      	ldr	r2, [pc, #8]	; (8002510 <XMC_SCU_PARITY_ClearStatus+0xc>)
 8002506:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002508:	4318      	orrs	r0, r3
 800250a:	6510      	str	r0, [r2, #80]	; 0x50
}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	50004100 	.word	0x50004100

08002514 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
  return (SCU_PARITY->PEFLAG);
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <XMC_SCU_PARITY_GetStatus+0x8>)
 8002516:	6d18      	ldr	r0, [r3, #80]	; 0x50
} 
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	50004100 	.word	0x50004100

08002520 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8002520:	4a02      	ldr	r2, [pc, #8]	; (800252c <XMC_SCU_PARITY_Enable+0xc>)
 8002522:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002524:	4318      	orrs	r0, r3
 8002526:	63d0      	str	r0, [r2, #60]	; 0x3c
}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	50004100 	.word	0x50004100

08002530 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <XMC_SCU_PARITY_Disable+0xc>)
 8002532:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002534:	ea23 0000 	bic.w	r0, r3, r0
 8002538:	63d0      	str	r0, [r2, #60]	; 0x3c
}
 800253a:	4770      	bx	lr
 800253c:	50004100 	.word	0x50004100

08002540 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8002540:	4a02      	ldr	r2, [pc, #8]	; (800254c <XMC_SCU_PARITY_EnableTrapGeneration+0xc>)
 8002542:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002544:	4318      	orrs	r0, r3
 8002546:	6450      	str	r0, [r2, #68]	; 0x44
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	50004100 	.word	0x50004100

08002550 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8002550:	4a02      	ldr	r2, [pc, #8]	; (800255c <XMC_SCU_PARITY_DisableTrapGeneration+0xc>)
 8002552:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002554:	ea23 0000 	bic.w	r0, r3, r0
 8002558:	6450      	str	r0, [r2, #68]	; 0x44
}
 800255a:	4770      	bx	lr
 800255c:	50004100 	.word	0x50004100

08002560 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002560:	4a03      	ldr	r2, [pc, #12]	; (8002570 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x10>)
 8002562:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002566:	4318      	orrs	r0, r3
 8002568:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	50004000 	.word	0x50004000

08002574 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x10>)
 8002576:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800257a:	ea23 0000 	bic.w	r0, r3, r0
 800257e:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
}
 8002582:	4770      	bx	lr
 8002584:	50004000 	.word	0x50004000

08002588 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002588:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <XMC_SCU_RESET_AssertPeripheralReset+0x14>)
 800258c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002590:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8002594:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	50004410 	.word	0x50004410

080025a0 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80025a0:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 80025a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80025a8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80025ac:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	50004414 	.word	0x50004414

080025b8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80025b8:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80025ba:	4a06      	ldr	r2, [pc, #24]	; (80025d4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 80025bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c4:	4018      	ands	r0, r3
 80025c6:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
}
 80025ca:	bf14      	ite	ne
 80025cc:	2001      	movne	r0, #1
 80025ce:	2000      	moveq	r0, #0
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	5000440c 	.word	0x5000440c

080025d8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x4c>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	07da      	lsls	r2, r3, #31
{
 80025de:	b510      	push	{r4, lr}
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80025e0:	d51c      	bpl.n	800261c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x44>
  {
    clock_frequency = OSCHP_GetFrequency();
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 80025e2:	4811      	ldr	r0, [pc, #68]	; (8002628 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x50>)
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x4c>)
 80025e6:	6913      	ldr	r3, [r2, #16]
 80025e8:	07db      	lsls	r3, r3, #31
 80025ea:	d506      	bpl.n	80025fa <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x22>
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 80025ec:	6993      	ldr	r3, [r2, #24]
 80025ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f2:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 80025f4:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80025f8:	bd10      	pop	{r4, pc}
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 80025fa:	6991      	ldr	r1, [r2, #24]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 80025fc:	6994      	ldr	r4, [r2, #24]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 80025fe:	6993      	ldr	r3, [r2, #24]
 8002600:	f3c3 4306 	ubfx	r3, r3, #16, #7
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8002604:	f3c4 2c06 	ubfx	ip, r4, #8, #7
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8002608:	f3c1 6203 	ubfx	r2, r1, #24, #4
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 800260c:	3301      	adds	r3, #1
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 800260e:	fb0c 0000 	mla	r0, ip, r0, r0
 8002612:	fb02 3303 	mla	r3, r2, r3, r3
 8002616:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800261a:	bd10      	pop	{r4, pc}
    clock_frequency = OSCHP_GetFrequency();
 800261c:	f001 f8ba 	bl	8003794 <OSCHP_GetFrequency>
 8002620:	e7e0      	b.n	80025e4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0xc>
 8002622:	bf00      	nop
 8002624:	50004700 	.word	0x50004700
 8002628:	016e3600 	.word	0x016e3600

0800262c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x10>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	07db      	lsls	r3, r3, #31
 8002632:	d501      	bpl.n	8002638 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0xc>
  }
  
  return (clock_frequency);
}
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x14>)
 8002636:	4770      	bx	lr
    clock_frequency = OSCHP_GetFrequency();
 8002638:	f001 b8ac 	b.w	8003794 <OSCHP_GetFrequency>
 800263c:	50004700 	.word	0x50004700
 8002640:	016e3600 	.word	0x016e3600

08002644 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8002644:	b508      	push	{r3, lr}
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8002646:	f001 f8a5 	bl	8003794 <OSCHP_GetFrequency>
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x28>)
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	07d2      	lsls	r2, r2, #31
 8002650:	d40b      	bmi.n	800266a <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x26>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8002652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	f3c3 6303 	ubfx	r3, r3, #24, #4
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 800265a:	f3c2 2206 	ubfx	r2, r2, #8, #7
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 800265e:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8002660:	fb02 0000 	mla	r0, r2, r0, r0
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fbb0 f0f3 	udiv	r0, r0, r3
  }
  return (clock_frequency);
}
 800266a:	bd08      	pop	{r3, pc}
 800266c:	50004700 	.word	0x50004700

08002670 <XMC_SCU_CLOCK_GetCcuClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x18>)
 8002672:	4906      	ldr	r1, [pc, #24]	; (800268c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x1c>)
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	6808      	ldr	r0, [r1, #0]
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
  uint32_t frequency = 0UL;
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	f002 0201 	and.w	r2, r2, #1
 800267e:	4090      	lsls	r0, r2
 8002680:	f003 0301 	and.w	r3, r3, #1
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8002684:	40d8      	lsrs	r0, r3
 8002686:	4770      	bx	lr
 8002688:	50004600 	.word	0x50004600
 800268c:	2000ffc0 	.word	0x2000ffc0

08002690 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8002690:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x24>)
 8002694:	699b      	ldr	r3, [r3, #24]
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8002696:	03db      	lsls	r3, r3, #15
 8002698:	d509      	bpl.n	80026ae <XMC_SCU_CLOCK_GetUsbClockFrequency+0x1e>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800269a:	f7ff ff9d 	bl	80025d8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x24>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 80026a6:	3301      	adds	r3, #1
}
 80026a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80026ac:	bd08      	pop	{r3, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80026ae:	f7ff ffc9 	bl	8002644 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80026b2:	e7f4      	b.n	800269e <XMC_SCU_CLOCK_GetUsbClockFrequency+0xe>
 80026b4:	50004600 	.word	0x50004600

080026b8 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80026b8:	b508      	push	{r3, lr}
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80026ba:	f7ff ff8d 	bl	80025d8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x18>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80026c6:	3301      	adds	r3, #1
}
 80026c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80026cc:	bd08      	pop	{r3, pc}
 80026ce:	bf00      	nop
 80026d0:	50004600 	.word	0x50004600

080026d4 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 80026d4:	b508      	push	{r3, lr}
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 80026de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e2:	d00f      	beq.n	8002704 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x30>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 80026e4:	b163      	cbz	r3, 8002700 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
  {
    frequency = OSI_FREQUENCY;
 80026e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ea:	bf14      	ite	ne
 80026ec:	2000      	movne	r0, #0
 80026ee:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x38>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 80026f8:	3301      	adds	r3, #1
}
 80026fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80026fe:	bd08      	pop	{r3, pc}
    frequency = OFI_FREQUENCY;
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3c>)
 8002702:	e7f6      	b.n	80026f2 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8002704:	f7ff ff68 	bl	80025d8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8002708:	e7f3      	b.n	80026f2 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x1e>
 800270a:	bf00      	nop
 800270c:	50004600 	.word	0x50004600
 8002710:	016e3600 	.word	0x016e3600

08002714 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8002714:	b510      	push	{r4, lr}
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8002716:	4c12      	ldr	r4, [pc, #72]	; (8002760 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x4c>)
 8002718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800271a:	f003 0303 	and.w	r3, r3, #3
  uint32_t frequency = 0UL;
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 800271e:	2b03      	cmp	r3, #3
 8002720:	d00b      	beq.n	800273a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x26>
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8002722:	b11b      	cbz	r3, 800272c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x18>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8002724:	2b02      	cmp	r3, #2
 8002726:	d011      	beq.n	800274c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x38>
  uint32_t frequency = 0UL;
 8002728:	2000      	movs	r0, #0
  {

  }

  return (frequency);
}
 800272a:	bd10      	pop	{r4, pc}
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800272c:	4a0d      	ldr	r2, [pc, #52]	; (8002764 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x50>)
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	6810      	ldr	r0, [r2, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	4098      	lsls	r0, r3
 8002738:	bd10      	pop	{r4, pc}
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800273a:	f7ff ff4d 	bl	80025d8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800273e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002740:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002744:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002746:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800274a:	bd10      	pop	{r4, pc}
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 800274c:	f7ff ff7a 	bl	8002644 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002752:	f3c3 4308 	ubfx	r3, r3, #16, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8002756:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8002758:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	bf00      	nop
 8002760:	50004600 	.word	0x50004600
 8002764:	2000ffc0 	.word	0x2000ffc0

08002768 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 800276c:	695b      	ldr	r3, [r3, #20]
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800276e:	6810      	ldr	r0, [r2, #0]
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002770:	f003 0301 	and.w	r3, r3, #1
}
 8002774:	40d8      	lsrs	r0, r3
 8002776:	4770      	bx	lr
 8002778:	50004600 	.word	0x50004600
 800277c:	2000ffc0 	.word	0x2000ffc0

08002780 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <XMC_SCU_CLOCK_SetSystemClockSource+0x10>)
 8002782:	68d3      	ldr	r3, [r2, #12]
 8002784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002788:	4318      	orrs	r0, r3
 800278a:	60d0      	str	r0, [r2, #12]
                      ((uint32_t)source);
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	50004600 	.word	0x50004600

08002794 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8002794:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 8002796:	6993      	ldr	r3, [r2, #24]
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	4318      	orrs	r0, r3
 800279e:	6190      	str	r0, [r2, #24]
                      ((uint32_t)source);
}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	50004600 	.word	0x50004600

080027a8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 80027aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80027ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b0:	4318      	orrs	r0, r3
 80027b2:	6250      	str	r0, [r2, #36]	; 0x24
                      ((uint32_t)source);
}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	50004600 	.word	0x50004600

080027bc <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x10>)
 80027be:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80027c0:	f023 0303 	bic.w	r3, r3, #3
 80027c4:	4318      	orrs	r0, r3
 80027c6:	6290      	str	r0, [r2, #40]	; 0x28
                      ((uint32_t)source);
}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	50004600 	.word	0x50004600

080027d0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x20>)
 80027d2:	69d3      	ldr	r3, [r2, #28]
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80027d4:	b928      	cbnz	r0, 80027e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x12>
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80027d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 80027e0:	4770      	bx	lr
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	61d3      	str	r3, [r2, #28]
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	50004700 	.word	0x50004700

080027f4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 80027f6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80027fa:	071b      	lsls	r3, r3, #28
 80027fc:	d4fb      	bmi.n	80027f6 <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 8002800:	68d3      	ldr	r3, [r2, #12]
 8002802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002806:	4318      	orrs	r0, r3
 8002808:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 800280a:	4770      	bx	lr
 800280c:	50004000 	.word	0x50004000
 8002810:	50004300 	.word	0x50004300

08002814 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002814:	4a05      	ldr	r2, [pc, #20]	; (800282c <XMC_SCU_HIB_SetStandbyClockSource+0x18>)
 8002816:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800281a:	071b      	lsls	r3, r3, #28
 800281c:	d4fb      	bmi.n	8002816 <XMC_SCU_HIB_SetStandbyClockSource+0x2>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <XMC_SCU_HIB_SetStandbyClockSource+0x1c>)
 8002820:	68d3      	ldr	r3, [r2, #12]
 8002822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002826:	4318      	orrs	r0, r3
 8002828:	60d0      	str	r0, [r2, #12]
                        ((uint32_t)source);
}
 800282a:	4770      	bx	lr
 800282c:	50004000 	.word	0x50004000
 8002830:	50004300 	.word	0x50004300

08002834 <XMC_SCU_CLOCK_SetSystemClockDivider>:
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002834:	4a03      	ldr	r2, [pc, #12]	; (8002844 <XMC_SCU_CLOCK_SetSystemClockDivider+0x10>)
 8002836:	68d3      	ldr	r3, [r2, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8002838:	3801      	subs	r0, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800283a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800283e:	4303      	orrs	r3, r0
 8002840:	60d3      	str	r3, [r2, #12]
}
 8002842:	4770      	bx	lr
 8002844:	50004600 	.word	0x50004600

08002848 <XMC_SCU_CLOCK_SetCcuClockDivider>:
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <XMC_SCU_CLOCK_SetCcuClockDivider+0x10>)
 800284a:	6a13      	ldr	r3, [r2, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800284c:	3801      	subs	r0, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	4303      	orrs	r3, r0
 8002854:	6213      	str	r3, [r2, #32]
}
 8002856:	4770      	bx	lr
 8002858:	50004600 	.word	0x50004600

0800285c <XMC_SCU_CLOCK_SetCpuClockDivider>:
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800285c:	4a03      	ldr	r2, [pc, #12]	; (800286c <XMC_SCU_CLOCK_SetCpuClockDivider+0x10>)
 800285e:	6913      	ldr	r3, [r2, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002860:	3801      	subs	r0, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	4303      	orrs	r3, r0
 8002868:	6113      	str	r3, [r2, #16]
}
 800286a:	4770      	bx	lr
 800286c:	50004600 	.word	0x50004600

08002870 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x10>)
 8002872:	6953      	ldr	r3, [r2, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002874:	3801      	subs	r0, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002876:	f023 0301 	bic.w	r3, r3, #1
 800287a:	4303      	orrs	r3, r0
 800287c:	6153      	str	r3, [r2, #20]
}
 800287e:	4770      	bx	lr
 8002880:	50004600 	.word	0x50004600

08002884 <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002884:	4a03      	ldr	r2, [pc, #12]	; (8002894 <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 8002886:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8002888:	3801      	subs	r0, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	4303      	orrs	r3, r0
 8002890:	6193      	str	r3, [r2, #24]
}
 8002892:	4770      	bx	lr
 8002894:	50004600 	.word	0x50004600

08002898 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 800289a:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800289c:	3801      	subs	r0, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800289e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028a2:	4303      	orrs	r3, r0
 80028a4:	61d3      	str	r3, [r2, #28]
}
 80028a6:	4770      	bx	lr
 80028a8:	50004600 	.word	0x50004600

080028ac <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80028ac:	4a03      	ldr	r2, [pc, #12]	; (80028bc <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 80028ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80028b0:	3801      	subs	r0, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80028b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b6:	4303      	orrs	r3, r0
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80028ba:	4770      	bx	lr
 80028bc:	50004600 	.word	0x50004600

080028c0 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x18>)
 80028c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80028c4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 80028c8:	3801      	subs	r0, #1
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80028d2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	50004600 	.word	0x50004600

080028dc <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80028dc:	4b01      	ldr	r3, [pc, #4]	; (80028e4 <XMC_SCU_CLOCK_EnableClock+0x8>)
 80028de:	6058      	str	r0, [r3, #4]
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	50004600 	.word	0x50004600

080028e8 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <XMC_SCU_CLOCK_DisableClock+0x8>)
 80028ea:	6098      	str	r0, [r3, #8]
}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	50004600 	.word	0x50004600

080028f4 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <XMC_SCU_CLOCK_IsClockEnabled+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4218      	tst	r0, r3
}
 80028fa:	bf14      	ite	ne
 80028fc:	2001      	movne	r0, #1
 80028fe:	2000      	moveq	r0, #0
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	50004600 	.word	0x50004600

08002908 <XMC_SCU_POWER_GetEVR13Voltage>:
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <XMC_SCU_POWER_GetEVR13Voltage+0x1c>)
 800290a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002928 <XMC_SCU_POWER_GetEVR13Voltage+0x20>
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800291a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291e:	ee17 0a90 	vmov	r0, s15
 8002922:	4770      	bx	lr
 8002924:	50004200 	.word	0x50004200
 8002928:	3bbe0ded 	.word	0x3bbe0ded

0800292c <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <XMC_SCU_POWER_GetEVR33Voltage+0x20>)
 800292e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002950 <XMC_SCU_POWER_GetEVR33Voltage+0x24>
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002944:	ee17 0a90 	vmov	r0, s15
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	50004200 	.word	0x50004200
 8002950:	3cb851ec 	.word	0x3cb851ec

08002954 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <XMC_SCU_CLOCK_EnableUsbPll+0x10>)
 8002956:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	f023 0302 	bic.w	r3, r3, #2
 8002960:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002962:	4770      	bx	lr
 8002964:	50004700 	.word	0x50004700

08002968 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <XMC_SCU_CLOCK_DisableUsbPll+0x10>)
 800296a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002976:	4770      	bx	lr
 8002978:	50004700 	.word	0x50004700

0800297c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002986:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002988:	3801      	subs	r0, #1
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800298a:	3901      	subs	r1, #1
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800298c:	0600      	lsls	r0, r0, #24
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800298e:	f042 0210 	orr.w	r2, r2, #16
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002992:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002998:	6258      	str	r0, [r3, #36]	; 0x24

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80029a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a4:	f022 0210 	bic.w	r2, r2, #16
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80029aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	0752      	lsls	r2, r2, #29
 80029b6:	d5fc      	bpl.n	80029b2 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	50004700 	.word	0x50004700

080029c0 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <XMC_SCU_CLOCK_StopUsbPll+0x8>)
 80029c2:	4a02      	ldr	r2, [pc, #8]	; (80029cc <XMC_SCU_CLOCK_StopUsbPll+0xc>)
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 80029c6:	4770      	bx	lr
 80029c8:	50004700 	.word	0x50004700
 80029cc:	00010003 	.word	0x00010003

080029d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x6c>)
 80029d2:	6953      	ldr	r3, [r2, #20]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80029d4:	2801      	cmp	r0, #1
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80029d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
{
 80029da:	b510      	push	{r4, lr}
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80029dc:	6153      	str	r3, [r2, #20]
  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80029de:	d011      	beq.n	8002a04 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x34>
 80029e0:	4c17      	ldr	r4, [pc, #92]	; (8002a40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x70>)
  SystemCoreClockUpdate();
 80029e2:	f000 fedb 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	4916      	ldr	r1, [pc, #88]	; (8002a44 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x74>)
 80029ea:	fba1 1202 	umull	r1, r2, r1, r2
 80029ee:	2364      	movs	r3, #100	; 0x64
 80029f0:	0c92      	lsrs	r2, r2, #18
 80029f2:	fb03 f202 	mul.w	r2, r3, r2
  for (i = 0U; i < delay; ++i)
 80029f6:	b122      	cbz	r2, 8002a02 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x32>
 80029f8:	2300      	movs	r3, #0
    __NOP();
 80029fa:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80029fc:	3301      	adds	r3, #1
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d1fb      	bne.n	80029fa <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x2a>
    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
  }

  XMC_SCU_lDelay(100UL);
}
 8002a02:	bd10      	pop	{r4, pc}
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8002a04:	6953      	ldr	r3, [r2, #20]
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002a06:	4c0e      	ldr	r4, [pc, #56]	; (8002a40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x70>)
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8002a08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a0c:	6153      	str	r3, [r2, #20]
  SystemCoreClockUpdate();
 8002a0e:	f000 fec5 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x74>)
 8002a16:	fba2 3203 	umull	r3, r2, r2, r3
 8002a1a:	2164      	movs	r1, #100	; 0x64
 8002a1c:	0c92      	lsrs	r2, r2, #18
 8002a1e:	fb01 f202 	mul.w	r2, r1, r2
  for (i = 0U; i < delay; ++i)
 8002a22:	b122      	cbz	r2, 8002a2e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x5e>
 8002a24:	2300      	movs	r3, #0
    __NOP();
 8002a26:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002a28:	3301      	adds	r3, #1
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d1fb      	bne.n	8002a26 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x56>
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8002a2e:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x6c>)
 8002a30:	6953      	ldr	r3, [r2, #20]
 8002a32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a36:	6153      	str	r3, [r2, #20]
 8002a38:	e7d3      	b.n	80029e2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x12>
 8002a3a:	bf00      	nop
 8002a3c:	50004700 	.word	0x50004700
 8002a40:	2000ffc0 	.word	0x2000ffc0
 8002a44:	431bde83 	.word	0x431bde83

08002a48 <XMC_SCU_POWER_EnableUsb>:

/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002a48:	4b02      	ldr	r3, [pc, #8]	; (8002a54 <XMC_SCU_POWER_EnableUsb+0xc>)
 8002a4a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a4e:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	50004200 	.word	0x50004200

08002a58 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002a58:	4b02      	ldr	r3, [pc, #8]	; (8002a64 <XMC_SCU_POWER_DisableUsb+0xc>)
 8002a5a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a5e:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	50004200 	.word	0x50004200

08002a68 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <XMC_SCU_CLOCK_IsUsbPllLocked+0xc>)
 8002a6a:	6a18      	ldr	r0, [r3, #32]
}
 8002a6c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	50004700 	.word	0x50004700

08002a78 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002a78:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <XMC_SCU_HIB_EnableHibernateDomain+0x28>)
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	07db      	lsls	r3, r3, #31
 8002a7e:	d404      	bmi.n	8002a8a <XMC_SCU_HIB_EnableHibernateDomain+0x12>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002a80:	2301      	movs	r3, #1
 8002a82:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002a84:	6813      	ldr	r3, [r2, #0]
 8002a86:	07d8      	lsls	r0, r3, #31
 8002a88:	d5fc      	bpl.n	8002a84 <XMC_SCU_HIB_EnableHibernateDomain+0xc>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002a8a:	4a06      	ldr	r2, [pc, #24]	; (8002aa4 <XMC_SCU_HIB_EnableHibernateDomain+0x2c>)
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	0599      	lsls	r1, r3, #22
 8002a90:	d505      	bpl.n	8002a9e <XMC_SCU_HIB_EnableHibernateDomain+0x26>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a96:	6093      	str	r3, [r2, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	059b      	lsls	r3, r3, #22
 8002a9c:	d4fc      	bmi.n	8002a98 <XMC_SCU_HIB_EnableHibernateDomain+0x20>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8002a9e:	4770      	bx	lr
 8002aa0:	50004200 	.word	0x50004200
 8002aa4:	50004400 	.word	0x50004400

08002aa8 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002aa8:	4903      	ldr	r1, [pc, #12]	; (8002ab8 <XMC_SCU_HIB_DisableHibernateDomain+0x10>)
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <XMC_SCU_HIB_DisableHibernateDomain+0x14>)
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002aac:	2001      	movs	r0, #1
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002aae:	f44f 7200 	mov.w	r2, #512	; 0x200
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002ab2:	6088      	str	r0, [r1, #8]
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8002ab4:	605a      	str	r2, [r3, #4]
}
 8002ab6:	4770      	bx	lr
 8002ab8:	50004200 	.word	0x50004200
 8002abc:	50004400 	.word	0x50004400

08002ac0 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x18>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	f010 0001 	ands.w	r0, r0, #1
 8002ac8:	d005      	beq.n	8002ad6 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x16>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002aca:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002ace:	f480 7000 	eor.w	r0, r0, #512	; 0x200
 8002ad2:	f3c0 2040 	ubfx	r0, r0, #9, #1
}
 8002ad6:	4770      	bx	lr
 8002ad8:	50004200 	.word	0x50004200

08002adc <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002adc:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <XMC_SCU_HIB_EnableInternalSlowClock+0x18>)
 8002ade:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	d4fb      	bmi.n	8002ade <XMC_SCU_HIB_EnableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <XMC_SCU_HIB_EnableInternalSlowClock+0x1c>)
 8002ae8:	6953      	ldr	r3, [r2, #20]
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6153      	str	r3, [r2, #20]
}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	50004000 	.word	0x50004000
 8002af8:	50004300 	.word	0x50004300

08002afc <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <XMC_SCU_HIB_DisableInternalSlowClock+0x18>)
 8002afe:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	d4fb      	bmi.n	8002afe <XMC_SCU_HIB_DisableInternalSlowClock+0x2>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <XMC_SCU_HIB_DisableInternalSlowClock+0x1c>)
 8002b08:	6953      	ldr	r3, [r2, #20]
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6153      	str	r3, [r2, #20]
}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	50004000 	.word	0x50004000
 8002b18:	50004300 	.word	0x50004300

08002b1c <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <XMC_SCU_HIB_ClearEventStatus+0x10>)
 8002b1e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b22:	079b      	lsls	r3, r3, #30
 8002b24:	d4fb      	bmi.n	8002b1e <XMC_SCU_HIB_ClearEventStatus+0x2>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 8002b26:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <XMC_SCU_HIB_ClearEventStatus+0x14>)
 8002b28:	6058      	str	r0, [r3, #4]
}
 8002b2a:	4770      	bx	lr
 8002b2c:	50004000 	.word	0x50004000
 8002b30:	50004300 	.word	0x50004300

08002b34 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002b34:	4a03      	ldr	r2, [pc, #12]	; (8002b44 <XMC_SCU_HIB_TriggerEvent+0x10>)
 8002b36:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b3a:	075b      	lsls	r3, r3, #29
 8002b3c:	d4fb      	bmi.n	8002b36 <XMC_SCU_HIB_TriggerEvent+0x2>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8002b3e:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <XMC_SCU_HIB_TriggerEvent+0x14>)
 8002b40:	6098      	str	r0, [r3, #8]
}
 8002b42:	4770      	bx	lr
 8002b44:	50004000 	.word	0x50004000
 8002b48:	50004300 	.word	0x50004300

08002b4c <XMC_SCU_HIB_EnableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <XMC_SCU_HIB_EnableEvent+0x14>)
 8002b4e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b52:	071b      	lsls	r3, r3, #28
 8002b54:	d4fb      	bmi.n	8002b4e <XMC_SCU_HIB_EnableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8002b56:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <XMC_SCU_HIB_EnableEvent+0x18>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4310      	orrs	r0, r2
 8002b5c:	60d8      	str	r0, [r3, #12]
}
 8002b5e:	4770      	bx	lr
 8002b60:	50004000 	.word	0x50004000
 8002b64:	50004300 	.word	0x50004300

08002b68 <XMC_SCU_HIB_DisableEvent>:
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <XMC_SCU_HIB_DisableEvent+0x18>)
 8002b6a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b6e:	071b      	lsls	r3, r3, #28
 8002b70:	d4fb      	bmi.n	8002b6a <XMC_SCU_HIB_DisableEvent+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <XMC_SCU_HIB_DisableEvent+0x1c>)
 8002b74:	68d3      	ldr	r3, [r2, #12]
 8002b76:	ea23 0000 	bic.w	r0, r3, r0
 8002b7a:	60d0      	str	r0, [r2, #12]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	50004000 	.word	0x50004000
 8002b84:	50004300 	.word	0x50004300

08002b88 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002b88:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <XMC_SCU_HIB_EnterHibernateState+0x18>)
 8002b8a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002b8e:	071b      	lsls	r3, r3, #28
 8002b90:	d4fb      	bmi.n	8002b8a <XMC_SCU_HIB_EnterHibernateState+0x2>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <XMC_SCU_HIB_EnterHibernateState+0x1c>)
 8002b94:	68d3      	ldr	r3, [r2, #12]
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	50004000 	.word	0x50004000
 8002ba4:	50004300 	.word	0x50004300

08002ba8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 8002ba8:	b948      	cbnz	r0, 8002bbe <XMC_SCU_HIB_EnterHibernateStateEx+0x16>
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <XMC_SCU_HIB_EnterHibernateStateEx+0x18>)
 8002bac:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	d4fb      	bmi.n	8002bac <XMC_SCU_HIB_EnterHibernateStateEx+0x4>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002bb4:	4a03      	ldr	r2, [pc, #12]	; (8002bc4 <XMC_SCU_HIB_EnterHibernateStateEx+0x1c>)
 8002bb6:	68d3      	ldr	r3, [r2, #12]
 8002bb8:	f043 0310 	orr.w	r3, r3, #16
 8002bbc:	60d3      	str	r3, [r2, #12]
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8002bbe:	4770      	bx	lr
 8002bc0:	50004000 	.word	0x50004000
 8002bc4:	50004300 	.word	0x50004300

08002bc8 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x20>)
 8002bca:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002bce:	071b      	lsls	r3, r3, #28
 8002bd0:	d4fb      	bmi.n	8002bca <XMC_SCU_HIB_SetWakeupTriggerInput+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002bd2:	4a06      	ldr	r2, [pc, #24]	; (8002bec <XMC_SCU_HIB_SetWakeupTriggerInput+0x24>)
 8002bd4:	68d3      	ldr	r3, [r2, #12]
  if (pin == XMC_SCU_HIB_IO_0)
 8002bd6:	b918      	cbnz	r0, 8002be0 <XMC_SCU_HIB_SetWakeupTriggerInput+0x18>
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	60d3      	str	r3, [r2, #12]
 8002bde:	4770      	bx	lr
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8002be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be4:	60d3      	str	r3, [r2, #12]
  }
}
 8002be6:	4770      	bx	lr
 8002be8:	50004000 	.word	0x50004000
 8002bec:	50004300 	.word	0x50004300

08002bf0 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8002bf0:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <XMC_SCU_HIB_SetPinMode+0x2c>)
 8002bf4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	d4fb      	bmi.n	8002bf4 <XMC_SCU_HIB_SetPinMode+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002bfc:	4c08      	ldr	r4, [pc, #32]	; (8002c20 <XMC_SCU_HIB_SetPinMode+0x30>)
 8002bfe:	0080      	lsls	r0, r0, #2
 8002c00:	68e3      	ldr	r3, [r4, #12]
 8002c02:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8002c06:	4082      	lsls	r2, r0
 8002c08:	ea23 0302 	bic.w	r3, r3, r2
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8002c0c:	fa01 f000 	lsl.w	r0, r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002c10:	4318      	orrs	r0, r3
 8002c12:	60e0      	str	r0, [r4, #12]
}
 8002c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	50004000 	.word	0x50004000
 8002c20:	50004300 	.word	0x50004300

08002c24 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002c24:	b410      	push	{r4}
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <XMC_SCU_HIB_SetPinOutputLevel+0x28>)
 8002c28:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	d4fb      	bmi.n	8002c28 <XMC_SCU_HIB_SetPinOutputLevel+0x4>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002c30:	4c07      	ldr	r4, [pc, #28]	; (8002c50 <XMC_SCU_HIB_SetPinOutputLevel+0x2c>)
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	68e2      	ldr	r2, [r4, #12]
 8002c38:	4083      	lsls	r3, r0
 8002c3a:	ea22 0203 	bic.w	r2, r2, r3
                        (level << pin);
 8002c3e:	fa01 f300 	lsl.w	r3, r1, r0
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60e3      	str	r3, [r4, #12]
}
 8002c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	50004000 	.word	0x50004000
 8002c50:	50004300 	.word	0x50004300

08002c54 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <XMC_SCU_HIB_SetInput0+0x20>)
 8002c56:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c5a:	071b      	lsls	r3, r3, #28
 8002c5c:	d4fb      	bmi.n	8002c56 <XMC_SCU_HIB_SetInput0+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8002c5e:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <XMC_SCU_HIB_SetInput0+0x24>)
 8002c60:	68d3      	ldr	r3, [r2, #12]
  if (pin == XMC_SCU_HIB_IO_0)
 8002c62:	b918      	cbnz	r0, 8002c6c <XMC_SCU_HIB_SetInput0+0x18>
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8002c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c68:	60d3      	str	r3, [r2, #12]
 8002c6a:	4770      	bx	lr
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 8002c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c70:	60d3      	str	r3, [r2, #12]
  }
}
 8002c72:	4770      	bx	lr
 8002c74:	50004000 	.word	0x50004000
 8002c78:	50004300 	.word	0x50004300

08002c7c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <XMC_SCU_HIB_SetSR0Input+0x18>)
 8002c7e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002c82:	071b      	lsls	r3, r3, #28
 8002c84:	d4fb      	bmi.n	8002c7e <XMC_SCU_HIB_SetSR0Input+0x2>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <XMC_SCU_HIB_SetSR0Input+0x1c>)
 8002c88:	68d3      	ldr	r3, [r2, #12]
 8002c8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c8e:	4318      	orrs	r0, r3
 8002c90:	60d0      	str	r0, [r2, #12]
#endif  
                        input;
}
 8002c92:	4770      	bx	lr
 8002c94:	50004000 	.word	0x50004000
 8002c98:	50004300 	.word	0x50004300

08002c9c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x10>)
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	f080 0008 	eor.w	r0, r0, #8
}
 8002ca4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	50004300 	.word	0x50004300

08002cb0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002cb0:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8002cb2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002cb6:	0618      	lsls	r0, r3, #24
 8002cb8:	d4fb      	bmi.n	8002cb2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002cba:	490f      	ldr	r1, [pc, #60]	; (8002cf8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002cbe:	69cb      	ldr	r3, [r1, #28]
 8002cc0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cc4:	61cb      	str	r3, [r1, #28]
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002cc6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002cca:	0719      	lsls	r1, r3, #28
 8002ccc:	d4fb      	bmi.n	8002cc6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x16>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002cd0:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002cd2:	68cb      	ldr	r3, [r1, #12]
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	60cb      	str	r3, [r1, #12]
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002cda:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002cde:	075b      	lsls	r3, r3, #29
 8002ce0:	d4fb      	bmi.n	8002cda <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x2a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x48>)
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 8002ce4:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x44>)
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	6099      	str	r1, [r3, #8]
 8002cea:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1fb      	bne.n	8002cea <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3a>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8002cf2:	4770      	bx	lr
 8002cf4:	50004000 	.word	0x50004000
 8002cf8:	50004300 	.word	0x50004300

08002cfc <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002cfc:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x18>)
 8002cfe:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	d4fb      	bmi.n	8002cfe <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x1c>)
 8002d08:	69d3      	ldr	r3, [r2, #28]
 8002d0a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d0e:	61d3      	str	r3, [r2, #28]
}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	50004000 	.word	0x50004000
 8002d18:	50004300 	.word	0x50004300

08002d1c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d1c:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x18>)
 8002d1e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	d4fb      	bmi.n	8002d1e <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 8002d28:	69d3      	ldr	r3, [r2, #28]
 8002d2a:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002d2e:	61d3      	str	r3, [r2, #28]
}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	50004000 	.word	0x50004000
 8002d38:	50004300 	.word	0x50004300

08002d3c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x1c>)
 8002d3e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	d4fb      	bmi.n	8002d3e <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x2>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x20>)
 8002d48:	69d3      	ldr	r3, [r2, #28]
 8002d4a:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002d4e:	f043 0320 	orr.w	r3, r3, #32
 8002d52:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	50004000 	.word	0x50004000
 8002d5c:	50004300 	.word	0x50004300

08002d60 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0xc>)
 8002d62:	6998      	ldr	r0, [r3, #24]
}
 8002d64:	f000 0001 	and.w	r0, r0, #1
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	50004300 	.word	0x50004300

08002d70 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002d70:	b538      	push	{r3, r4, r5, lr}
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002d72:	4d0c      	ldr	r5, [pc, #48]	; (8002da4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x34>)
 8002d74:	696b      	ldr	r3, [r5, #20]
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	616b      	str	r3, [r5, #20]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002d7c:	686c      	ldr	r4, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002d7e:	f000 fd09 	bl	8003794 <OSCHP_GetFrequency>
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x38>)
 8002d84:	fba3 3000 	umull	r3, r0, r3, r0
 8002d88:	0d03      	lsrs	r3, r0, #20
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002d8a:	f424 2270 	bic.w	r2, r4, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002d8e:	3b01      	subs	r3, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002d90:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002d94:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002d98:	606b      	str	r3, [r5, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002d9a:	696b      	ldr	r3, [r5, #20]
 8002d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002da0:	616b      	str	r3, [r5, #20]
}
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	50004700 	.word	0x50004700
 8002da8:	6b5fca6b 	.word	0x6b5fca6b

08002dac <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x14>)
 8002dae:	6918      	ldr	r0, [r3, #16]
 8002db0:	f400 7060 	and.w	r0, r0, #896	; 0x380
}
 8002db4:	f5a0 7060 	sub.w	r0, r0, #896	; 0x380
 8002db8:	fab0 f080 	clz	r0, r0
 8002dbc:	0940      	lsrs	r0, r0, #5
 8002dbe:	4770      	bx	lr
 8002dc0:	50004700 	.word	0x50004700

08002dc4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002dc4:	4a02      	ldr	r2, [pc, #8]	; (8002dd0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0xc>)
 8002dc6:	6853      	ldr	r3, [r2, #4]
 8002dc8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002dcc:	6053      	str	r3, [r2, #4]
}
 8002dce:	4770      	bx	lr
 8002dd0:	50004700 	.word	0x50004700

08002dd4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002dd4:	4a02      	ldr	r2, [pc, #8]	; (8002de0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8002dd6:	6853      	ldr	r3, [r2, #4]
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
}
 8002dde:	4770      	bx	lr
 8002de0:	50004700 	.word	0x50004700

08002de4 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002de4:	4a02      	ldr	r2, [pc, #8]	; (8002df0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0xc>)
 8002de6:	6853      	ldr	r3, [r2, #4]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6053      	str	r3, [r2, #4]
}
 8002dee:	4770      	bx	lr
 8002df0:	50004700 	.word	0x50004700

08002df4 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0xc>)
 8002df6:	6818      	ldr	r0, [r3, #0]
}
 8002df8:	f000 0001 	and.w	r0, r0, #1
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	50004700 	.word	0x50004700

08002e04 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <XMC_SCU_CLOCK_EnableSystemPll+0x10>)
 8002e06:	6953      	ldr	r3, [r2, #20]
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	6153      	str	r3, [r2, #20]
}
 8002e12:	4770      	bx	lr
 8002e14:	50004700 	.word	0x50004700

08002e18 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002e18:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <XMC_SCU_CLOCK_DisableSystemPll+0x10>)
 8002e1a:	6953      	ldr	r3, [r2, #20]
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6153      	str	r3, [r2, #20]
}
 8002e26:	4770      	bx	lr
 8002e28:	50004700 	.word	0x50004700

08002e2c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e30:	9e06      	ldr	r6, [sp, #24]
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002e32:	4c62      	ldr	r4, [pc, #392]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
{
 8002e34:	4690      	mov	r8, r2
 8002e36:	461f      	mov	r7, r3
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002e38:	b9b8      	cbnz	r0, 8002e6a <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002e3a:	69e0      	ldr	r0, [r4, #28]
 8002e3c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002e40:	f020 0001 	bic.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002e44:	2901      	cmp	r1, #1
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002e46:	61e0      	str	r0, [r4, #28]
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002e48:	d07c      	beq.n	8002f44 <XMC_SCU_CLOCK_StartSystemPll+0x118>

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002e4a:	4a5c      	ldr	r2, [pc, #368]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002e4c:	6993      	ldr	r3, [r2, #24]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002e4e:	3e01      	subs	r6, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e54:	431e      	orrs	r6, r3
 8002e56:	6196      	str	r6, [r2, #24]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002e58:	6953      	ldr	r3, [r2, #20]
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6153      	str	r3, [r2, #20]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002e60:	6913      	ldr	r3, [r2, #16]
 8002e62:	07db      	lsls	r3, r3, #31
 8002e64:	d5fc      	bpl.n	8002e60 <XMC_SCU_CLOCK_StartSystemPll+0x34>
    {
      /* wait for prescaler mode */
    }
  }
}
 8002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002e6a:	69e0      	ldr	r0, [r4, #28]
 8002e6c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002e70:	f040 0001 	orr.w	r0, r0, #1
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002e74:	2901      	cmp	r1, #1
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002e76:	61e0      	str	r0, [r4, #28]
  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002e78:	d1e7      	bne.n	8002e4a <XMC_SCU_CLOCK_StartSystemPll+0x1e>
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002e7a:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002e7e:	494f      	ldr	r1, [pc, #316]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002e80:	6948      	ldr	r0, [r1, #20]
 8002e82:	f040 0001 	orr.w	r0, r0, #1
 8002e86:	6148      	str	r0, [r1, #20]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002e88:	6948      	ldr	r0, [r1, #20]
 8002e8a:	f040 0010 	orr.w	r0, r0, #16
 8002e8e:	6148      	str	r0, [r1, #20]
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002e90:	698c      	ldr	r4, [r1, #24]
 8002e92:	484b      	ldr	r0, [pc, #300]	; (8002fc0 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002e94:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002e98:	4020      	ands	r0, r4
 8002e9a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002e9e:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002ea0:	1e7b      	subs	r3, r7, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002ea2:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002ea6:	fb07 f505 	mul.w	r5, r7, r5
 8002eaa:	fbb5 f5f8 	udiv	r5, r5, r8
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002eae:	fba2 0205 	umull	r0, r2, r2, r5
 8002eb2:	0e92      	lsrs	r2, r2, #26
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002eb4:	3a01      	subs	r2, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002eba:	618b      	str	r3, [r1, #24]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002ebc:	694b      	ldr	r3, [r1, #20]
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec2:	614b      	str	r3, [r1, #20]
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002ec4:	694b      	ldr	r3, [r1, #20]
 8002ec6:	f023 0310 	bic.w	r3, r3, #16
 8002eca:	614b      	str	r3, [r1, #20]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002ecc:	694b      	ldr	r3, [r1, #20]
 8002ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed2:	614b      	str	r3, [r1, #20]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002ed4:	690b      	ldr	r3, [r1, #16]
 8002ed6:	075a      	lsls	r2, r3, #29
 8002ed8:	d5fc      	bpl.n	8002ed4 <XMC_SCU_CLOCK_StartSystemPll+0xa8>
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002eda:	694a      	ldr	r2, [r1, #20]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002edc:	4b37      	ldr	r3, [pc, #220]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	614a      	str	r2, [r1, #20]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002ee4:	691c      	ldr	r4, [r3, #16]
 8002ee6:	f014 0401 	ands.w	r4, r4, #1
 8002eea:	d1fb      	bne.n	8002ee4 <XMC_SCU_CLOCK_StartSystemPll+0xb8>
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002eec:	4a36      	ldr	r2, [pc, #216]	; (8002fc8 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8002eee:	fba2 1205 	umull	r1, r2, r2, r5
    if (kdiv < kdiv_temp)
 8002ef2:	ebb6 6fd2 	cmp.w	r6, r2, lsr #27
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002ef6:	ea4f 61d2 	mov.w	r1, r2, lsr #27
    if (kdiv < kdiv_temp)
 8002efa:	d345      	bcc.n	8002f88 <XMC_SCU_CLOCK_StartSystemPll+0x15c>
 8002efc:	4f33      	ldr	r7, [pc, #204]	; (8002fcc <XMC_SCU_CLOCK_StartSystemPll+0x1a0>)
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <XMC_SCU_CLOCK_StartSystemPll+0x1a4>)
 8002f00:	086d      	lsrs	r5, r5, #1
 8002f02:	fba3 3505 	umull	r3, r5, r3, r5
    if (kdiv < kdiv_temp)
 8002f06:	ebb6 6fd5 	cmp.w	r6, r5, lsr #27
    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002f0a:	ea4f 63d5 	mov.w	r3, r5, lsr #27
    if (kdiv < kdiv_temp)
 8002f0e:	d321      	bcc.n	8002f54 <XMC_SCU_CLOCK_StartSystemPll+0x128>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f10:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002f12:	6993      	ldr	r3, [r2, #24]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002f14:	3e01      	subs	r6, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f16:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f1a:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8002f1e:	6196      	str	r6, [r2, #24]
  SystemCoreClockUpdate();
 8002f20:	f000 fc3c 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	492b      	ldr	r1, [pc, #172]	; (8002fd4 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 8002f28:	fba1 1303 	umull	r1, r3, r1, r3
 8002f2c:	2232      	movs	r2, #50	; 0x32
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
  for (i = 0U; i < delay; ++i)
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d096      	beq.n	8002e66 <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    __NOP();
 8002f38:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002f3a:	3401      	adds	r4, #1
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d1fb      	bne.n	8002f38 <XMC_SCU_CLOCK_StartSystemPll+0x10c>
}
 8002f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002f44:	f000 fc26 	bl	8003794 <OSCHP_GetFrequency>
 8002f48:	4d22      	ldr	r5, [pc, #136]	; (8002fd4 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 8002f4a:	fba5 3500 	umull	r3, r5, r5, r0
 8002f4e:	0cad      	lsrs	r5, r5, #18
 8002f50:	05ad      	lsls	r5, r5, #22
 8002f52:	e794      	b.n	8002e7e <XMC_SCU_CLOCK_StartSystemPll+0x52>
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f54:	4919      	ldr	r1, [pc, #100]	; (8002fbc <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002f56:	698a      	ldr	r2, [r1, #24]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002f58:	3b01      	subs	r3, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f5a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f5e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8002f62:	618b      	str	r3, [r1, #24]
  SystemCoreClockUpdate();
 8002f64:	f000 fc1a 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 8002f6c:	fba2 3203 	umull	r3, r2, r2, r3
 8002f70:	0c92      	lsrs	r2, r2, #18
 8002f72:	2332      	movs	r3, #50	; 0x32
 8002f74:	fb03 f202 	mul.w	r2, r3, r2
  for (i = 0U; i < delay; ++i)
 8002f78:	2a00      	cmp	r2, #0
 8002f7a:	d0c9      	beq.n	8002f10 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 8002f7c:	2300      	movs	r3, #0
    __NOP();
 8002f7e:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002f80:	3301      	adds	r3, #1
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d1fb      	bne.n	8002f7e <XMC_SCU_CLOCK_StartSystemPll+0x152>
 8002f86:	e7c3      	b.n	8002f10 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f88:	699a      	ldr	r2, [r3, #24]
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002f8a:	4f10      	ldr	r7, [pc, #64]	; (8002fcc <XMC_SCU_CLOCK_StartSystemPll+0x1a0>)
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f8c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002f90:	3901      	subs	r1, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002f92:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8002f96:	6199      	str	r1, [r3, #24]
  SystemCoreClockUpdate();
 8002f98:	f000 fc00 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 8002fa0:	fba2 3203 	umull	r3, r2, r2, r3
 8002fa4:	0c92      	lsrs	r2, r2, #18
 8002fa6:	2332      	movs	r3, #50	; 0x32
 8002fa8:	fb03 f202 	mul.w	r2, r3, r2
  for (i = 0U; i < delay; ++i)
 8002fac:	2a00      	cmp	r2, #0
 8002fae:	d0a6      	beq.n	8002efe <XMC_SCU_CLOCK_StartSystemPll+0xd2>
 8002fb0:	4623      	mov	r3, r4
    __NOP();
 8002fb2:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d1fb      	bne.n	8002fb2 <XMC_SCU_CLOCK_StartSystemPll+0x186>
 8002fba:	e7a0      	b.n	8002efe <XMC_SCU_CLOCK_StartSystemPll+0xd2>
 8002fbc:	50004700 	.word	0x50004700
 8002fc0:	f08080ff 	.word	0xf08080ff
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab
 8002fc8:	88888889 	.word	0x88888889
 8002fcc:	2000ffc0 	.word	0x2000ffc0
 8002fd0:	b60b60b7 	.word	0xb60b60b7
 8002fd4:	431bde83 	.word	0x431bde83

08002fd8 <XMC_SCU_CLOCK_Init>:
{
 8002fd8:	b570      	push	{r4, r5, r6, lr}
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002fda:	4a44      	ldr	r2, [pc, #272]	; (80030ec <XMC_SCU_CLOCK_Init+0x114>)
 8002fdc:	68d3      	ldr	r3, [r2, #12]
{
 8002fde:	4604      	mov	r4, r0
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	60d3      	str	r3, [r2, #12]
{
 8002fe6:	b082      	sub	sp, #8
  XMC_SCU_HIB_EnableHibernateDomain();
 8002fe8:	f7ff fd46 	bl	8002a78 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8002fec:	79e3      	ldrb	r3, [r4, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d175      	bne.n	80030de <XMC_SCU_CLOCK_Init+0x106>
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8002ff2:	7a60      	ldrb	r0, [r4, #9]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002ff4:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <XMC_SCU_CLOCK_Init+0x118>)
 8002ff6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8002ffa:	071b      	lsls	r3, r3, #28
 8002ffc:	d4fb      	bmi.n	8002ff6 <XMC_SCU_CLOCK_Init+0x1e>
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8002ffe:	493d      	ldr	r1, [pc, #244]	; (80030f4 <XMC_SCU_CLOCK_Init+0x11c>)
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <XMC_SCU_CLOCK_Init+0x118>)
 8003002:	68cb      	ldr	r3, [r1, #12]
 8003004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003008:	4303      	orrs	r3, r0
 800300a:	60cb      	str	r3, [r1, #12]
 800300c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
  while (XMC_SCU_GetMirrorStatus() != 0)
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1fb      	bne.n	800300c <XMC_SCU_CLOCK_Init+0x34>
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8003014:	7a20      	ldrb	r0, [r4, #8]
 8003016:	f7ff fcdb 	bl	80029d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <XMC_SCU_CLOCK_Init+0x114>)
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800301c:	7c22      	ldrb	r2, [r4, #16]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800301e:	68d9      	ldr	r1, [r3, #12]
  if (config->enable_oschp == true)
 8003020:	79a0      	ldrb	r0, [r4, #6]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003022:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8003026:	3a01      	subs	r2, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800302c:	6919      	ldr	r1, [r3, #16]
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800302e:	7c62      	ldrb	r2, [r4, #17]
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003030:	f021 0101 	bic.w	r1, r1, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8003034:	3a01      	subs	r2, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800303a:	6a19      	ldr	r1, [r3, #32]
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800303c:	7ca2      	ldrb	r2, [r4, #18]
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800303e:	f021 0101 	bic.w	r1, r1, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8003042:	3a01      	subs	r2, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8003044:	430a      	orrs	r2, r1
 8003046:	621a      	str	r2, [r3, #32]
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003048:	6959      	ldr	r1, [r3, #20]
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800304a:	7ce2      	ldrb	r2, [r4, #19]
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800304c:	f021 0101 	bic.w	r1, r1, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8003050:	3a01      	subs	r2, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]
  if (config->enable_oschp == true)
 8003056:	bb18      	cbnz	r0, 80030a0 <XMC_SCU_CLOCK_Init+0xc8>
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <XMC_SCU_CLOCK_Init+0x120>)
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800305a:	78e1      	ldrb	r1, [r4, #3]
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800305c:	6953      	ldr	r3, [r2, #20]
  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800305e:	b991      	cbnz	r1, 8003086 <XMC_SCU_CLOCK_Init+0xae>
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6153      	str	r3, [r2, #20]
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800306a:	68e3      	ldr	r3, [r4, #12]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d104      	bne.n	800307c <XMC_SCU_CLOCK_Init+0xa4>
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <XMC_SCU_CLOCK_Init+0x114>)
 8003074:	68d3      	ldr	r3, [r2, #12]
 8003076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	b002      	add	sp, #8
 800307e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SystemCoreClockUpdate();
 8003082:	f000 bb8b 	b.w	800379c <SystemCoreClockUpdate>
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	f023 0302 	bic.w	r3, r3, #2
 800308e:	6153      	str	r3, [r2, #20]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003090:	78a0      	ldrb	r0, [r4, #2]
 8003092:	7823      	ldrb	r3, [r4, #0]
 8003094:	7862      	ldrb	r2, [r4, #1]
 8003096:	9000      	str	r0, [sp, #0]
 8003098:	88a0      	ldrh	r0, [r4, #4]
 800309a:	f7ff fec7 	bl	8002e2c <XMC_SCU_CLOCK_StartSystemPll>
 800309e:	e7e4      	b.n	800306a <XMC_SCU_CLOCK_Init+0x92>
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80030a0:	4d15      	ldr	r5, [pc, #84]	; (80030f8 <XMC_SCU_CLOCK_Init+0x120>)
 80030a2:	696b      	ldr	r3, [r5, #20]
 80030a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a8:	616b      	str	r3, [r5, #20]
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80030aa:	686e      	ldr	r6, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80030ac:	f000 fb72 	bl	8003794 <OSCHP_GetFrequency>
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <XMC_SCU_CLOCK_Init+0x124>)
 80030b2:	fba3 2300 	umull	r2, r3, r3, r0
 80030b6:	0d1b      	lsrs	r3, r3, #20
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80030b8:	f426 2270 	bic.w	r2, r6, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80030bc:	3b01      	subs	r3, #1
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80030be:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80030c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80030c6:	606b      	str	r3, [r5, #4]
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80030c8:	696b      	ldr	r3, [r5, #20]
 80030ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030ce:	616b      	str	r3, [r5, #20]
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80030d0:	692b      	ldr	r3, [r5, #16]
 80030d2:	f403 7360 	and.w	r3, r3, #896	; 0x380
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80030d6:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80030da:	d1f9      	bne.n	80030d0 <XMC_SCU_CLOCK_Init+0xf8>
 80030dc:	e7bc      	b.n	8003058 <XMC_SCU_CLOCK_Init+0x80>
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80030de:	f7ff fde7 	bl	8002cb0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80030e2:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <XMC_SCU_CLOCK_Init+0x11c>)
 80030e4:	6813      	ldr	r3, [r2, #0]
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80030e6:	0719      	lsls	r1, r3, #28
 80030e8:	d4fc      	bmi.n	80030e4 <XMC_SCU_CLOCK_Init+0x10c>
 80030ea:	e782      	b.n	8002ff2 <XMC_SCU_CLOCK_Init+0x1a>
 80030ec:	50004600 	.word	0x50004600
 80030f0:	50004000 	.word	0x50004000
 80030f4:	50004300 	.word	0x50004300
 80030f8:	50004700 	.word	0x50004700
 80030fc:	6b5fca6b 	.word	0x6b5fca6b

08003100 <XMC_SCU_CLOCK_StopSystemPll>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8003100:	4a02      	ldr	r2, [pc, #8]	; (800310c <XMC_SCU_CLOCK_StopSystemPll+0xc>)
 8003102:	6953      	ldr	r3, [r2, #20]
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6153      	str	r3, [r2, #20]
}
 800310a:	4770      	bx	lr
 800310c:	50004700 	.word	0x50004700

08003110 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
{
 8003112:	b508      	push	{r3, lr}
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8003114:	6993      	ldr	r3, [r2, #24]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8003116:	3801      	subs	r0, #1
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8003118:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800311c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003120:	6193      	str	r3, [r2, #24]
  SystemCoreClockUpdate();
 8003122:	f000 fb3b 	bl	800379c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x3c>)
 8003128:	4909      	ldr	r1, [pc, #36]	; (8003150 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x40>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	fba1 1202 	umull	r1, r2, r1, r2
 8003130:	2332      	movs	r3, #50	; 0x32
 8003132:	0c92      	lsrs	r2, r2, #18
 8003134:	fb03 f202 	mul.w	r2, r3, r2
  for (i = 0U; i < delay; ++i)
 8003138:	b122      	cbz	r2, 8003144 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x34>
 800313a:	2300      	movs	r3, #0
    __NOP();
 800313c:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 800313e:	3301      	adds	r3, #1
 8003140:	429a      	cmp	r2, r3
 8003142:	d1fb      	bne.n	800313c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>

  XMC_SCU_lDelay(50U);
}
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop
 8003148:	50004700 	.word	0x50004700
 800314c:	2000ffc0 	.word	0x2000ffc0
 8003150:	431bde83 	.word	0x431bde83

08003154 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <XMC_SCU_CLOCK_IsSystemPllLocked+0xc>)
 8003156:	6918      	ldr	r0, [r3, #16]
}
 8003158:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	50004700 	.word	0x50004700

08003164 <XMC_SCU_INTERRUPT_SetEventHandler>:
{
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003164:	f010 0301 	ands.w	r3, r0, #1
 8003168:	d002      	beq.n	8003170 <XMC_SCU_INTERRUPT_SetEventHandler+0xc>
 800316a:	e00f      	b.n	800318c <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d00b      	beq.n	8003188 <XMC_SCU_INTERRUPT_SetEventHandler+0x24>
  {
    index++;
 8003170:	3301      	adds	r3, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8003172:	fa20 f203 	lsr.w	r2, r0, r3
 8003176:	07d2      	lsls	r2, r2, #31
 8003178:	d5f8      	bpl.n	800316c <XMC_SCU_INTERRUPT_SetEventHandler+0x8>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 800317a:	2b20      	cmp	r3, #32
 800317c:	d004      	beq.n	8003188 <XMC_SCU_INTERRUPT_SetEventHandler+0x24>
  {
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>)
    status = XMC_SCU_STATUS_OK;      
 8003180:	2000      	movs	r0, #0
    event_handler_list[index] = handler;
 8003182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8003186:	4770      	bx	lr
    status = XMC_SCU_STATUS_ERROR;
 8003188:	2001      	movs	r0, #1
  }
  
  return (status);
}
 800318a:	4770      	bx	lr
  index = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	e7f6      	b.n	800317e <XMC_SCU_INTERRUPT_SetEventHandler+0x1a>
 8003190:	20000ab4 	.word	0x20000ab4

08003194 <XMC_SCU_IRQHandler>:
  return (SCU_INTERRUPT->SRRAW);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <XMC_SCU_IRQHandler+0x30>)

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8003196:	b510      	push	{r4, lr}
  return (SCU_INTERRUPT->SRRAW);
 8003198:	6f9a      	ldr	r2, [r3, #120]	; 0x78
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 800319a:	2400      	movs	r4, #0
 800319c:	e002      	b.n	80031a4 <XMC_SCU_IRQHandler+0x10>
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
      
      break;
    }   
    index++;    
 800319e:	3401      	adds	r4, #1
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80031a0:	2c20      	cmp	r4, #32
 80031a2:	d00e      	beq.n	80031c2 <XMC_SCU_IRQHandler+0x2e>
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 80031a4:	fa22 f304 	lsr.w	r3, r2, r4
 80031a8:	07db      	lsls	r3, r3, #31
 80031aa:	d5f8      	bpl.n	800319e <XMC_SCU_IRQHandler+0xa>
      event_handler = event_handler_list[index];
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <XMC_SCU_IRQHandler+0x34>)
 80031ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
      if (event_handler != NULL)
 80031b2:	b103      	cbz	r3, 80031b6 <XMC_SCU_IRQHandler+0x22>
          (event_handler)();
 80031b4:	4798      	blx	r3
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80031b6:	4a03      	ldr	r2, [pc, #12]	; (80031c4 <XMC_SCU_IRQHandler+0x30>)
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80031b8:	2301      	movs	r3, #1
 80031ba:	fa03 f404 	lsl.w	r4, r3, r4
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80031be:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
  }
}
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	50004000 	.word	0x50004000
 80031c8:	20000ab4 	.word	0x20000ab4

080031cc <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80031cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80031d0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8003278 <Endpoint_Write_Stream_LE+0xac>
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80031d4:	4607      	mov	r7, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80031d6:	f89a b13c 	ldrb.w	fp, [sl, #316]	; 0x13c
uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80031da:	460d      	mov	r5, r1
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
	if (BytesProcessed!=NULL) {
 80031dc:	4690      	mov	r8, r2
 80031de:	2a00      	cmp	r2, #0
 80031e0:	d041      	beq.n	8003266 <Endpoint_Write_Stream_LE+0x9a>
		Length -= *BytesProcessed;
 80031e2:	8816      	ldrh	r6, [r2, #0]
 80031e4:	1b8d      	subs	r5, r1, r6
 80031e6:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 80031e8:	242c      	movs	r4, #44	; 0x2c
 80031ea:	fb04 a40b 	mla	r4, r4, fp, sl
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			prev_length = Length;
			Length -= Bytes;
 80031ee:	f04f 0900 	mov.w	r9, #0
	while (Length) {
 80031f2:	b1f5      	cbz	r5, 8003232 <Endpoint_Write_Stream_LE+0x66>
		if (ep->InInUse)
 80031f4:	68a3      	ldr	r3, [r4, #8]
 80031f6:	06db      	lsls	r3, r3, #27
 80031f8:	d4fb      	bmi.n	80031f2 <Endpoint_Write_Stream_LE+0x26>
		if (Endpoint_IsReadWriteAllowed()) {
 80031fa:	f7fe ffcd 	bl	8002198 <Endpoint_IsReadWriteAllowed>
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80031fe:	19b9      	adds	r1, r7, r6
		if (Endpoint_IsReadWriteAllowed()) {
 8003200:	b330      	cbz	r0, 8003250 <Endpoint_Write_Stream_LE+0x84>
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003202:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003206:	69e0      	ldr	r0, [r4, #28]
 8003208:	eba2 0900 	sub.w	r9, r2, r0
 800320c:	45a9      	cmp	r9, r5
 800320e:	bf28      	it	cs
 8003210:	46a9      	movcs	r9, r5
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003212:	464a      	mov	r2, r9
 8003214:	4418      	add	r0, r3
 8003216:	f000 fa01 	bl	800361c <thumb2_memcpy>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 800321a:	fa1f f389 	uxth.w	r3, r9
			ep->InBytesAvailable += Bytes;
 800321e:	69e2      	ldr	r2, [r4, #28]
			BytesTransfered += Bytes;
 8003220:	441e      	add	r6, r3
			Length -= Bytes;
 8003222:	1aeb      	subs	r3, r5, r3
			ep->InBytesAvailable += Bytes;
 8003224:	444a      	add	r2, r9
 8003226:	46a9      	mov	r9, r5
			Length -= Bytes;
 8003228:	b29d      	uxth	r5, r3
			ep->InBytesAvailable += Bytes;
 800322a:	61e2      	str	r2, [r4, #28]
			BytesTransfered += Bytes;
 800322c:	b2b6      	uxth	r6, r6
	while (Length) {
 800322e:	2d00      	cmp	r5, #0
 8003230:	d1e0      	bne.n	80031f4 <Endpoint_Write_Stream_LE+0x28>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 8003232:	232c      	movs	r3, #44	; 0x2c
 8003234:	fb03 aa0b 	mla	sl, r3, fp, sl
	{
	   zlp_flag = true;
	}
	return ENDPOINT_RWSTREAM_NoError;
 8003238:	4628      	mov	r0, r5
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 800323a:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800323e:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8003242:	454b      	cmp	r3, r9
	   zlp_flag = true;
 8003244:	bf02      	ittt	eq
 8003246:	4b0b      	ldreq	r3, [pc, #44]	; (8003274 <Endpoint_Write_Stream_LE+0xa8>)
 8003248:	2201      	moveq	r2, #1
 800324a:	701a      	strbeq	r2, [r3, #0]
}
 800324c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Endpoint_ClearIN();
 8003250:	f7fe ff58 	bl	8002104 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003254:	f1b8 0f00 	cmp.w	r8, #0
 8003258:	d107      	bne.n	800326a <Endpoint_Write_Stream_LE+0x9e>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 800325a:	f7fe fed9 	bl	8002010 <Endpoint_WaitUntilReady>
 800325e:	2800      	cmp	r0, #0
 8003260:	d0c7      	beq.n	80031f2 <Endpoint_Write_Stream_LE+0x26>
}
 8003262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t BytesTransfered = 0;
 8003266:	4616      	mov	r6, r2
 8003268:	e7be      	b.n	80031e8 <Endpoint_Write_Stream_LE+0x1c>
				*BytesProcessed = BytesTransfered;
 800326a:	f8a8 6000 	strh.w	r6, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800326e:	2005      	movs	r0, #5
}
 8003270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003274:	20000b34 	.word	0x20000b34
 8003278:	20000520 	.word	0x20000520

0800327c <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
	uint32_t i = 0;
	while(i<Length) {
 800327c:	b162      	cbz	r2, 8003298 <SwapCopy+0x1c>
 800327e:	3801      	subs	r0, #1
 8003280:	1e4b      	subs	r3, r1, #1
 8003282:	4410      	add	r0, r2
 8003284:	4411      	add	r1, r2
 8003286:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800328a:	181a      	adds	r2, r3, r0
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800328c:	1ad1      	subs	r1, r2, r3
 800328e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003292:	7008      	strb	r0, [r1, #0]
	while(i<Length) {
 8003294:	4563      	cmp	r3, ip
 8003296:	d1f9      	bne.n	800328c <SwapCopy+0x10>
		i++;
	}
}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 800329c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <Endpoint_Write_Stream_BE+0xa4>)
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80032a2:	4680      	mov	r8, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80032a4:	f893 913c 	ldrb.w	r9, [r3, #316]	; 0x13c
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80032a8:	460d      	mov	r5, r1
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80032aa:	4617      	mov	r7, r2
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d040      	beq.n	8003332 <Endpoint_Write_Stream_BE+0x96>
		Length -= *BytesProcessed;
 80032b0:	8816      	ldrh	r6, [r2, #0]
 80032b2:	1b8d      	subs	r5, r1, r6
 80032b4:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 80032b6:	222c      	movs	r2, #44	; 0x2c
 80032b8:	fb02 3909 	mla	r9, r2, r9, r3
	while (Length) {
 80032bc:	b3b5      	cbz	r5, 800332c <Endpoint_Write_Stream_BE+0x90>
		if (ep->InInUse)
 80032be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80032c2:	06db      	lsls	r3, r3, #27
 80032c4:	d4fa      	bmi.n	80032bc <Endpoint_Write_Stream_BE+0x20>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 80032c6:	f7fe ff67 	bl	8002198 <Endpoint_IsReadWriteAllowed>
 80032ca:	b940      	cbnz	r0, 80032de <Endpoint_Write_Stream_BE+0x42>
			ep->InBytesAvailable += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else {
			Endpoint_ClearIN();
 80032cc:	f7fe ff1a 	bl	8002104 <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80032d0:	bb8f      	cbnz	r7, 8003336 <Endpoint_Write_Stream_BE+0x9a>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80032d2:	f7fe fe9d 	bl	8002010 <Endpoint_WaitUntilReady>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d0f0      	beq.n	80032bc <Endpoint_Write_Stream_BE+0x20>


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
}
 80032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80032de:	e9d9 4208 	ldrd	r4, r2, [r9, #32]
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80032e2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80032e6:	1ad2      	subs	r2, r2, r3
 80032e8:	42aa      	cmp	r2, r5
 80032ea:	bf28      	it	cs
 80032ec:	462a      	movcs	r2, r5
 80032ee:	b291      	uxth	r1, r2
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 80032f0:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80032f4:	eb08 0006 	add.w	r0, r8, r6
	while(i<Length) {
 80032f8:	b17a      	cbz	r2, 800331a <Endpoint_Write_Stream_BE+0x7e>
 80032fa:	4464      	add	r4, ip
 80032fc:	4603      	mov	r3, r0
 80032fe:	4414      	add	r4, r2
 8003300:	4410      	add	r0, r2
 8003302:	441c      	add	r4, r3
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8003304:	f893 e000 	ldrb.w	lr, [r3]
 8003308:	eba4 0c03 	sub.w	ip, r4, r3
	while(i<Length) {
 800330c:	3301      	adds	r3, #1
 800330e:	4298      	cmp	r0, r3
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 8003310:	f88c e000 	strb.w	lr, [ip]
	while(i<Length) {
 8003314:	d1f6      	bne.n	8003304 <Endpoint_Write_Stream_BE+0x68>
			ep->InBytesAvailable += Bytes;
 8003316:	f8d9 301c 	ldr.w	r3, [r9, #28]
			Length -= Bytes;
 800331a:	1a6d      	subs	r5, r5, r1
			ep->InBytesAvailable += Bytes;
 800331c:	441a      	add	r2, r3
			BytesTransfered += Bytes;
 800331e:	440e      	add	r6, r1
			Length -= Bytes;
 8003320:	b2ad      	uxth	r5, r5
			ep->InBytesAvailable += Bytes;
 8003322:	f8c9 201c 	str.w	r2, [r9, #28]
			BytesTransfered += Bytes;
 8003326:	b2b6      	uxth	r6, r6
	while (Length) {
 8003328:	2d00      	cmp	r5, #0
 800332a:	d1c8      	bne.n	80032be <Endpoint_Write_Stream_BE+0x22>
	return ENDPOINT_RWSTREAM_NoError;
 800332c:	4628      	mov	r0, r5
}
 800332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint16_t BytesTransfered = 0;
 8003332:	4616      	mov	r6, r2
 8003334:	e7bf      	b.n	80032b6 <Endpoint_Write_Stream_BE+0x1a>
				*BytesProcessed = BytesTransfered;
 8003336:	803e      	strh	r6, [r7, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003338:	2005      	movs	r0, #5
}
 800333a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333e:	bf00      	nop
 8003340:	20000520 	.word	0x20000520

08003344 <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003348:	4c22      	ldr	r4, [pc, #136]	; (80033d4 <Endpoint_Read_Stream_LE+0x90>)
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 800334a:	4607      	mov	r7, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800334c:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003350:	460d      	mov	r5, r1
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003352:	4690      	mov	r8, r2
 8003354:	2a00      	cmp	r2, #0
 8003356:	d036      	beq.n	80033c6 <Endpoint_Read_Stream_LE+0x82>
		Length -= *BytesProcessed;
 8003358:	8816      	ldrh	r6, [r2, #0]
 800335a:	1b8d      	subs	r5, r1, r6
 800335c:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->OutInUse)
 800335e:	222c      	movs	r2, #44	; 0x2c
 8003360:	fb02 4403 	mla	r4, r2, r3, r4
	while (Length) {
 8003364:	b30d      	cbz	r5, 80033aa <Endpoint_Read_Stream_LE+0x66>
		if (ep->OutInUse)
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	071b      	lsls	r3, r3, #28
 800336a:	d4fb      	bmi.n	8003364 <Endpoint_Read_Stream_LE+0x20>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 800336c:	f7fe ff14 	bl	8002198 <Endpoint_IsReadWriteAllowed>
 8003370:	4603      	mov	r3, r0
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003372:	19b8      	adds	r0, r7, r6
		if (Endpoint_IsReadWriteAllowed()) {
 8003374:	b1e3      	cbz	r3, 80033b0 <Endpoint_Read_Stream_LE+0x6c>
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003376:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800337a:	42ab      	cmp	r3, r5
 800337c:	bf28      	it	cs
 800337e:	462b      	movcs	r3, r5
 8003380:	4699      	mov	r9, r3
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003382:	461a      	mov	r2, r3
 8003384:	6963      	ldr	r3, [r4, #20]
 8003386:	4419      	add	r1, r3
 8003388:	f000 f948 	bl	800361c <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
			ep->OutOffset += Bytes;
 800338c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003390:	fa1f f189 	uxth.w	r1, r9
			BytesTransfered += Bytes;
			Length -= Bytes;
 8003394:	1a6d      	subs	r5, r5, r1
			ep->OutBytesAvailable -= Bytes;
 8003396:	eba2 0209 	sub.w	r2, r2, r9
			ep->OutOffset += Bytes;
 800339a:	444b      	add	r3, r9
			BytesTransfered += Bytes;
 800339c:	440e      	add	r6, r1
			Length -= Bytes;
 800339e:	b2ad      	uxth	r5, r5
			ep->OutOffset += Bytes;
 80033a0:	e9c4 2303 	strd	r2, r3, [r4, #12]
			BytesTransfered += Bytes;
 80033a4:	b2b6      	uxth	r6, r6
	while (Length) {
 80033a6:	2d00      	cmp	r5, #0
 80033a8:	d1dd      	bne.n	8003366 <Endpoint_Read_Stream_LE+0x22>
				return ErrorCode;
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80033aa:	4628      	mov	r0, r5
}
 80033ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			Endpoint_ClearOUT();
 80033b0:	f7fe fe7e 	bl	80020b0 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 80033b4:	f1b8 0f00 	cmp.w	r8, #0
 80033b8:	d107      	bne.n	80033ca <Endpoint_Read_Stream_LE+0x86>
			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80033ba:	f7fe fe29 	bl	8002010 <Endpoint_WaitUntilReady>
 80033be:	2800      	cmp	r0, #0
 80033c0:	d0d0      	beq.n	8003364 <Endpoint_Read_Stream_LE+0x20>
}
 80033c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint16_t BytesTransfered = 0;
 80033c6:	4616      	mov	r6, r2
 80033c8:	e7c9      	b.n	800335e <Endpoint_Read_Stream_LE+0x1a>
				*BytesProcessed = BytesTransfered;
 80033ca:	f8a8 6000 	strh.w	r6, [r8]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80033ce:	2005      	movs	r0, #5
}
 80033d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d4:	20000520 	.word	0x20000520

080033d8 <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80033d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80033dc:	4b29      	ldr	r3, [pc, #164]	; (8003484 <Endpoint_Read_Stream_BE+0xac>)
uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80033de:	4680      	mov	r8, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80033e0:	f893 913c 	ldrb.w	r9, [r3, #316]	; 0x13c
uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80033e4:	460d      	mov	r5, r1
	uint16_t Bytes = 0;
	uint16_t BytesTransfered = 0;
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 80033e6:	4617      	mov	r7, r2
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	d044      	beq.n	8003476 <Endpoint_Read_Stream_BE+0x9e>
		Length -= *BytesProcessed;
 80033ec:	8816      	ldrh	r6, [r2, #0]
 80033ee:	1b8d      	subs	r5, r1, r6
 80033f0:	b2ad      	uxth	r5, r5
		BytesTransfered = *BytesProcessed;
	}

	while (Length) {
		if (ep->InInUse)
 80033f2:	222c      	movs	r2, #44	; 0x2c
 80033f4:	fb02 3909 	mla	r9, r2, r9, r3
	while (Length) {
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	d039      	beq.n	8003470 <Endpoint_Read_Stream_BE+0x98>
		if (ep->InInUse)
 80033fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003400:	06db      	lsls	r3, r3, #27
 8003402:	d4f9      	bmi.n	80033f8 <Endpoint_Read_Stream_BE+0x20>
			continue;
		if (Endpoint_IsReadWriteAllowed()) {
 8003404:	f7fe fec8 	bl	8002198 <Endpoint_IsReadWriteAllowed>
 8003408:	b940      	cbnz	r0, 800341c <Endpoint_Read_Stream_BE+0x44>
			ep->OutOffset += Bytes;
			BytesTransfered += Bytes;
			Length -= Bytes;
		}
		else {
			Endpoint_ClearOUT();
 800340a:	f7fe fe51 	bl	80020b0 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 800340e:	bba7      	cbnz	r7, 800347a <Endpoint_Read_Stream_BE+0xa2>
				*BytesProcessed = BytesTransfered;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003410:	f7fe fdfe 	bl	8002010 <Endpoint_WaitUntilReady>
 8003414:	2800      	cmp	r0, #0
 8003416:	d0ef      	beq.n	80033f8 <Endpoint_Read_Stream_BE+0x20>


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
}
 8003418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 800341c:	e9d9 3203 	ldrd	r3, r2, [r9, #12]
 8003420:	f8d9 4014 	ldr.w	r4, [r9, #20]
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 8003424:	429d      	cmp	r5, r3
 8003426:	4629      	mov	r1, r5
 8003428:	bf28      	it	cs
 800342a:	4619      	movcs	r1, r3
 800342c:	b288      	uxth	r0, r1
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 800342e:	eb08 0c06 	add.w	ip, r8, r6
 8003432:	4422      	add	r2, r4
	while(i<Length) {
 8003434:	b181      	cbz	r1, 8003458 <Endpoint_Read_Stream_BE+0x80>
 8003436:	eb0c 0401 	add.w	r4, ip, r1
 800343a:	4414      	add	r4, r2
 800343c:	4613      	mov	r3, r2
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800343e:	3c01      	subs	r4, #1
 8003440:	440a      	add	r2, r1
 8003442:	f893 e000 	ldrb.w	lr, [r3]
 8003446:	eba4 0c03 	sub.w	ip, r4, r3
	while(i<Length) {
 800344a:	3301      	adds	r3, #1
 800344c:	429a      	cmp	r2, r3
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 800344e:	f88c e000 	strb.w	lr, [ip]
	while(i<Length) {
 8003452:	d1f6      	bne.n	8003442 <Endpoint_Read_Stream_BE+0x6a>
			ep->OutBytesAvailable -= Bytes;
 8003454:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ep->OutOffset += Bytes;
 8003458:	f8d9 4010 	ldr.w	r4, [r9, #16]
			Length -= Bytes;
 800345c:	1a2d      	subs	r5, r5, r0
			ep->OutBytesAvailable -= Bytes;
 800345e:	1a5a      	subs	r2, r3, r1
			BytesTransfered += Bytes;
 8003460:	4406      	add	r6, r0
			ep->OutOffset += Bytes;
 8003462:	1863      	adds	r3, r4, r1
			Length -= Bytes;
 8003464:	b2ad      	uxth	r5, r5
			ep->OutOffset += Bytes;
 8003466:	e9c9 2303 	strd	r2, r3, [r9, #12]
			BytesTransfered += Bytes;
 800346a:	b2b6      	uxth	r6, r6
	while (Length) {
 800346c:	2d00      	cmp	r5, #0
 800346e:	d1c5      	bne.n	80033fc <Endpoint_Read_Stream_BE+0x24>
	return ENDPOINT_RWSTREAM_NoError;
 8003470:	4628      	mov	r0, r5
}
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint16_t BytesTransfered = 0;
 8003476:	4616      	mov	r6, r2
 8003478:	e7bb      	b.n	80033f2 <Endpoint_Read_Stream_BE+0x1a>
				*BytesProcessed = BytesTransfered;
 800347a:	803e      	strh	r6, [r7, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800347c:	2005      	movs	r0, #5
}
 800347e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003482:	bf00      	nop
 8003484:	20000520 	.word	0x20000520

08003488 <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (!EndPoint->InInUse) {
 800348a:	4e10      	ldr	r6, [pc, #64]	; (80034cc <Endpoint_Write_Control_Stream_LE+0x44>)
uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 800348c:	4607      	mov	r7, r0
 800348e:	460c      	mov	r4, r1
	while (Length) {
 8003490:	b1d4      	cbz	r4, 80034c8 <Endpoint_Write_Control_Stream_LE+0x40>
		if (!EndPoint->InInUse) {
 8003492:	68b3      	ldr	r3, [r6, #8]
 8003494:	f3c3 1c00 	ubfx	ip, r3, #4, #1
 8003498:	06db      	lsls	r3, r3, #27
 800349a:	d4f9      	bmi.n	8003490 <Endpoint_Write_Control_Stream_LE+0x8>
			if (EndPoint->InBufferLength > Length) {
 800349c:	6a73      	ldr	r3, [r6, #36]	; 0x24
				Bytes = Length;
			} else {
				Bytes = EndPoint->InBufferLength;
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 800349e:	6a30      	ldr	r0, [r6, #32]
			if (EndPoint->InBufferLength > Length) {
 80034a0:	42a3      	cmp	r3, r4
			EndPoint->InBytesAvailable += Bytes;
			Length -= Bytes;
 80034a2:	eba4 0203 	sub.w	r2, r4, r3
			if (EndPoint->InBufferLength > Length) {
 80034a6:	4625      	mov	r5, r4
			Length -= Bytes;
 80034a8:	bf9c      	itt	ls
 80034aa:	461d      	movls	r5, r3
 80034ac:	b294      	uxthls	r4, r2
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 80034ae:	4639      	mov	r1, r7
 80034b0:	462a      	mov	r2, r5
 80034b2:	bf88      	it	hi
 80034b4:	4664      	movhi	r4, ip
 80034b6:	f000 f8b1 	bl	800361c <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 80034ba:	69f3      	ldr	r3, [r6, #28]
 80034bc:	442b      	add	r3, r5
 80034be:	61f3      	str	r3, [r6, #28]

			Endpoint_ClearIN();
 80034c0:	f7fe fe20 	bl	8002104 <Endpoint_ClearIN>
	while (Length) {
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d1e4      	bne.n	8003492 <Endpoint_Write_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 80034c8:	4620      	mov	r0, r4
 80034ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034cc:	20000520 	.word	0x20000520

080034d0 <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!EndPoint->InInUse) {
 80034d2:	4e10      	ldr	r6, [pc, #64]	; (8003514 <Endpoint_Write_Control_Stream_BE+0x44>)
uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 80034d4:	4607      	mov	r7, r0
 80034d6:	460c      	mov	r4, r1
	while (Length) {
 80034d8:	b1d4      	cbz	r4, 8003510 <Endpoint_Write_Control_Stream_BE+0x40>
		if (!EndPoint->InInUse) {
 80034da:	68b3      	ldr	r3, [r6, #8]
 80034dc:	f3c3 1c00 	ubfx	ip, r3, #4, #1
 80034e0:	06db      	lsls	r3, r3, #27
 80034e2:	d4f9      	bmi.n	80034d8 <Endpoint_Write_Control_Stream_BE+0x8>
			if (EndPoint->InBufferLength > Length) {
 80034e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 80034e6:	6a30      	ldr	r0, [r6, #32]
			if (EndPoint->InBufferLength > Length) {
 80034e8:	42a3      	cmp	r3, r4
			Length -= Bytes;
 80034ea:	eba4 0203 	sub.w	r2, r4, r3
			if (EndPoint->InBufferLength > Length) {
 80034ee:	4625      	mov	r5, r4
			Length -= Bytes;
 80034f0:	bf9c      	itt	ls
 80034f2:	461d      	movls	r5, r3
 80034f4:	b294      	uxthls	r4, r2
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 80034f6:	4639      	mov	r1, r7
 80034f8:	462a      	mov	r2, r5
 80034fa:	bf88      	it	hi
 80034fc:	4664      	movhi	r4, ip
 80034fe:	f000 f88d 	bl	800361c <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003502:	69f3      	ldr	r3, [r6, #28]
 8003504:	442b      	add	r3, r5
 8003506:	61f3      	str	r3, [r6, #28]
			Endpoint_ClearIN();
 8003508:	f7fe fdfc 	bl	8002104 <Endpoint_ClearIN>
	while (Length) {
 800350c:	2c00      	cmp	r4, #0
 800350e:	d1e4      	bne.n	80034da <Endpoint_Write_Control_Stream_BE+0xa>
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
}
 8003510:	4620      	mov	r0, r4
 8003512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003514:	20000520 	.word	0x20000520

08003518 <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
	uint16_t Bytes;

	while (Length) {
		if (EndPoint->IsOutRecieved) {
 800351a:	4d0d      	ldr	r5, [pc, #52]	; (8003550 <Endpoint_Read_Control_Stream_LE+0x38>)
uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 800351c:	4607      	mov	r7, r0
 800351e:	460c      	mov	r4, r1
	while (Length) {
 8003520:	b1a4      	cbz	r4, 800354c <Endpoint_Read_Control_Stream_LE+0x34>
		if (EndPoint->IsOutRecieved) {
 8003522:	68ab      	ldr	r3, [r5, #8]
 8003524:	069b      	lsls	r3, r3, #26
 8003526:	d5fb      	bpl.n	8003520 <Endpoint_Read_Control_Stream_LE+0x8>
			Bytes = EndPoint->OutBytesAvailable > Length
					? Length : EndPoint->OutBytesAvailable;
 8003528:	68ee      	ldr	r6, [r5, #12]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 800352a:	6969      	ldr	r1, [r5, #20]
					? Length : EndPoint->OutBytesAvailable;
 800352c:	42a6      	cmp	r6, r4
 800352e:	bf28      	it	cs
 8003530:	4626      	movcs	r6, r4
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003532:	4632      	mov	r2, r6
 8003534:	4638      	mov	r0, r7
 8003536:	f000 f871 	bl	800361c <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 800353a:	68eb      	ldr	r3, [r5, #12]
			Length -= Bytes;
 800353c:	1ba4      	subs	r4, r4, r6
			EndPoint->OutBytesAvailable -= Bytes;
 800353e:	1b9b      	subs	r3, r3, r6
			Length -= Bytes;
 8003540:	b2a4      	uxth	r4, r4
			EndPoint->OutBytesAvailable -= Bytes;
 8003542:	60eb      	str	r3, [r5, #12]

			Endpoint_ClearOUT();
 8003544:	f7fe fdb4 	bl	80020b0 <Endpoint_ClearOUT>
	while (Length) {
 8003548:	2c00      	cmp	r4, #0
 800354a:	d1ea      	bne.n	8003522 <Endpoint_Read_Control_Stream_LE+0xa>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
}
 800354c:	4620      	mov	r0, r4
 800354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003550:	20000520 	.word	0x20000520

08003554 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (EndPoint->IsOutRecieved) {
 8003556:	4d0d      	ldr	r5, [pc, #52]	; (800358c <Endpoint_Read_Control_Stream_BE+0x38>)
uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003558:	4607      	mov	r7, r0
 800355a:	460c      	mov	r4, r1
	while (Length) {
 800355c:	b1a4      	cbz	r4, 8003588 <Endpoint_Read_Control_Stream_BE+0x34>
		if (EndPoint->IsOutRecieved) {
 800355e:	68ab      	ldr	r3, [r5, #8]
 8003560:	069b      	lsls	r3, r3, #26
 8003562:	d5fb      	bpl.n	800355c <Endpoint_Read_Control_Stream_BE+0x8>
					? Length : EndPoint->OutBytesAvailable;
 8003564:	68ee      	ldr	r6, [r5, #12]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003566:	6969      	ldr	r1, [r5, #20]
					? Length : EndPoint->OutBytesAvailable;
 8003568:	42a6      	cmp	r6, r4
 800356a:	bf28      	it	cs
 800356c:	4626      	movcs	r6, r4
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 800356e:	4632      	mov	r2, r6
 8003570:	4638      	mov	r0, r7
 8003572:	f000 f853 	bl	800361c <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003576:	68eb      	ldr	r3, [r5, #12]
			Length -= Bytes;
 8003578:	1ba4      	subs	r4, r4, r6
			EndPoint->OutBytesAvailable -= Bytes;
 800357a:	1b9b      	subs	r3, r3, r6
			Length -= Bytes;
 800357c:	b2a4      	uxth	r4, r4
			EndPoint->OutBytesAvailable -= Bytes;
 800357e:	60eb      	str	r3, [r5, #12]
			Endpoint_ClearOUT();
 8003580:	f7fe fd96 	bl	80020b0 <Endpoint_ClearOUT>
	while (Length) {
 8003584:	2c00      	cmp	r4, #0
 8003586:	d1ea      	bne.n	800355e <Endpoint_Read_Control_Stream_BE+0xa>
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
}
 8003588:	4620      	mov	r0, r4
 800358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800358c:	20000520 	.word	0x20000520

08003590 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003594:	4c20      	ldr	r4, [pc, #128]	; (8003618 <Endpoint_Null_Stream+0x88>)
								 uint16_t* const BytesProcessed) {
 8003596:	4605      	mov	r5, r0
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003598:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
		uint16_t Bytes = 0;
		uint16_t BytesTransfered = 0;
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 800359c:	4688      	mov	r8, r1
 800359e:	2900      	cmp	r1, #0
 80035a0:	d032      	beq.n	8003608 <Endpoint_Null_Stream+0x78>
			Length -= *BytesProcessed;
 80035a2:	880f      	ldrh	r7, [r1, #0]
 80035a4:	1bc5      	subs	r5, r0, r7
 80035a6:	b2ad      	uxth	r5, r5
			BytesTransfered = *BytesProcessed;
		}

		while (Length) {
			if (ep->InInUse)
 80035a8:	222c      	movs	r2, #44	; 0x2c
 80035aa:	fb02 4403 	mla	r4, r2, r3, r4
		while (Length) {
 80035ae:	b1ed      	cbz	r5, 80035ec <Endpoint_Null_Stream+0x5c>
			if (ep->InInUse)
 80035b0:	68a3      	ldr	r3, [r4, #8]
 80035b2:	f3c3 1600 	ubfx	r6, r3, #4, #1
 80035b6:	06db      	lsls	r3, r3, #27
 80035b8:	d4f9      	bmi.n	80035ae <Endpoint_Null_Stream+0x1e>
				continue;
			if (Endpoint_IsReadWriteAllowed()) {
 80035ba:	f7fe fded 	bl	8002198 <Endpoint_IsReadWriteAllowed>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80035be:	4631      	mov	r1, r6
			if (Endpoint_IsReadWriteAllowed()) {
 80035c0:	b1b8      	cbz	r0, 80035f2 <Endpoint_Null_Stream+0x62>
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80035c2:	f104 001c 	add.w	r0, r4, #28
 80035c6:	c849      	ldmia	r0, {r0, r3, r6}
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80035c8:	1a36      	subs	r6, r6, r0
 80035ca:	42ae      	cmp	r6, r5
 80035cc:	bf28      	it	cs
 80035ce:	462e      	movcs	r6, r5
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 80035d0:	4632      	mov	r2, r6
 80035d2:	4418      	add	r0, r3
 80035d4:	f000 fb04 	bl	8003be0 <memset>
				ep->InBytesAvailable += Bytes;
 80035d8:	69e2      	ldr	r2, [r4, #28]
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 80035da:	b2b3      	uxth	r3, r6
				BytesTransfered += Bytes;
				Length -= Bytes;
 80035dc:	1aed      	subs	r5, r5, r3
				ep->InBytesAvailable += Bytes;
 80035de:	4432      	add	r2, r6
				BytesTransfered += Bytes;
 80035e0:	441f      	add	r7, r3
				Length -= Bytes;
 80035e2:	b2ad      	uxth	r5, r5
				ep->InBytesAvailable += Bytes;
 80035e4:	61e2      	str	r2, [r4, #28]
				BytesTransfered += Bytes;
 80035e6:	b2bf      	uxth	r7, r7
		while (Length) {
 80035e8:	2d00      	cmp	r5, #0
 80035ea:	d1e1      	bne.n	80035b0 <Endpoint_Null_Stream+0x20>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 80035ec:	4628      	mov	r0, r5
}
 80035ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				Endpoint_ClearIN();
 80035f2:	f7fe fd87 	bl	8002104 <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 80035f6:	f1b8 0f00 	cmp.w	r8, #0
 80035fa:	d107      	bne.n	800360c <Endpoint_Null_Stream+0x7c>
				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80035fc:	f7fe fd08 	bl	8002010 <Endpoint_WaitUntilReady>
 8003600:	2800      	cmp	r0, #0
 8003602:	d0d4      	beq.n	80035ae <Endpoint_Null_Stream+0x1e>
}
 8003604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t BytesTransfered = 0;
 8003608:	460f      	mov	r7, r1
 800360a:	e7cd      	b.n	80035a8 <Endpoint_Null_Stream+0x18>
					*BytesProcessed = BytesTransfered;
 800360c:	f8a8 7000 	strh.w	r7, [r8]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003610:	2005      	movs	r0, #5
}
 8003612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003616:	bf00      	nop
 8003618:	20000520 	.word	0x20000520

0800361c <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 800361c:	0913      	lsrs	r3, r2, #4
 800361e:	d011      	beq.n	8003644 <thumb2_memcpy+0x28>
 8003620:	f851 cb04 	ldr.w	ip, [r1], #4
 8003624:	f840 cb04 	str.w	ip, [r0], #4
 8003628:	f851 cb04 	ldr.w	ip, [r1], #4
 800362c:	f840 cb04 	str.w	ip, [r0], #4
 8003630:	f851 cb04 	ldr.w	ip, [r1], #4
 8003634:	f840 cb04 	str.w	ip, [r0], #4
 8003638:	f851 cb04 	ldr.w	ip, [r1], #4
 800363c:	f840 cb04 	str.w	ip, [r0], #4
 8003640:	3b01      	subs	r3, #1
 8003642:	d1ed      	bne.n	8003620 <thumb2_memcpy+0x4>
 8003644:	f012 030f 	ands.w	r3, r2, #15
 8003648:	d005      	beq.n	8003656 <thumb2_memcpy+0x3a>
 800364a:	f811 cb01 	ldrb.w	ip, [r1], #1
 800364e:	f800 cb01 	strb.w	ip, [r0], #1
 8003652:	3b01      	subs	r3, #1
 8003654:	d1f9      	bne.n	800364a <thumb2_memcpy+0x2e>
 8003656:	4770      	bx	lr

08003658 <XMC_GPIO_SetMode>:
void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003658:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 800365c:	4418      	add	r0, r3
 800365e:	f001 0103 	and.w	r1, r1, #3
 8003662:	6903      	ldr	r3, [r0, #16]
 8003664:	00c9      	lsls	r1, r1, #3
 8003666:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800366a:	408a      	lsls	r2, r1
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800366c:	fa0c f101 	lsl.w	r1, ip, r1
 8003670:	ea23 0301 	bic.w	r3, r3, r1
 8003674:	6103      	str	r3, [r0, #16]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003676:	6903      	ldr	r3, [r0, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	6102      	str	r2, [r0, #16]
}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop

08003680 <XMC_GPIO_SetHardwareControl>:
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003680:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003682:	0049      	lsls	r1, r1, #1
 8003684:	f04f 0c03 	mov.w	ip, #3
 8003688:	fa0c fc01 	lsl.w	ip, ip, r1
 800368c:	ea23 030c 	bic.w	r3, r3, ip
 8003690:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8003692:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003694:	408a      	lsls	r2, r1
 8003696:	431a      	orrs	r2, r3
 8003698:	6742      	str	r2, [r0, #116]	; 0x74
}
 800369a:	4770      	bx	lr

0800369c <XMC_GPIO_Init>:
{
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800369c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 80036a0:	4403      	add	r3, r0
 80036a2:	f001 0c03 	and.w	ip, r1, #3
{
 80036a6:	b530      	push	{r4, r5, lr}
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80036a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80036ac:	691c      	ldr	r4, [r3, #16]
 80036ae:	f04f 0ef8 	mov.w	lr, #248	; 0xf8
 80036b2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80036b6:	ea24 040e 	bic.w	r4, r4, lr
 80036ba:	611c      	str	r4, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80036bc:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80036be:	004d      	lsls	r5, r1, #1
 80036c0:	f04f 0e03 	mov.w	lr, #3
 80036c4:	fa0e fe05 	lsl.w	lr, lr, r5
 80036c8:	ea24 040e 	bic.w	r4, r4, lr
 80036cc:	6744      	str	r4, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80036ce:	4c16      	ldr	r4, [pc, #88]	; (8003728 <XMC_GPIO_Init+0x8c>)
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d019      	beq.n	8003708 <XMC_GPIO_Init+0x6c>
 80036d4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d015      	beq.n	8003708 <XMC_GPIO_Init+0x6c>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80036dc:	6854      	ldr	r4, [r2, #4]
 80036de:	408c      	lsls	r4, r1
 80036e0:	6044      	str	r4, [r0, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80036e2:	08cc      	lsrs	r4, r1, #3
 80036e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80036e8:	f001 0107 	and.w	r1, r1, #7
 80036ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80036ee:	0089      	lsls	r1, r1, #2
 80036f0:	2507      	movs	r5, #7
 80036f2:	408d      	lsls	r5, r1
 80036f4:	ea24 0405 	bic.w	r4, r4, r5
 80036f8:	6404      	str	r4, [r0, #64]	; 0x40
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80036fa:	7a14      	ldrb	r4, [r2, #8]
 80036fc:	fa04 f101 	lsl.w	r1, r4, r1
 8003700:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003702:	4321      	orrs	r1, r4
 8003704:	6401      	str	r1, [r0, #64]	; 0x40
 8003706:	e007      	b.n	8003718 <XMC_GPIO_Init+0x7c>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8003708:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800370a:	f04f 0e01 	mov.w	lr, #1
 800370e:	fa0e f101 	lsl.w	r1, lr, r1
 8003712:	ea24 0101 	bic.w	r1, r4, r1
 8003716:	6601      	str	r1, [r0, #96]	; 0x60
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	6919      	ldr	r1, [r3, #16]
 800371c:	fa02 f20c 	lsl.w	r2, r2, ip
 8003720:	430a      	orrs	r2, r1
 8003722:	611a      	str	r2, [r3, #16]
}
 8003724:	bd30      	pop	{r4, r5, pc}
 8003726:	bf00      	nop
 8003728:	48028e00 	.word	0x48028e00

0800372c <XMC_GPIO_SetOutputStrength>:
void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800372c:	08cb      	lsrs	r3, r1, #3
 800372e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003732:	f001 0107 	and.w	r1, r1, #7
 8003736:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003738:	0089      	lsls	r1, r1, #2
 800373a:	f04f 0c07 	mov.w	ip, #7
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800373e:	408a      	lsls	r2, r1
  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8003740:	fa0c f101 	lsl.w	r1, ip, r1
 8003744:	ea23 0301 	bic.w	r3, r3, r1
 8003748:	6403      	str	r3, [r0, #64]	; 0x40
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800374a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800374c:	431a      	orrs	r2, r3
 800374e:	6402      	str	r2, [r0, #64]	; 0x40
}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <SystemCoreSetup>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003754:	b672      	cpsid	i
{
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003756:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <SystemCoreSetup+0x34>)
 8003758:	4a0c      	ldr	r2, [pc, #48]	; (800378c <SystemCoreSetup+0x38>)
 800375a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800375c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8003760:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003762:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);

  temp = FLASH0->FCON;
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <SystemCoreSetup+0x3c>)
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8003768:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800376c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	f022 0208 	bic.w	r2, r2, #8
 8003776:	615a      	str	r2, [r3, #20]
  temp = FLASH0->FCON;
 8003778:	694b      	ldr	r3, [r1, #20]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800377a:	f023 030f 	bic.w	r3, r3, #15
  temp |= PMU_FLASH_WS;
 800377e:	f043 0303 	orr.w	r3, r3, #3
  FLASH0->FCON = temp;
 8003782:	614b      	str	r3, [r1, #20]
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000ed00 	.word	0xe000ed00
 800378c:	08000000 	.word	0x08000000
 8003790:	58002000 	.word	0x58002000

08003794 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 8003794:	4800      	ldr	r0, [pc, #0]	; (8003798 <OSCHP_GetFrequency+0x4>)
 8003796:	4770      	bx	lr
 8003798:	00b71b00 	.word	0x00b71b00

0800379c <SystemCoreClockUpdate>:
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <SystemCoreClockUpdate+0x74>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	03d9      	lsls	r1, r3, #15
{
 80037a2:	b510      	push	{r4, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80037a4:	d519      	bpl.n	80037da <SystemCoreClockUpdate+0x3e>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <SystemCoreClockUpdate+0x78>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	07da      	lsls	r2, r3, #31
 80037ac:	d52c      	bpl.n	8003808 <SystemCoreClockUpdate+0x6c>
      temp = OFI_FREQUENCY;
 80037ae:	481a      	ldr	r0, [pc, #104]	; (8003818 <SystemCoreClockUpdate+0x7c>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80037b0:	4918      	ldr	r1, [pc, #96]	; (8003814 <SystemCoreClockUpdate+0x78>)
 80037b2:	690b      	ldr	r3, [r1, #16]
 80037b4:	075b      	lsls	r3, r3, #29
 80037b6:	d520      	bpl.n	80037fa <SystemCoreClockUpdate+0x5e>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80037b8:	698c      	ldr	r4, [r1, #24]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80037ba:	698b      	ldr	r3, [r1, #24]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80037bc:	698a      	ldr	r2, [r1, #24]
 80037be:	f3c2 4206 	ubfx	r2, r2, #16, #7
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80037c2:	f3c3 2106 	ubfx	r1, r3, #8, #7
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80037c6:	f3c4 6c03 	ubfx	ip, r4, #24, #4
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80037ca:	3201      	adds	r2, #1
      temp = (temp / (pdiv * kdiv)) * ndiv;
 80037cc:	fb0c 2302 	mla	r3, ip, r2, r2
 80037d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d4:	fb01 3303 	mla	r3, r1, r3, r3
 80037d8:	e000      	b.n	80037dc <SystemCoreClockUpdate+0x40>
    temp = OFI_FREQUENCY;
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <SystemCoreClockUpdate+0x7c>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <SystemCoreClockUpdate+0x74>)
  SystemCoreClock = temp;
 80037de:	490f      	ldr	r1, [pc, #60]	; (800381c <SystemCoreClockUpdate+0x80>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037e0:	68d0      	ldr	r0, [r2, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80037e2:	6912      	ldr	r2, [r2, #16]
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037e4:	b2c0      	uxtb	r0, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80037e6:	f002 0201 	and.w	r2, r2, #1
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037ea:	3001      	adds	r0, #1
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80037ec:	3201      	adds	r2, #1
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037ee:	fbb3 f3f0 	udiv	r3, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80037f2:	fbb3 f3f2 	udiv	r3, r3, r2
  SystemCoreClock = temp;
 80037f6:	600b      	str	r3, [r1, #0]
}
 80037f8:	bd10      	pop	{r4, pc}
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80037fa:	698b      	ldr	r3, [r1, #24]
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 8003802:	fbb0 f3f3 	udiv	r3, r0, r3
 8003806:	e7e9      	b.n	80037dc <SystemCoreClockUpdate+0x40>
      temp = OSCHP_GetFrequency();
 8003808:	f7ff ffc4 	bl	8003794 <OSCHP_GetFrequency>
 800380c:	e7d0      	b.n	80037b0 <SystemCoreClockUpdate+0x14>
 800380e:	bf00      	nop
 8003810:	50004600 	.word	0x50004600
 8003814:	50004700 	.word	0x50004700
 8003818:	016e3600 	.word	0x016e3600
 800381c:	2000ffc0 	.word	0x2000ffc0
{
 8003820:	b510      	push	{r4, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003822:	4a6c      	ldr	r2, [pc, #432]	; (80039d4 <SystemCoreClockUpdate+0x238>)
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	07d8      	lsls	r0, r3, #31
{
 8003828:	b086      	sub	sp, #24
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800382a:	d406      	bmi.n	800383a <SystemCoreClockUpdate+0x9e>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800382c:	6853      	ldr	r3, [r2, #4]
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6053      	str	r3, [r2, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8003834:	6813      	ldr	r3, [r2, #0]
 8003836:	07d9      	lsls	r1, r3, #31
 8003838:	d5fc      	bpl.n	8003834 <SystemCoreClockUpdate+0x98>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <SystemCoreClockUpdate+0x23c>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	0592      	lsls	r2, r2, #22
 8003840:	d511      	bpl.n	8003866 <SystemCoreClockUpdate+0xca>
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8003842:	689a      	ldr	r2, [r3, #8]
  for(i = 0UL; i < cycles ;++i)
 8003844:	2100      	movs	r1, #0
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	609a      	str	r2, [r3, #8]
  for(i = 0UL; i < cycles ;++i)
 800384c:	9101      	str	r1, [sp, #4]
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003854:	4293      	cmp	r3, r2
 8003856:	d806      	bhi.n	8003866 <SystemCoreClockUpdate+0xca>
    __NOP();
 8003858:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	3301      	adds	r3, #1
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	4293      	cmp	r3, r2
 8003864:	d9f8      	bls.n	8003858 <SystemCoreClockUpdate+0xbc>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8003866:	495d      	ldr	r1, [pc, #372]	; (80039dc <SystemCoreClockUpdate+0x240>)
 8003868:	694b      	ldr	r3, [r1, #20]
  for(i = 0UL; i < cycles ;++i)
 800386a:	2000      	movs	r0, #0
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800386c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003870:	614b      	str	r3, [r1, #20]
  for(i = 0UL; i < cycles ;++i)
 8003872:	9002      	str	r0, [sp, #8]
 8003874:	9b02      	ldr	r3, [sp, #8]
 8003876:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800387a:	4293      	cmp	r3, r2
 800387c:	d806      	bhi.n	800388c <SystemCoreClockUpdate+0xf0>
    __NOP();
 800387e:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003880:	9b02      	ldr	r3, [sp, #8]
 8003882:	3301      	adds	r3, #1
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	9b02      	ldr	r3, [sp, #8]
 8003888:	4293      	cmp	r3, r2
 800388a:	d9f8      	bls.n	800387e <SystemCoreClockUpdate+0xe2>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800388c:	4c53      	ldr	r4, [pc, #332]	; (80039dc <SystemCoreClockUpdate+0x240>)
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	f023 0302 	bic.w	r3, r3, #2
 8003898:	6163      	str	r3, [r4, #20]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800389a:	6863      	ldr	r3, [r4, #4]
 800389c:	f013 0f30 	tst.w	r3, #48	; 0x30
 80038a0:	d177      	bne.n	8003992 <SystemCoreClockUpdate+0x1f6>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80038a2:	4b4e      	ldr	r3, [pc, #312]	; (80039dc <SystemCoreClockUpdate+0x240>)
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80038a4:	494e      	ldr	r1, [pc, #312]	; (80039e0 <SystemCoreClockUpdate+0x244>)
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	f042 0201 	orr.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	f042 0210 	orr.w	r2, r2, #16
 80038b4:	615a      	str	r2, [r3, #20]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80038b6:	6199      	str	r1, [r3, #24]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038be:	615a      	str	r2, [r3, #20]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	f022 0210 	bic.w	r2, r2, #16
 80038c6:	615a      	str	r2, [r3, #20]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80038ce:	615a      	str	r2, [r3, #20]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	0754      	lsls	r4, r2, #29
 80038d4:	d5fc      	bpl.n	80038d0 <SystemCoreClockUpdate+0x134>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80038d6:	6959      	ldr	r1, [r3, #20]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80038d8:	4a40      	ldr	r2, [pc, #256]	; (80039dc <SystemCoreClockUpdate+0x240>)
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80038da:	f021 0101 	bic.w	r1, r1, #1
 80038de:	6159      	str	r1, [r3, #20]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80038e0:	6913      	ldr	r3, [r2, #16]
 80038e2:	f013 0301 	ands.w	r3, r3, #1
 80038e6:	d1fb      	bne.n	80038e0 <SystemCoreClockUpdate+0x144>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80038e8:	493e      	ldr	r1, [pc, #248]	; (80039e4 <SystemCoreClockUpdate+0x248>)
 80038ea:	68c8      	ldr	r0, [r1, #12]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80038ec:	2403      	movs	r4, #3
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80038ee:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80038f2:	60c8      	str	r0, [r1, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80038f4:	614b      	str	r3, [r1, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80038f6:	610b      	str	r3, [r1, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80038f8:	620b      	str	r3, [r1, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80038fa:	624b      	str	r3, [r1, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80038fc:	61cb      	str	r3, [r1, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80038fe:	618c      	str	r4, [r1, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003900:	6951      	ldr	r1, [r2, #20]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003902:	4839      	ldr	r0, [pc, #228]	; (80039e8 <SystemCoreClockUpdate+0x24c>)
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8003904:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003908:	6151      	str	r1, [r2, #20]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800390a:	6190      	str	r0, [r2, #24]
  for(i = 0UL; i < cycles ;++i)
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003914:	4293      	cmp	r3, r2
 8003916:	d806      	bhi.n	8003926 <SystemCoreClockUpdate+0x18a>
    __NOP();
 8003918:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800391a:	9b03      	ldr	r3, [sp, #12]
 800391c:	3301      	adds	r3, #1
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	9b03      	ldr	r3, [sp, #12]
 8003922:	4293      	cmp	r3, r2
 8003924:	d9f8      	bls.n	8003918 <SystemCoreClockUpdate+0x17c>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003926:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <SystemCoreClockUpdate+0x240>)
 8003928:	6913      	ldr	r3, [r2, #16]
 800392a:	0758      	lsls	r0, r3, #29
 800392c:	d5fc      	bpl.n	8003928 <SystemCoreClockUpdate+0x18c>
  for(i = 0UL; i < cycles ;++i)
 800392e:	2300      	movs	r3, #0
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003930:	492e      	ldr	r1, [pc, #184]	; (80039ec <SystemCoreClockUpdate+0x250>)
 8003932:	6191      	str	r1, [r2, #24]
  for(i = 0UL; i < cycles ;++i)
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9b04      	ldr	r3, [sp, #16]
 8003938:	f241 1293 	movw	r2, #4499	; 0x1193
 800393c:	4293      	cmp	r3, r2
 800393e:	d806      	bhi.n	800394e <SystemCoreClockUpdate+0x1b2>
    __NOP();
 8003940:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8003942:	9b04      	ldr	r3, [sp, #16]
 8003944:	3301      	adds	r3, #1
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	9b04      	ldr	r3, [sp, #16]
 800394a:	4293      	cmp	r3, r2
 800394c:	d9f8      	bls.n	8003940 <SystemCoreClockUpdate+0x1a4>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800394e:	4a23      	ldr	r2, [pc, #140]	; (80039dc <SystemCoreClockUpdate+0x240>)
 8003950:	6913      	ldr	r3, [r2, #16]
 8003952:	0759      	lsls	r1, r3, #29
 8003954:	d5fc      	bpl.n	8003950 <SystemCoreClockUpdate+0x1b4>
  for(i = 0UL; i < cycles ;++i)
 8003956:	2300      	movs	r3, #0
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8003958:	4925      	ldr	r1, [pc, #148]	; (80039f0 <SystemCoreClockUpdate+0x254>)
 800395a:	6191      	str	r1, [r2, #24]
  for(i = 0UL; i < cycles ;++i)
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	9b05      	ldr	r3, [sp, #20]
 8003960:	f241 726f 	movw	r2, #5999	; 0x176f
 8003964:	4293      	cmp	r3, r2
 8003966:	d806      	bhi.n	8003976 <SystemCoreClockUpdate+0x1da>
    __NOP();
 8003968:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 800396a:	9b05      	ldr	r3, [sp, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	9305      	str	r3, [sp, #20]
 8003970:	9b05      	ldr	r3, [sp, #20]
 8003972:	4293      	cmp	r3, r2
 8003974:	d9f8      	bls.n	8003968 <SystemCoreClockUpdate+0x1cc>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <SystemCoreClockUpdate+0x240>)
 8003978:	6913      	ldr	r3, [r2, #16]
 800397a:	075b      	lsls	r3, r3, #29
 800397c:	d5fc      	bpl.n	8003978 <SystemCoreClockUpdate+0x1dc>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800397e:	491d      	ldr	r1, [pc, #116]	; (80039f4 <SystemCoreClockUpdate+0x258>)
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <SystemCoreClockUpdate+0x248>)
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8003982:	2005      	movs	r0, #5
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003984:	2200      	movs	r2, #0
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8003986:	66c8      	str	r0, [r1, #108]	; 0x6c
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003988:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 800398a:	f7ff ff07 	bl	800379c <SystemCoreClockUpdate>
}
 800398e:	b006      	add	sp, #24
 8003990:	bd10      	pop	{r4, pc}
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8003992:	6863      	ldr	r3, [r4, #4]
 8003994:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003998:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800399c:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800399e:	f7ff fef9 	bl	8003794 <OSCHP_GetFrequency>
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <SystemCoreClockUpdate+0x25c>)
 80039a4:	fba3 2300 	umull	r2, r3, r3, r0
 80039a8:	0d1b      	lsrs	r3, r3, #20
 80039aa:	6862      	ldr	r2, [r4, #4]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80039b2:	6063      	str	r3, [r4, #4]
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80039b4:	69e3      	ldr	r3, [r4, #28]
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	61e3      	str	r3, [r4, #28]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80039bc:	6963      	ldr	r3, [r4, #20]
 80039be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039c2:	6163      	str	r3, [r4, #20]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80039ca:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80039ce:	d1f9      	bne.n	80039c4 <SystemCoreClockUpdate+0x228>
 80039d0:	e767      	b.n	80038a2 <SystemCoreClockUpdate+0x106>
 80039d2:	bf00      	nop
 80039d4:	50004200 	.word	0x50004200
 80039d8:	50004400 	.word	0x50004400
 80039dc:	50004700 	.word	0x50004700
 80039e0:	01134f00 	.word	0x01134f00
 80039e4:	50004600 	.word	0x50004600
 80039e8:	01074f00 	.word	0x01074f00
 80039ec:	01044f00 	.word	0x01044f00
 80039f0:	01034f00 	.word	0x01034f00
 80039f4:	50004100 	.word	0x50004100
 80039f8:	6b5fca6b 	.word	0x6b5fca6b

080039fc <SystemInit>:
{
 80039fc:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 80039fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a04:	4c03      	ldr	r4, [pc, #12]	; (8003a14 <SystemInit+0x18>)
 8003a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemCoreSetup();
 8003a0a:	f7ff fea3 	bl	8003754 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8003a0e:	f7fc fc51 	bl	80002b4 <SystemCoreClockSetup>
}
 8003a12:	bd10      	pop	{r4, pc}
 8003a14:	2000ffc4 	.word	0x2000ffc4

08003a18 <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8003a18:	4a0b      	ldr	r2, [pc, #44]	; (8003a48 <_sbrk+0x30>)
{
 8003a1a:	b508      	push	{r3, lr}
 8003a1c:	4603      	mov	r3, r0
  if (heap_ptr == NULL) {
 8003a1e:	6810      	ldr	r0, [r2, #0]
 8003a20:	b178      	cbz	r0, 8003a42 <_sbrk+0x2a>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003a22:	3303      	adds	r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8003a24:	4909      	ldr	r1, [pc, #36]	; (8003a4c <_sbrk+0x34>)
  nbytes = (nbytes + 3) & ~0x3U;
 8003a26:	f023 0303 	bic.w	r3, r3, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8003a2a:	4403      	add	r3, r0
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d201      	bcs.n	8003a34 <_sbrk+0x1c>
  {
    heap_ptr += nbytes;
 8003a30:	6013      	str	r3, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 8003a32:	bd08      	pop	{r3, pc}
    errno = ENOMEM;
 8003a34:	f000 f810 	bl	8003a58 <__errno>
 8003a38:	230c      	movs	r3, #12
 8003a3a:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 8003a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003a40:	bd08      	pop	{r3, pc}
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <_sbrk+0x38>)
 8003a44:	6010      	str	r0, [r2, #0]
 8003a46:	e7ec      	b.n	8003a22 <_sbrk+0xa>
 8003a48:	20000b38 	.word	0x20000b38
 8003a4c:	2000ffc0 	.word	0x2000ffc0
 8003a50:	20000b40 	.word	0x20000b40

08003a54 <_init>:

/* Init */
void _init(void)
{}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop

08003a58 <__errno>:
 8003a58:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <__errno+0x8>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000030 	.word	0x20000030

08003a64 <__libc_init_array>:
 8003a64:	b570      	push	{r4, r5, r6, lr}
 8003a66:	4e0d      	ldr	r6, [pc, #52]	; (8003a9c <__libc_init_array+0x38>)
 8003a68:	4d0d      	ldr	r5, [pc, #52]	; (8003aa0 <__libc_init_array+0x3c>)
 8003a6a:	1b76      	subs	r6, r6, r5
 8003a6c:	10b6      	asrs	r6, r6, #2
 8003a6e:	d006      	beq.n	8003a7e <__libc_init_array+0x1a>
 8003a70:	2400      	movs	r4, #0
 8003a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a76:	3401      	adds	r4, #1
 8003a78:	4798      	blx	r3
 8003a7a:	42a6      	cmp	r6, r4
 8003a7c:	d1f9      	bne.n	8003a72 <__libc_init_array+0xe>
 8003a7e:	4e09      	ldr	r6, [pc, #36]	; (8003aa4 <__libc_init_array+0x40>)
 8003a80:	4d09      	ldr	r5, [pc, #36]	; (8003aa8 <__libc_init_array+0x44>)
 8003a82:	1b76      	subs	r6, r6, r5
 8003a84:	f7ff ffe6 	bl	8003a54 <_init>
 8003a88:	10b6      	asrs	r6, r6, #2
 8003a8a:	d006      	beq.n	8003a9a <__libc_init_array+0x36>
 8003a8c:	2400      	movs	r4, #0
 8003a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a92:	3401      	adds	r4, #1
 8003a94:	4798      	blx	r3
 8003a96:	42a6      	cmp	r6, r4
 8003a98:	d1f9      	bne.n	8003a8e <__libc_init_array+0x2a>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	20000460 	.word	0x20000460
 8003aa0:	20000460 	.word	0x20000460
 8003aa4:	20000460 	.word	0x20000460
 8003aa8:	20000460 	.word	0x20000460

08003aac <memcpy>:
 8003aac:	4684      	mov	ip, r0
 8003aae:	ea41 0300 	orr.w	r3, r1, r0
 8003ab2:	f013 0303 	ands.w	r3, r3, #3
 8003ab6:	d16d      	bne.n	8003b94 <memcpy+0xe8>
 8003ab8:	3a40      	subs	r2, #64	; 0x40
 8003aba:	d341      	bcc.n	8003b40 <memcpy+0x94>
 8003abc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ac0:	f840 3b04 	str.w	r3, [r0], #4
 8003ac4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ac8:	f840 3b04 	str.w	r3, [r0], #4
 8003acc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ad0:	f840 3b04 	str.w	r3, [r0], #4
 8003ad4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ad8:	f840 3b04 	str.w	r3, [r0], #4
 8003adc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ae0:	f840 3b04 	str.w	r3, [r0], #4
 8003ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ae8:	f840 3b04 	str.w	r3, [r0], #4
 8003aec:	f851 3b04 	ldr.w	r3, [r1], #4
 8003af0:	f840 3b04 	str.w	r3, [r0], #4
 8003af4:	f851 3b04 	ldr.w	r3, [r1], #4
 8003af8:	f840 3b04 	str.w	r3, [r0], #4
 8003afc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b00:	f840 3b04 	str.w	r3, [r0], #4
 8003b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b08:	f840 3b04 	str.w	r3, [r0], #4
 8003b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b10:	f840 3b04 	str.w	r3, [r0], #4
 8003b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b18:	f840 3b04 	str.w	r3, [r0], #4
 8003b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b20:	f840 3b04 	str.w	r3, [r0], #4
 8003b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b28:	f840 3b04 	str.w	r3, [r0], #4
 8003b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b30:	f840 3b04 	str.w	r3, [r0], #4
 8003b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b38:	f840 3b04 	str.w	r3, [r0], #4
 8003b3c:	3a40      	subs	r2, #64	; 0x40
 8003b3e:	d2bd      	bcs.n	8003abc <memcpy+0x10>
 8003b40:	3230      	adds	r2, #48	; 0x30
 8003b42:	d311      	bcc.n	8003b68 <memcpy+0xbc>
 8003b44:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b48:	f840 3b04 	str.w	r3, [r0], #4
 8003b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b50:	f840 3b04 	str.w	r3, [r0], #4
 8003b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b58:	f840 3b04 	str.w	r3, [r0], #4
 8003b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b60:	f840 3b04 	str.w	r3, [r0], #4
 8003b64:	3a10      	subs	r2, #16
 8003b66:	d2ed      	bcs.n	8003b44 <memcpy+0x98>
 8003b68:	320c      	adds	r2, #12
 8003b6a:	d305      	bcc.n	8003b78 <memcpy+0xcc>
 8003b6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b70:	f840 3b04 	str.w	r3, [r0], #4
 8003b74:	3a04      	subs	r2, #4
 8003b76:	d2f9      	bcs.n	8003b6c <memcpy+0xc0>
 8003b78:	3204      	adds	r2, #4
 8003b7a:	d008      	beq.n	8003b8e <memcpy+0xe2>
 8003b7c:	07d2      	lsls	r2, r2, #31
 8003b7e:	bf1c      	itt	ne
 8003b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b84:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b88:	d301      	bcc.n	8003b8e <memcpy+0xe2>
 8003b8a:	880b      	ldrh	r3, [r1, #0]
 8003b8c:	8003      	strh	r3, [r0, #0]
 8003b8e:	4660      	mov	r0, ip
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2a08      	cmp	r2, #8
 8003b96:	d313      	bcc.n	8003bc0 <memcpy+0x114>
 8003b98:	078b      	lsls	r3, r1, #30
 8003b9a:	d08d      	beq.n	8003ab8 <memcpy+0xc>
 8003b9c:	f010 0303 	ands.w	r3, r0, #3
 8003ba0:	d08a      	beq.n	8003ab8 <memcpy+0xc>
 8003ba2:	f1c3 0304 	rsb	r3, r3, #4
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	07db      	lsls	r3, r3, #31
 8003baa:	bf1c      	itt	ne
 8003bac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003bb0:	f800 3b01 	strbne.w	r3, [r0], #1
 8003bb4:	d380      	bcc.n	8003ab8 <memcpy+0xc>
 8003bb6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003bba:	f820 3b02 	strh.w	r3, [r0], #2
 8003bbe:	e77b      	b.n	8003ab8 <memcpy+0xc>
 8003bc0:	3a04      	subs	r2, #4
 8003bc2:	d3d9      	bcc.n	8003b78 <memcpy+0xcc>
 8003bc4:	3a01      	subs	r2, #1
 8003bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bca:	f800 3b01 	strb.w	r3, [r0], #1
 8003bce:	d2f9      	bcs.n	8003bc4 <memcpy+0x118>
 8003bd0:	780b      	ldrb	r3, [r1, #0]
 8003bd2:	7003      	strb	r3, [r0, #0]
 8003bd4:	784b      	ldrb	r3, [r1, #1]
 8003bd6:	7043      	strb	r3, [r0, #1]
 8003bd8:	788b      	ldrb	r3, [r1, #2]
 8003bda:	7083      	strb	r3, [r0, #2]
 8003bdc:	4660      	mov	r0, ip
 8003bde:	4770      	bx	lr

08003be0 <memset>:
 8003be0:	0783      	lsls	r3, r0, #30
 8003be2:	b530      	push	{r4, r5, lr}
 8003be4:	d048      	beq.n	8003c78 <memset+0x98>
 8003be6:	1e54      	subs	r4, r2, #1
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	d03f      	beq.n	8003c6c <memset+0x8c>
 8003bec:	b2ca      	uxtb	r2, r1
 8003bee:	4603      	mov	r3, r0
 8003bf0:	e001      	b.n	8003bf6 <memset+0x16>
 8003bf2:	3c01      	subs	r4, #1
 8003bf4:	d33a      	bcc.n	8003c6c <memset+0x8c>
 8003bf6:	f803 2b01 	strb.w	r2, [r3], #1
 8003bfa:	079d      	lsls	r5, r3, #30
 8003bfc:	d1f9      	bne.n	8003bf2 <memset+0x12>
 8003bfe:	2c03      	cmp	r4, #3
 8003c00:	d92d      	bls.n	8003c5e <memset+0x7e>
 8003c02:	b2cd      	uxtb	r5, r1
 8003c04:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003c08:	2c0f      	cmp	r4, #15
 8003c0a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003c0e:	d936      	bls.n	8003c7e <memset+0x9e>
 8003c10:	f1a4 0210 	sub.w	r2, r4, #16
 8003c14:	f022 0c0f 	bic.w	ip, r2, #15
 8003c18:	f103 0e20 	add.w	lr, r3, #32
 8003c1c:	44e6      	add	lr, ip
 8003c1e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8003c22:	f103 0210 	add.w	r2, r3, #16
 8003c26:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003c2a:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003c2e:	3210      	adds	r2, #16
 8003c30:	4572      	cmp	r2, lr
 8003c32:	d1f8      	bne.n	8003c26 <memset+0x46>
 8003c34:	f10c 0201 	add.w	r2, ip, #1
 8003c38:	f014 0f0c 	tst.w	r4, #12
 8003c3c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003c40:	f004 0c0f 	and.w	ip, r4, #15
 8003c44:	d013      	beq.n	8003c6e <memset+0x8e>
 8003c46:	f1ac 0304 	sub.w	r3, ip, #4
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f842 5b04 	str.w	r5, [r2], #4
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d1fb      	bne.n	8003c52 <memset+0x72>
 8003c5a:	f00c 0403 	and.w	r4, ip, #3
 8003c5e:	b12c      	cbz	r4, 8003c6c <memset+0x8c>
 8003c60:	b2ca      	uxtb	r2, r1
 8003c62:	441c      	add	r4, r3
 8003c64:	f803 2b01 	strb.w	r2, [r3], #1
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d1fb      	bne.n	8003c64 <memset+0x84>
 8003c6c:	bd30      	pop	{r4, r5, pc}
 8003c6e:	4664      	mov	r4, ip
 8003c70:	4613      	mov	r3, r2
 8003c72:	2c00      	cmp	r4, #0
 8003c74:	d1f4      	bne.n	8003c60 <memset+0x80>
 8003c76:	e7f9      	b.n	8003c6c <memset+0x8c>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4614      	mov	r4, r2
 8003c7c:	e7bf      	b.n	8003bfe <memset+0x1e>
 8003c7e:	461a      	mov	r2, r3
 8003c80:	46a4      	mov	ip, r4
 8003c82:	e7e0      	b.n	8003c46 <memset+0x66>
	...

08003cc0 <strlen>:
 8003cc0:	f890 f000 	pld	[r0]
 8003cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003cc8:	f020 0107 	bic.w	r1, r0, #7
 8003ccc:	f06f 0c00 	mvn.w	ip, #0
 8003cd0:	f010 0407 	ands.w	r4, r0, #7
 8003cd4:	f891 f020 	pld	[r1, #32]
 8003cd8:	f040 8049 	bne.w	8003d6e <strlen+0xae>
 8003cdc:	f04f 0400 	mov.w	r4, #0
 8003ce0:	f06f 0007 	mvn.w	r0, #7
 8003ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003ce8:	f891 f040 	pld	[r1, #64]	; 0x40
 8003cec:	f100 0008 	add.w	r0, r0, #8
 8003cf0:	fa82 f24c 	uadd8	r2, r2, ip
 8003cf4:	faa4 f28c 	sel	r2, r4, ip
 8003cf8:	fa83 f34c 	uadd8	r3, r3, ip
 8003cfc:	faa2 f38c 	sel	r3, r2, ip
 8003d00:	bb4b      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003d06:	fa82 f24c 	uadd8	r2, r2, ip
 8003d0a:	f100 0008 	add.w	r0, r0, #8
 8003d0e:	faa4 f28c 	sel	r2, r4, ip
 8003d12:	fa83 f34c 	uadd8	r3, r3, ip
 8003d16:	faa2 f38c 	sel	r3, r2, ip
 8003d1a:	b9e3      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8003d20:	fa82 f24c 	uadd8	r2, r2, ip
 8003d24:	f100 0008 	add.w	r0, r0, #8
 8003d28:	faa4 f28c 	sel	r2, r4, ip
 8003d2c:	fa83 f34c 	uadd8	r3, r3, ip
 8003d30:	faa2 f38c 	sel	r3, r2, ip
 8003d34:	b97b      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8003d3a:	f101 0120 	add.w	r1, r1, #32
 8003d3e:	fa82 f24c 	uadd8	r2, r2, ip
 8003d42:	f100 0008 	add.w	r0, r0, #8
 8003d46:	faa4 f28c 	sel	r2, r4, ip
 8003d4a:	fa83 f34c 	uadd8	r3, r3, ip
 8003d4e:	faa2 f38c 	sel	r3, r2, ip
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c6      	beq.n	8003ce4 <strlen+0x24>
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	bf04      	itt	eq
 8003d5a:	3004      	addeq	r0, #4
 8003d5c:	461a      	moveq	r2, r3
 8003d5e:	ba12      	rev	r2, r2
 8003d60:	fab2 f282 	clz	r2, r2
 8003d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8003d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003d6c:	4770      	bx	lr
 8003d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003d72:	f004 0503 	and.w	r5, r4, #3
 8003d76:	f1c4 0000 	rsb	r0, r4, #0
 8003d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8003d7e:	f014 0f04 	tst.w	r4, #4
 8003d82:	f891 f040 	pld	[r1, #64]	; 0x40
 8003d86:	fa0c f505 	lsl.w	r5, ip, r5
 8003d8a:	ea62 0205 	orn	r2, r2, r5
 8003d8e:	bf1c      	itt	ne
 8003d90:	ea63 0305 	ornne	r3, r3, r5
 8003d94:	4662      	movne	r2, ip
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	e7a9      	b.n	8003cf0 <strlen+0x30>

08003d9c <clock_config>:
 8003d9c:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8003dac:	0101 0101                                   ....

08003db0 <out_config>:
 8003db0:	0080 0000 0000 0001 0000 0000               ............

08003dbc <in_config>:
 8003dbc:	0000 0000 0000 0001 0000 0000               ............

08003dc8 <ConfigurationDescriptor>:
 8003dc8:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 8003dd8:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 8003de8:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 8003df8:	0507 0203 0040 0705 8205 4002 0500 0000     ....@......@....

08003e08 <DeviceDescriptor>:
 8003e08:	0112 0110 0002 4000 058b 0058 0010 0201     .......@..X.....
 8003e18:	0100 0000                                   ....

08003e1c <CSWTCH.1>:
 8003e1c:	3eb0 0800 3e54 0800 3e30 0800               .>..T>..0>..

08003e28 <CSWTCH.2>:
 8003e28:	0004 0058 0020 0000                         ..X. ...

08003e30 <ProductString>:
 8003e30:	0320 0049 0000 0046 0000 0058 0000 0020      .I...F...X... .
 8003e40:	0000 0043 0000 0044 0000 0043 0000 0000     ..C...D...C.....
 8003e50:	0000 0000                                   ....

08003e54 <ManufacturerString>:
 8003e54:	0358 0049 0000 006e 0000 0066 0000 0069     X.I...n...f...i.
 8003e64:	0000 006e 0000 0065 0000 006f 0000 006e     ..n...e...o...n.
 8003e74:	0000 0020 0000 0054 0000 0065 0000 0063     .. ...T...e...c.
 8003e84:	0000 0068 0000 006e 0000 006f 0000 006c     ..h...n...o...l.
 8003e94:	0000 006f 0000 0067 0000 0069 0000 0065     ..o...g...i...e.
 8003ea4:	0000 0073 0000 0000 0000 0000               ..s.........

08003eb0 <LanguageString>:
 8003eb0:	0304 0409 0000 0000                         ........

08003eb8 <Driver_USBD0>:
 8003eb8:	0d21 0800 1239 0800 0f99 0800 0d29 0800     !...9.......)...
 8003ec8:	0d41 0800 1439 0800 0da9 0800 0fbd 0800     A...9...........
 8003ed8:	0e7d 0800 0dc1 0800 0d59 0800 1399 0800     }.......Y.......
 8003ee8:	13d9 0800 0e3d 0800 0f69 0800 0f7d 0800     ....=...i...}...
 8003ef8:	20a1 0000 0000 0002                         . ......

08003f00 <_global_impure_ptr>:
 8003f00:	0038 2000                                   8.. 
